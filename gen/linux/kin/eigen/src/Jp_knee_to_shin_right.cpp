/*
 * Automatically Generated from Mathematica.
 * Tue 8 Jan 2019 22:44:32 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jp_knee_to_shin_right.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE static inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }


/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,20> &p_output1, const Eigen::Matrix<double,20,1> &var1)
{
  double t536;
  double t1432;
  double t1182;
  double t1291;
  double t1497;
  double t25;
  double t32;
  double t67;
  double t214;
  double t1015;
  double t1413;
  double t1617;
  double t1669;
  double t1742;
  double t1894;
  double t1930;
  double t1934;
  double t23;
  double t2103;
  double t2123;
  double t2126;
  double t2208;
  double t2342;
  double t2369;
  double t2527;
  double t2574;
  double t2611;
  double t2662;
  double t2975;
  double t2989;
  double t3079;
  double t3181;
  double t3285;
  double t3327;
  double t3446;
  double t3691;
  double t3723;
  double t3791;
  double t4066;
  double t4098;
  double t4193;
  double t4283;
  double t4358;
  double t4363;
  double t4493;
  double t4541;
  double t4558;
  double t4614;
  double t4701;
  double t4768;
  double t4803;
  double t189;
  double t260;
  double t297;
  double t1070;
  double t1137;
  double t1747;
  double t1767;
  double t1810;
  double t1881;
  double t2037;
  double t2050;
  double t2061;
  double t5055;
  double t5101;
  double t5112;
  double t5178;
  double t5390;
  double t5439;
  double t2523;
  double t2540;
  double t2571;
  double t5454;
  double t5486;
  double t5518;
  double t2842;
  double t2898;
  double t2972;
  double t3357;
  double t3600;
  double t3628;
  double t5530;
  double t5539;
  double t5554;
  double t5686;
  double t5705;
  double t5731;
  double t3864;
  double t3956;
  double t3957;
  double t4460;
  double t4510;
  double t4538;
  double t5807;
  double t5817;
  double t5863;
  double t5872;
  double t5897;
  double t5946;
  double t4628;
  double t4638;
  double t4642;
  double t6046;
  double t6093;
  double t6133;
  double t6149;
  double t6161;
  double t6169;
  double t6565;
  double t6577;
  double t6593;
  double t6760;
  double t6845;
  double t6874;
  double t6949;
  double t6987;
  double t6993;
  double t7008;
  double t7012;
  double t7058;
  double t7092;
  double t7135;
  double t7164;
  double t7188;
  double t7213;
  double t7226;
  double t7279;
  double t7287;
  double t7294;
  double t7481;
  double t7490;
  double t7494;
  double t7543;
  double t7565;
  double t7570;
  double t7684;
  double t7688;
  double t7696;
  double t7742;
  double t7761;
  double t7764;
  double t7785;
  double t7804;
  double t7806;
  double t7834;
  double t7837;
  double t7857;
  double t7878;
  double t7895;
  double t7938;
  double t8139;
  double t8146;
  double t8156;
  double t8170;
  double t8178;
  double t8182;
  double t8234;
  double t8241;
  double t8264;
  double t8288;
  double t8290;
  double t8296;
  double t8311;
  double t8312;
  double t8319;
  double t8337;
  double t8342;
  double t8354;
  double t8368;
  double t8372;
  double t8377;
  double t8437;
  double t8447;
  double t8449;
  double t8525;
  double t8527;
  double t8477;
  double t8478;
  double t8492;
  double t8566;
  double t8572;
  double t8574;
  double t8587;
  double t8591;
  double t8595;
  double t8610;
  double t8617;
  double t8624;
  double t8630;
  double t8649;
  double t8650;
  double t8779;
  double t8785;
  double t8788;
  double t8822;
  double t8850;
  double t8859;
  double t8809;
  double t8813;
  double t8888;
  double t8892;
  double t8903;
  double t8919;
  double t8921;
  double t8923;
  double t8927;
  double t8928;
  double t8941;
  double t8955;
  double t8957;
  double t8963;
  double t9112;
  double t9131;
  double t9138;
  double t9054;
  double t9063;
  double t9076;
  double t9162;
  double t9171;
  double t9173;
  double t9180;
  double t9186;
  double t9189;
  double t9207;
  double t9213;
  double t9217;
  double t9219;
  double t9220;
  double t9228;
  double t9291;
  double t9298;
  double t9317;
  double t9327;
  double t9335;
  double t9351;
  double t9356;
  double t9364;
  double t9381;
  double t9383;
  double t9414;
  double t9421;
  double t9425;
  double t9431;
  double t9494;
  double t9495;
  double t9501;
  double t9509;
  double t9515;
  double t9504;
  double t9506;
  double t9547;
  double t9553;
  double t9560;
  double t9564;
  double t9565;
  double t9567;
  double t9572;
  double t9574;
  double t9578;
  double t9609;
  double t9611;
  double t9613;
  double t9088;
  double t9144;
  double t9155;
  double t9160;
  double t9174;
  double t9193;
  double t9218;
  double t9231;
  double t9233;
  double t9245;
  double t9246;
  double t9248;
  double t9255;
  double t9262;
  double t9264;
  double t9268;
  double t5598;
  double t5618;
  double t5656;
  double t9738;
  double t9742;
  double t9746;
  double t9752;
  double t9753;
  double t9756;
  double t9682;
  double t9690;
  double t9691;
  double t9708;
  double t9709;
  double t9803;
  double t9812;
  double t9813;
  double t9820;
  double t9823;
  double t9825;
  double t9845;
  double t9849;
  double t9850;
  double t9858;
  double t9863;
  double t9864;
  double t9908;
  double t9910;
  double t9912;
  double t9915;
  double t9920;
  double t9923;
  double t9944;
  double t9945;
  double t9946;
  double t9951;
  double t9952;
  double t9962;
  double t10002;
  double t10010;
  double t10011;
  double t10024;
  double t10026;
  double t10034;
  double t10035;
  double t10036;
  double t9987;
  double t9990;
  double t9997;
  double t9998;
  double t9999;
  double t10071;
  double t10077;
  double t10086;
  double t10088;
  double t10093;
  double t10094;
  double t10100;
  double t10101;
  double t10102;
  double t10108;
  double t10109;
  double t10111;
  double t10119;
  double t10120;
  double t10126;
  double t10168;
  double t10170;
  double t10171;
  double t10173;
  double t10175;
  double t10176;
  double t10180;
  double t10181;
  double t10183;
  double t10187;
  double t10188;
  double t10192;
  double t10199;
  double t10200;
  double t10202;
  double t10251;
  double t10252;
  double t6370;
  double t10235;
  double t10237;
  double t10238;
  double t10242;
  double t10243;
  double t10281;
  double t10284;
  double t10286;
  double t10291;
  double t10294;
  double t10297;
  double t10300;
  double t10317;
  double t10324;
  double t10325;
  double t10333;
  double t10335;
  double t10338;
  double t10339;
  double t10257;
  double t6383;
  double t6413;
  double t10358;
  double t10359;
  double t10364;
  double t10365;
  double t10368;
  double t10303;
  double t10380;
  double t10381;
  double t10382;
  double t10310;
  double t10343;
  double t10398;
  double t10401;
  double t10402;
  double t10349;
  t536 = Sin(var1[3]);
  t1432 = Cos(var1[3]);
  t1182 = Cos(var1[5]);
  t1291 = Sin(var1[4]);
  t1497 = Sin(var1[5]);
  t25 = Cos(var1[14]);
  t32 = -1.*t25;
  t67 = 1. + t32;
  t214 = Sin(var1[14]);
  t1015 = Sin(var1[13]);
  t1413 = -1.*t1182*t536*t1291;
  t1617 = t1432*t1497;
  t1669 = t1413 + t1617;
  t1742 = Cos(var1[13]);
  t1894 = -1.*t1432*t1182;
  t1930 = -1.*t536*t1291*t1497;
  t1934 = t1894 + t1930;
  t23 = Cos(var1[4]);
  t2103 = t1015*t1669;
  t2123 = t1742*t1934;
  t2126 = t2103 + t2123;
  t2208 = Cos(var1[15]);
  t2342 = -1.*t2208;
  t2369 = 1. + t2342;
  t2527 = Sin(var1[15]);
  t2574 = t1742*t1669;
  t2611 = -1.*t1015*t1934;
  t2662 = t2574 + t2611;
  t2975 = -1.*t25*t23*t536;
  t2989 = t214*t2126;
  t3079 = t2975 + t2989;
  t3181 = Cos(var1[16]);
  t3285 = -1.*t3181;
  t3327 = 1. + t3285;
  t3446 = Sin(var1[16]);
  t3691 = t2527*t2662;
  t3723 = t2208*t3079;
  t3791 = t3691 + t3723;
  t4066 = t2208*t2662;
  t4098 = -1.*t2527*t3079;
  t4193 = t4066 + t4098;
  t4283 = Cos(var1[17]);
  t4358 = -1.*t4283;
  t4363 = 1. + t4358;
  t4493 = Sin(var1[17]);
  t4541 = -1.*t3446*t3791;
  t4558 = t3181*t4193;
  t4614 = t4541 + t4558;
  t4701 = t3181*t3791;
  t4768 = t3446*t4193;
  t4803 = t4701 + t4768;
  t189 = -0.049*t67;
  t260 = -0.135*t214;
  t297 = 0. + t189 + t260;
  t1070 = 0.135*t1015;
  t1137 = 0. + t1070;
  t1747 = -1.*t1742;
  t1767 = 1. + t1747;
  t1810 = -0.135*t1767;
  t1881 = 0. + t1810;
  t2037 = -0.135*t67;
  t2050 = 0.049*t214;
  t2061 = 0. + t2037 + t2050;
  t5055 = t1432*t1182*t1291;
  t5101 = t536*t1497;
  t5112 = t5055 + t5101;
  t5178 = -1.*t1182*t536;
  t5390 = t1432*t1291*t1497;
  t5439 = t5178 + t5390;
  t2523 = -0.09*t2369;
  t2540 = 0.049*t2527;
  t2571 = 0. + t2523 + t2540;
  t5454 = t1015*t5112;
  t5486 = t1742*t5439;
  t5518 = t5454 + t5486;
  t2842 = -0.049*t2369;
  t2898 = -0.09*t2527;
  t2972 = 0. + t2842 + t2898;
  t3357 = -0.049*t3327;
  t3600 = -0.21*t3446;
  t3628 = 0. + t3357 + t3600;
  t5530 = t1742*t5112;
  t5539 = -1.*t1015*t5439;
  t5554 = t5530 + t5539;
  t5686 = t25*t1432*t23;
  t5705 = t214*t5518;
  t5731 = t5686 + t5705;
  t3864 = -0.21*t3327;
  t3956 = 0.049*t3446;
  t3957 = 0. + t3864 + t3956;
  t4460 = -0.2707*t4363;
  t4510 = 0.0016*t4493;
  t4538 = 0. + t4460 + t4510;
  t5807 = t2527*t5554;
  t5817 = t2208*t5731;
  t5863 = t5807 + t5817;
  t5872 = t2208*t5554;
  t5897 = -1.*t2527*t5731;
  t5946 = t5872 + t5897;
  t4628 = -0.0016*t4363;
  t4638 = -0.2707*t4493;
  t4642 = 0. + t4628 + t4638;
  t6046 = -1.*t3446*t5863;
  t6093 = t3181*t5946;
  t6133 = t6046 + t6093;
  t6149 = t3181*t5863;
  t6161 = t3446*t5946;
  t6169 = t6149 + t6161;
  t6565 = t1432*t23*t1182*t1015;
  t6577 = t1742*t1432*t23*t1497;
  t6593 = t6565 + t6577;
  t6760 = t1742*t1432*t23*t1182;
  t6845 = -1.*t1432*t23*t1015*t1497;
  t6874 = t6760 + t6845;
  t6949 = -1.*t25*t1432*t1291;
  t6987 = t214*t6593;
  t6993 = t6949 + t6987;
  t7008 = t2527*t6874;
  t7012 = t2208*t6993;
  t7058 = t7008 + t7012;
  t7092 = t2208*t6874;
  t7135 = -1.*t2527*t6993;
  t7164 = t7092 + t7135;
  t7188 = -1.*t3446*t7058;
  t7213 = t3181*t7164;
  t7226 = t7188 + t7213;
  t7279 = t3181*t7058;
  t7287 = t3446*t7164;
  t7294 = t7279 + t7287;
  t7481 = t23*t1182*t1015*t536;
  t7490 = t1742*t23*t536*t1497;
  t7494 = t7481 + t7490;
  t7543 = t1742*t23*t1182*t536;
  t7565 = -1.*t23*t1015*t536*t1497;
  t7570 = t7543 + t7565;
  t7684 = -1.*t25*t536*t1291;
  t7688 = t214*t7494;
  t7696 = t7684 + t7688;
  t7742 = t2527*t7570;
  t7761 = t2208*t7696;
  t7764 = t7742 + t7761;
  t7785 = t2208*t7570;
  t7804 = -1.*t2527*t7696;
  t7806 = t7785 + t7804;
  t7834 = -1.*t3446*t7764;
  t7837 = t3181*t7806;
  t7857 = t7834 + t7837;
  t7878 = t3181*t7764;
  t7895 = t3446*t7806;
  t7938 = t7878 + t7895;
  t8139 = -1.*t1182*t1015*t1291;
  t8146 = -1.*t1742*t1291*t1497;
  t8156 = t8139 + t8146;
  t8170 = -1.*t1742*t1182*t1291;
  t8178 = t1015*t1291*t1497;
  t8182 = t8170 + t8178;
  t8234 = -1.*t25*t23;
  t8241 = t214*t8156;
  t8264 = t8234 + t8241;
  t8288 = t2527*t8182;
  t8290 = t2208*t8264;
  t8296 = t8288 + t8290;
  t8311 = t2208*t8182;
  t8312 = -1.*t2527*t8264;
  t8319 = t8311 + t8312;
  t8337 = -1.*t3446*t8296;
  t8342 = t3181*t8319;
  t8354 = t8337 + t8342;
  t8368 = t3181*t8296;
  t8372 = t3446*t8319;
  t8377 = t8368 + t8372;
  t8437 = t1182*t536;
  t8447 = -1.*t1432*t1291*t1497;
  t8449 = t8437 + t8447;
  t8525 = t1015*t8449;
  t8527 = t5530 + t8525;
  t8477 = -1.*t1015*t5112;
  t8478 = t1742*t8449;
  t8492 = t8477 + t8478;
  t8566 = t2527*t8492;
  t8572 = t2208*t214*t8527;
  t8574 = t8566 + t8572;
  t8587 = t2208*t8492;
  t8591 = -1.*t214*t2527*t8527;
  t8595 = t8587 + t8591;
  t8610 = -1.*t3446*t8574;
  t8617 = t3181*t8595;
  t8624 = t8610 + t8617;
  t8630 = t3181*t8574;
  t8649 = t3446*t8595;
  t8650 = t8630 + t8649;
  t8779 = t1182*t536*t1291;
  t8785 = -1.*t1432*t1497;
  t8788 = t8779 + t8785;
  t8822 = t1742*t8788;
  t8850 = t1015*t1934;
  t8859 = t8822 + t8850;
  t8809 = -1.*t1015*t8788;
  t8813 = t8809 + t2123;
  t8888 = t2527*t8813;
  t8892 = t2208*t214*t8859;
  t8903 = t8888 + t8892;
  t8919 = t2208*t8813;
  t8921 = -1.*t214*t2527*t8859;
  t8923 = t8919 + t8921;
  t8927 = -1.*t3446*t8903;
  t8928 = t3181*t8923;
  t8941 = t8927 + t8928;
  t8955 = t3181*t8903;
  t8957 = t3446*t8923;
  t8963 = t8955 + t8957;
  t9112 = t1742*t23*t1182;
  t9131 = -1.*t23*t1015*t1497;
  t9138 = t9112 + t9131;
  t9054 = -1.*t23*t1182*t1015;
  t9063 = -1.*t1742*t23*t1497;
  t9076 = t9054 + t9063;
  t9162 = t2527*t9076;
  t9171 = t2208*t214*t9138;
  t9173 = t9162 + t9171;
  t9180 = t2208*t9076;
  t9186 = -1.*t214*t2527*t9138;
  t9189 = t9180 + t9186;
  t9207 = -1.*t3446*t9173;
  t9213 = t3181*t9189;
  t9217 = t9207 + t9213;
  t9219 = t3181*t9173;
  t9220 = t3446*t9189;
  t9228 = t9219 + t9220;
  t9291 = -1.*t1742*t5439;
  t9298 = t8477 + t9291;
  t9317 = t2527*t9298;
  t9327 = t2208*t214*t5554;
  t9335 = t9317 + t9327;
  t9351 = t2208*t9298;
  t9356 = -1.*t214*t2527*t5554;
  t9364 = t9351 + t9356;
  t9381 = -1.*t3446*t9335;
  t9383 = t3181*t9364;
  t9414 = t9381 + t9383;
  t9421 = t3181*t9335;
  t9425 = t3446*t9364;
  t9431 = t9421 + t9425;
  t9494 = t1432*t1182;
  t9495 = t536*t1291*t1497;
  t9501 = t9494 + t9495;
  t9509 = -1.*t1015*t9501;
  t9515 = t8822 + t9509;
  t9504 = -1.*t1742*t9501;
  t9506 = t8809 + t9504;
  t9547 = t2527*t9506;
  t9553 = t2208*t214*t9515;
  t9560 = t9547 + t9553;
  t9564 = t2208*t9506;
  t9565 = -1.*t214*t2527*t9515;
  t9567 = t9564 + t9565;
  t9572 = -1.*t3446*t9560;
  t9574 = t3181*t9567;
  t9578 = t9572 + t9574;
  t9609 = t3181*t9560;
  t9611 = t3446*t9567;
  t9613 = t9609 + t9611;
  t9088 = t2571*t9076;
  t9144 = -0.1305*t25*t9138;
  t9155 = t2061*t9138;
  t9160 = t214*t2972*t9138;
  t9174 = t3628*t9173;
  t9193 = t3957*t9189;
  t9218 = t4538*t9217;
  t9231 = t4642*t9228;
  t9233 = t4493*t9217;
  t9245 = t4283*t9228;
  t9246 = t9233 + t9245;
  t9248 = -0.0016*t9246;
  t9255 = t4283*t9217;
  t9262 = -1.*t4493*t9228;
  t9264 = t9255 + t9262;
  t9268 = -0.2707*t9264;
  t5598 = -1.*t1432*t23*t214;
  t5618 = t25*t5518;
  t5656 = t5598 + t5618;
  t9738 = -1.*t3181*t2527*t5656;
  t9742 = -1.*t2208*t3446*t5656;
  t9746 = t9738 + t9742;
  t9752 = t2208*t3181*t5656;
  t9753 = -1.*t2527*t3446*t5656;
  t9756 = t9752 + t9753;
  t9682 = -0.135*t25;
  t9690 = -0.049*t214;
  t9691 = t9682 + t9690;
  t9708 = 0.049*t25;
  t9709 = t9708 + t260;
  t9803 = t1015*t8788;
  t9812 = t1742*t9501;
  t9813 = t9803 + t9812;
  t9820 = -1.*t23*t214*t536;
  t9823 = t25*t9813;
  t9825 = t9820 + t9823;
  t9845 = -1.*t3181*t2527*t9825;
  t9849 = -1.*t2208*t3446*t9825;
  t9850 = t9845 + t9849;
  t9858 = t2208*t3181*t9825;
  t9863 = -1.*t2527*t3446*t9825;
  t9864 = t9858 + t9863;
  t9908 = t23*t1182*t1015;
  t9910 = t1742*t23*t1497;
  t9912 = t9908 + t9910;
  t9915 = t214*t1291;
  t9920 = t25*t9912;
  t9923 = t9915 + t9920;
  t9944 = -1.*t3181*t2527*t9923;
  t9945 = -1.*t2208*t3446*t9923;
  t9946 = t9944 + t9945;
  t9951 = t2208*t3181*t9923;
  t9952 = -1.*t2527*t3446*t9923;
  t9962 = t9951 + t9952;
  t10002 = -1.*t2527*t5554;
  t10010 = -1.*t2208*t5731;
  t10011 = t10002 + t10010;
  t10024 = t3446*t10011;
  t10026 = t10024 + t6093;
  t10034 = t3181*t10011;
  t10035 = -1.*t3446*t5946;
  t10036 = t10034 + t10035;
  t9987 = 0.049*t2208;
  t9990 = t9987 + t2898;
  t9997 = -0.09*t2208;
  t9998 = -0.049*t2527;
  t9999 = t9997 + t9998;
  t10071 = t25*t23*t536;
  t10077 = t214*t9813;
  t10086 = t10071 + t10077;
  t10088 = -1.*t2527*t9515;
  t10093 = -1.*t2208*t10086;
  t10094 = t10088 + t10093;
  t10100 = t2208*t9515;
  t10101 = -1.*t2527*t10086;
  t10102 = t10100 + t10101;
  t10108 = t3446*t10094;
  t10109 = t3181*t10102;
  t10111 = t10108 + t10109;
  t10119 = t3181*t10094;
  t10120 = -1.*t3446*t10102;
  t10126 = t10119 + t10120;
  t10168 = -1.*t25*t1291;
  t10170 = t214*t9912;
  t10171 = t10168 + t10170;
  t10173 = -1.*t2527*t9138;
  t10175 = -1.*t2208*t10171;
  t10176 = t10173 + t10175;
  t10180 = t2208*t9138;
  t10181 = -1.*t2527*t10171;
  t10183 = t10180 + t10181;
  t10187 = t3446*t10176;
  t10188 = t3181*t10183;
  t10192 = t10187 + t10188;
  t10199 = t3181*t10176;
  t10200 = -1.*t3446*t10183;
  t10202 = t10199 + t10200;
  t10251 = -1.*t3181*t5863;
  t10252 = t10251 + t10035;
  t6370 = t4283*t6133;
  t10235 = -0.21*t3181;
  t10237 = -0.049*t3446;
  t10238 = t10235 + t10237;
  t10242 = 0.049*t3181;
  t10243 = t10242 + t3600;
  t10281 = t2527*t9515;
  t10284 = t2208*t10086;
  t10286 = t10281 + t10284;
  t10291 = -1.*t3446*t10286;
  t10294 = t10291 + t10109;
  t10297 = -1.*t3181*t10286;
  t10300 = t10297 + t10120;
  t10317 = t2527*t9138;
  t10324 = t2208*t10171;
  t10325 = t10317 + t10324;
  t10333 = -1.*t3446*t10325;
  t10335 = t10333 + t10188;
  t10338 = -1.*t3181*t10325;
  t10339 = t10338 + t10200;
  t10257 = -1.*t4493*t6133;
  t6383 = -1.*t4493*t6169;
  t6413 = t6370 + t6383;
  t10358 = 0.0016*t4283;
  t10359 = t10358 + t4638;
  t10364 = -0.2707*t4283;
  t10365 = -0.0016*t4493;
  t10368 = t10364 + t10365;
  t10303 = -1.*t4493*t10294;
  t10380 = t3181*t10286;
  t10381 = t3446*t10102;
  t10382 = t10380 + t10381;
  t10310 = t4283*t10294;
  t10343 = -1.*t4493*t10335;
  t10398 = t3181*t10325;
  t10401 = t3446*t10183;
  t10402 = t10398 + t10401;
  t10349 = t4283*t10335;

  p_output1(0)=1.;
  p_output1(1)=0;
  p_output1(2)=0;
  p_output1(3)=0;
  p_output1(4)=1.;
  p_output1(5)=0;
  p_output1(6)=0;
  p_output1(7)=0;
  p_output1(8)=1.;
  p_output1(9)=t1137*t1669 + t1881*t1934 + t2061*t2126 + t2571*t2662 + t2972*t3079 + t3628*t3791 + t3957*t4193 + t4538*t4614 + t4642*t4803 - 0.0016*(t4493*t4614 + t4283*t4803) - 0.2707*(t4283*t4614 - 1.*t4493*t4803) - 1.*t23*t297*t536 - 0.1305*(t2126*t25 + t214*t23*t536);
  p_output1(10)=t1432*t23*t297 + t1137*t5112 + t1881*t5439 + t2061*t5518 + t2571*t5554 - 0.1305*t5656 + t2972*t5731 + t3628*t5863 + t3957*t5946 + t4538*t6133 + t4642*t6169 - 0.0016*(t4493*t6133 + t4283*t6169) - 0.2707*t6413;
  p_output1(11)=0;
  p_output1(12)=t1137*t1182*t1432*t23 + t1432*t1497*t1881*t23 - 1.*t1291*t1432*t297 + t2061*t6593 - 0.1305*(t1291*t1432*t214 + t25*t6593) + t2571*t6874 + t2972*t6993 + t3628*t7058 + t3957*t7164 + t4538*t7226 + t4642*t7294 - 0.0016*(t4493*t7226 + t4283*t7294) - 0.2707*(t4283*t7226 - 1.*t4493*t7294);
  p_output1(13)=t1137*t1182*t23*t536 + t1497*t1881*t23*t536 - 1.*t1291*t297*t536 + t2061*t7494 - 0.1305*(t1291*t214*t536 + t25*t7494) + t2571*t7570 + t2972*t7696 + t3628*t7764 + t3957*t7806 + t4538*t7857 + t4642*t7938 - 0.0016*(t4493*t7857 + t4283*t7938) - 0.2707*(t4283*t7857 - 1.*t4493*t7938);
  p_output1(14)=-1.*t1137*t1182*t1291 - 1.*t1291*t1497*t1881 - 1.*t23*t297 + t2061*t8156 - 0.1305*(t214*t23 + t25*t8156) + t2571*t8182 + t2972*t8264 + t3628*t8296 + t3957*t8319 + t4538*t8354 + t4642*t8377 - 0.0016*(t4493*t8354 + t4283*t8377) - 0.2707*(t4283*t8354 - 1.*t4493*t8377);
  p_output1(15)=t1881*t5112 + t1137*t8449 + t2571*t8492 + t2061*t8527 - 0.1305*t25*t8527 + t214*t2972*t8527 + t3628*t8574 + t3957*t8595 + t4538*t8624 + t4642*t8650 - 0.0016*(t4493*t8624 + t4283*t8650) - 0.2707*(t4283*t8624 - 1.*t4493*t8650);
  p_output1(16)=t1137*t1934 + t1881*t8788 + t2571*t8813 + t2061*t8859 - 0.1305*t25*t8859 + t214*t2972*t8859 + t3628*t8903 + t3957*t8923 + t4538*t8941 + t4642*t8963 - 0.0016*(t4493*t8941 + t4283*t8963) - 0.2707*(t4283*t8941 - 1.*t4493*t8963);
  p_output1(17)=-1.*t1137*t1497*t23 + t1182*t1881*t23 + t9088 + t9144 + t9155 + t9160 + t9174 + t9193 + t9218 + t9231 + t9248 + t9268;
  p_output1(18)=0;
  p_output1(19)=0;
  p_output1(20)=0;
  p_output1(21)=0;
  p_output1(22)=0;
  p_output1(23)=0;
  p_output1(24)=0;
  p_output1(25)=0;
  p_output1(26)=0;
  p_output1(27)=0;
  p_output1(28)=0;
  p_output1(29)=0;
  p_output1(30)=0;
  p_output1(31)=0;
  p_output1(32)=0;
  p_output1(33)=0;
  p_output1(34)=0;
  p_output1(35)=0;
  p_output1(36)=0;
  p_output1(37)=0;
  p_output1(38)=0;
  p_output1(39)=0.135*t1742*t5112 - 0.135*t1015*t5439 + t2061*t5554 - 0.1305*t25*t5554 + t214*t2972*t5554 + t2571*t9298 + t3628*t9335 + t3957*t9364 + t4538*t9414 + t4642*t9431 - 0.0016*(t4493*t9414 + t4283*t9431) - 0.2707*(t4283*t9414 - 1.*t4493*t9431);
  p_output1(40)=0.135*t1742*t8788 - 0.135*t1015*t9501 + t2571*t9506 + t2061*t9515 - 0.1305*t25*t9515 + t214*t2972*t9515 + t3628*t9560 + t3957*t9567 + t4538*t9578 + t4642*t9613 - 0.0016*(t4493*t9578 + t4283*t9613) - 0.2707*(t4283*t9578 - 1.*t4493*t9613);
  p_output1(41)=-0.135*t1015*t1497*t23 + 0.135*t1182*t1742*t23 + t9088 + t9144 + t9155 + t9160 + t9174 + t9193 + t9218 + t9231 + t9248 + t9268;
  p_output1(42)=-0.1305*(-1.*t1432*t23*t25 - 1.*t214*t5518) + t2972*t5656 + t2208*t3628*t5656 - 1.*t2527*t3957*t5656 + t1432*t23*t9691 + t5518*t9709 + t4538*t9746 + t4642*t9756 - 0.0016*(t4493*t9746 + t4283*t9756) - 0.2707*(t4283*t9746 - 1.*t4493*t9756);
  p_output1(43)=t23*t536*t9691 + t9709*t9813 - 0.1305*(t2975 - 1.*t214*t9813) + t2972*t9825 + t2208*t3628*t9825 - 1.*t2527*t3957*t9825 + t4538*t9850 + t4642*t9864 - 0.0016*(t4493*t9850 + t4283*t9864) - 0.2707*(t4283*t9850 - 1.*t4493*t9864);
  p_output1(44)=-1.*t1291*t9691 + t9709*t9912 - 0.1305*(t1291*t25 - 1.*t214*t9912) + t2972*t9923 + t2208*t3628*t9923 - 1.*t2527*t3957*t9923 + t4538*t9946 + t4642*t9962 - 0.0016*(t4493*t9946 + t4283*t9962) - 0.2707*(t4283*t9946 - 1.*t4493*t9962);
  p_output1(45)=t10011*t3957 - 0.2707*(t10036*t4283 - 1.*t10026*t4493) - 0.0016*(t10026*t4283 + t10036*t4493) + t10036*t4538 + t10026*t4642 + t3628*t5946 + t5554*t9990 + t5731*t9999;
  p_output1(46)=t10102*t3628 + t10094*t3957 - 0.2707*(t10126*t4283 - 1.*t10111*t4493) - 0.0016*(t10111*t4283 + t10126*t4493) + t10126*t4538 + t10111*t4642 + t9515*t9990 + t10086*t9999;
  p_output1(47)=t10183*t3628 + t10176*t3957 - 0.2707*(t10202*t4283 - 1.*t10192*t4493) - 0.0016*(t10192*t4283 + t10202*t4493) + t10202*t4538 + t10192*t4642 + t9138*t9990 + t10171*t9999;
  p_output1(48)=-0.2707*(t10257 + t10252*t4283) + t10252*t4538 + t10238*t5863 + t10243*t5946 + t4642*t6133 - 0.0016*(t10252*t4493 + t6370);
  p_output1(49)=t10102*t10243 + t10238*t10286 - 0.2707*(t10303 + t10300*t4283) - 0.0016*(t10310 + t10300*t4493) + t10300*t4538 + t10294*t4642;
  p_output1(50)=t10183*t10243 + t10238*t10325 - 0.2707*(t10343 + t10339*t4283) - 0.0016*(t10349 + t10339*t4493) + t10339*t4538 + t10335*t4642;
  p_output1(51)=t10359*t6133 + t10368*t6169 - 0.2707*(t10257 - 1.*t4283*t6169) - 0.0016*t6413;
  p_output1(52)=t10294*t10359 + t10368*t10382 - 0.2707*(t10303 - 1.*t10382*t4283) - 0.0016*(t10310 - 1.*t10382*t4493);
  p_output1(53)=t10335*t10359 + t10368*t10402 - 0.2707*(t10343 - 1.*t10402*t4283) - 0.0016*(t10349 - 1.*t10402*t4493);
  p_output1(54)=0;
  p_output1(55)=0;
  p_output1(56)=0;
  p_output1(57)=0;
  p_output1(58)=0;
  p_output1(59)=0;
}


       
Eigen::Matrix<double,3,20> Jp_knee_to_shin_right(const Eigen::Matrix<double,20,1> &var1)
//void Jp_knee_to_shin_right(Eigen::Matrix<double,3,20> &p_output1, const Eigen::Matrix<double,20,1> &var1)
{
  /* Call Subroutines */
  Eigen::Matrix<double,3,20>  p_output1;
  
  output1(p_output1, var1);

  return p_output1;
}



