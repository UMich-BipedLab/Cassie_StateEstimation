/*
 * Automatically Generated from Mathematica.
 * Tue 8 Jan 2019 23:02:39 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jp_VectorNav_to_RightToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE static inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }


/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,14> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t66;
  double t200;
  double t298;
  double t474;
  double t503;
  double t639;
  double t670;
  double t764;
  double t1293;
  double t1351;
  double t1372;
  double t1416;
  double t1139;
  double t1144;
  double t1277;
  double t1526;
  double t1536;
  double t1562;
  double t2066;
  double t2081;
  double t2083;
  double t2108;
  double t1961;
  double t2016;
  double t2031;
  double t2243;
  double t2265;
  double t2269;
  double t2357;
  double t2395;
  double t2398;
  double t2404;
  double t2336;
  double t2347;
  double t2356;
  double t2447;
  double t2448;
  double t2454;
  double t2617;
  double t2620;
  double t2623;
  double t2630;
  double t2588;
  double t2602;
  double t2609;
  double t2720;
  double t2731;
  double t2736;
  double t218;
  double t254;
  double t272;
  double t318;
  double t332;
  double t668;
  double t717;
  double t757;
  double t802;
  double t1009;
  double t1054;
  double t1402;
  double t1446;
  double t1467;
  double t1774;
  double t1796;
  double t1819;
  double t2921;
  double t2932;
  double t2958;
  double t2969;
  double t2995;
  double t3026;
  double t2084;
  double t2109;
  double t2135;
  double t2282;
  double t2289;
  double t2318;
  double t3036;
  double t3041;
  double t3046;
  double t3062;
  double t3064;
  double t3076;
  double t2402;
  double t2405;
  double t2437;
  double t2477;
  double t2522;
  double t2557;
  double t3108;
  double t3127;
  double t3131;
  double t3141;
  double t3157;
  double t3163;
  double t2625;
  double t2633;
  double t2635;
  double t2740;
  double t2741;
  double t2759;
  double t3195;
  double t3202;
  double t3225;
  double t3236;
  double t3242;
  double t3246;
  double t3347;
  double t3362;
  double t3367;
  double t3383;
  double t3384;
  double t3386;
  double t3396;
  double t3398;
  double t3401;
  double t3434;
  double t3436;
  double t3453;
  double t3458;
  double t3471;
  double t3478;
  double t3481;
  double t3482;
  double t3488;
  double t3614;
  double t3635;
  double t3639;
  double t3658;
  double t3663;
  double t3670;
  double t3691;
  double t3702;
  double t3720;
  double t3730;
  double t3732;
  double t3737;
  double t3758;
  double t3759;
  double t3765;
  double t3786;
  double t3789;
  double t3798;
  double t3561;
  double t3562;
  double t3571;
  double t3938;
  double t3941;
  double t3943;
  double t3972;
  double t3973;
  double t3974;
  double t3982;
  double t3991;
  double t3997;
  double t4004;
  double t4027;
  double t4028;
  double t4034;
  double t4045;
  double t4046;
  double t4065;
  double t4066;
  double t4073;
  double t4201;
  double t4205;
  double t4213;
  double t4218;
  double t4220;
  double t4222;
  double t4235;
  double t4239;
  double t4240;
  double t4250;
  double t4257;
  double t4260;
  double t4277;
  double t4289;
  double t4294;
  double t4269;
  double t4273;
  double t4274;
  double t4161;
  double t4170;
  double t4174;
  double t4385;
  double t4387;
  double t4389;
  double t4393;
  double t4398;
  double t4407;
  double t4411;
  double t4431;
  double t4440;
  double t4451;
  double t4455;
  double t4466;
  double t4467;
  double t4486;
  double t4502;
  double t4517;
  double t4526;
  double t4494;
  double t4495;
  double t4497;
  double t4361;
  double t4371;
  double t4575;
  double t4583;
  double t4585;
  double t4593;
  double t4617;
  double t4618;
  double t4622;
  double t4632;
  double t4639;
  double t4640;
  double t4643;
  double t4652;
  double t4659;
  double t4662;
  double t4706;
  double t4712;
  double t4713;
  double t4685;
  double t4695;
  double t4696;
  double t4216;
  double t4226;
  double t4242;
  double t4268;
  double t4276;
  double t4297;
  double t4300;
  double t4303;
  double t4311;
  double t4316;
  double t4324;
  double t4328;
  double t4331;
  double t4353;
  double t4780;
  double t4786;
  double t4804;
  double t4805;
  double t4829;
  double t4873;
  double t4874;
  double t4888;
  double t4890;
  double t4893;
  double t4894;
  double t4901;
  double t4932;
  double t4940;
  double t4942;
  double t4917;
  double t4919;
  double t4926;
  double t5024;
  double t5038;
  double t5042;
  double t5052;
  double t5056;
  double t5062;
  double t5076;
  double t5081;
  double t5082;
  double t5083;
  double t5098;
  double t5102;
  double t5113;
  double t5164;
  double t5168;
  double t5170;
  double t5130;
  double t5153;
  double t5155;
  double t5242;
  double t5253;
  double t5262;
  double t5295;
  double t5297;
  double t5313;
  double t5314;
  double t5330;
  double t5334;
  double t5337;
  double t5321;
  double t5326;
  double t5327;
  double t5231;
  double t5237;
  double t5264;
  double t5274;
  double t5288;
  double t5438;
  double t5441;
  double t5472;
  double t5477;
  double t5485;
  double t5453;
  double t5459;
  double t5551;
  double t5556;
  double t5560;
  double t5570;
  double t5575;
  double t5578;
  double t5582;
  double t5605;
  double t5609;
  double t5615;
  double t5586;
  double t5587;
  double t5588;
  double t5698;
  double t5704;
  double t5705;
  double t5732;
  double t5734;
  double t5720;
  double t5724;
  double t5673;
  double t5690;
  double t5706;
  double t5709;
  double t5712;
  double t5767;
  double t5768;
  double t3293;
  double t5801;
  double t5804;
  double t5808;
  double t5840;
  double t5847;
  double t5818;
  double t5821;
  double t5898;
  double t5902;
  double t5904;
  double t5741;
  double t5751;
  double t5894;
  double t5895;
  double t5909;
  double t5911;
  double t5921;
  double t5782;
  double t3295;
  double t3300;
  double t5997;
  double t5999;
  double t6000;
  double t5867;
  double t5873;
  t66 = Sin(var1[7]);
  t200 = Cos(var1[8]);
  t298 = Sin(var1[8]);
  t474 = Cos(var1[9]);
  t503 = -1.*t474;
  t639 = 1. + t503;
  t670 = Sin(var1[9]);
  t764 = Cos(var1[7]);
  t1293 = Cos(var1[10]);
  t1351 = -1.*t1293;
  t1372 = 1. + t1351;
  t1416 = Sin(var1[10]);
  t1139 = -1.*t474*t66*t298;
  t1144 = -1.*t764*t670;
  t1277 = t1139 + t1144;
  t1526 = -1.*t764*t474;
  t1536 = t66*t298*t670;
  t1562 = t1526 + t1536;
  t2066 = Cos(var1[11]);
  t2081 = -1.*t2066;
  t2083 = 1. + t2081;
  t2108 = Sin(var1[11]);
  t1961 = t1293*t1277;
  t2016 = t1562*t1416;
  t2031 = t1961 + t2016;
  t2243 = t1293*t1562;
  t2265 = -1.*t1277*t1416;
  t2269 = t2243 + t2265;
  t2357 = Cos(var1[12]);
  t2395 = -1.*t2357;
  t2398 = 1. + t2395;
  t2404 = Sin(var1[12]);
  t2336 = t2066*t2031;
  t2347 = t2269*t2108;
  t2356 = t2336 + t2347;
  t2447 = t2066*t2269;
  t2448 = -1.*t2031*t2108;
  t2454 = t2447 + t2448;
  t2617 = Cos(var1[13]);
  t2620 = -1.*t2617;
  t2623 = 1. + t2620;
  t2630 = Sin(var1[13]);
  t2588 = t2357*t2356;
  t2602 = t2454*t2404;
  t2609 = t2588 + t2602;
  t2720 = t2357*t2454;
  t2731 = -1.*t2356*t2404;
  t2736 = t2720 + t2731;
  t218 = -1.*t200;
  t254 = 1. + t218;
  t272 = -0.135*t254;
  t318 = 0.049*t298;
  t332 = 0. + t272 + t318;
  t668 = -0.049*t639;
  t717 = -0.09*t670;
  t757 = 0. + t668 + t717;
  t802 = -0.09*t639;
  t1009 = 0.049*t670;
  t1054 = 0. + t802 + t1009;
  t1402 = -0.049*t1372;
  t1446 = -0.21*t1416;
  t1467 = 0. + t1402 + t1446;
  t1774 = -0.21*t1372;
  t1796 = 0.049*t1416;
  t1819 = 0. + t1774 + t1796;
  t2921 = t764*t474*t298;
  t2932 = -1.*t66*t670;
  t2958 = t2921 + t2932;
  t2969 = -1.*t474*t66;
  t2995 = -1.*t764*t298*t670;
  t3026 = t2969 + t2995;
  t2084 = -0.0016*t2083;
  t2109 = -0.2707*t2108;
  t2135 = 0. + t2084 + t2109;
  t2282 = -0.2707*t2083;
  t2289 = 0.0016*t2108;
  t2318 = 0. + t2282 + t2289;
  t3036 = t1293*t2958;
  t3041 = t3026*t1416;
  t3046 = t3036 + t3041;
  t3062 = t1293*t3026;
  t3064 = -1.*t2958*t1416;
  t3076 = t3062 + t3064;
  t2402 = 0.0184*t2398;
  t2405 = -0.7055*t2404;
  t2437 = 0. + t2402 + t2405;
  t2477 = -0.7055*t2398;
  t2522 = -0.0184*t2404;
  t2557 = 0. + t2477 + t2522;
  t3108 = t2066*t3046;
  t3127 = t3076*t2108;
  t3131 = t3108 + t3127;
  t3141 = t2066*t3076;
  t3157 = -1.*t3046*t2108;
  t3163 = t3141 + t3157;
  t2625 = -0.0216*t2623;
  t2633 = -1.1135*t2630;
  t2635 = 0. + t2625 + t2633;
  t2740 = -1.1135*t2623;
  t2741 = 0.0216*t2630;
  t2759 = 0. + t2740 + t2741;
  t3195 = t2357*t3131;
  t3202 = t3163*t2404;
  t3225 = t3195 + t3202;
  t3236 = t2357*t3163;
  t3242 = -1.*t3131*t2404;
  t3246 = t3236 + t3242;
  t3347 = -1.*t474*t1293*t298;
  t3362 = t298*t670*t1416;
  t3367 = t3347 + t3362;
  t3383 = t1293*t298*t670;
  t3384 = t474*t298*t1416;
  t3386 = t3383 + t3384;
  t3396 = t2066*t3367;
  t3398 = t3386*t2108;
  t3401 = t3396 + t3398;
  t3434 = t2066*t3386;
  t3436 = -1.*t3367*t2108;
  t3453 = t3434 + t3436;
  t3458 = t2357*t3401;
  t3471 = t3453*t2404;
  t3478 = t3458 + t3471;
  t3481 = t2357*t3453;
  t3482 = -1.*t3401*t2404;
  t3488 = t3481 + t3482;
  t3614 = t764*t200*t474*t1293;
  t3635 = -1.*t764*t200*t670*t1416;
  t3639 = t3614 + t3635;
  t3658 = -1.*t764*t200*t1293*t670;
  t3663 = -1.*t764*t200*t474*t1416;
  t3670 = t3658 + t3663;
  t3691 = t2066*t3639;
  t3702 = t3670*t2108;
  t3720 = t3691 + t3702;
  t3730 = t2066*t3670;
  t3732 = -1.*t3639*t2108;
  t3737 = t3730 + t3732;
  t3758 = t2357*t3720;
  t3759 = t3737*t2404;
  t3765 = t3758 + t3759;
  t3786 = t2357*t3737;
  t3789 = -1.*t3720*t2404;
  t3798 = t3786 + t3789;
  t3561 = 0.049*t200;
  t3562 = -0.135*t298;
  t3571 = t3561 + t3562;
  t3938 = t200*t474*t1293*t66;
  t3941 = -1.*t200*t66*t670*t1416;
  t3943 = t3938 + t3941;
  t3972 = -1.*t200*t1293*t66*t670;
  t3973 = -1.*t200*t474*t66*t1416;
  t3974 = t3972 + t3973;
  t3982 = t2066*t3943;
  t3991 = t3974*t2108;
  t3997 = t3982 + t3991;
  t4004 = t2066*t3974;
  t4027 = -1.*t3943*t2108;
  t4028 = t4004 + t4027;
  t4034 = t2357*t3997;
  t4045 = t4028*t2404;
  t4046 = t4034 + t4045;
  t4065 = t2357*t4028;
  t4066 = -1.*t3997*t2404;
  t4073 = t4065 + t4066;
  t4201 = -1.*t200*t1293*t670;
  t4205 = -1.*t200*t474*t1416;
  t4213 = t4201 + t4205;
  t4218 = -1.*t200*t474*t1293;
  t4220 = t200*t670*t1416;
  t4222 = t4218 + t4220;
  t4235 = t2066*t4213;
  t4239 = t4222*t2108;
  t4240 = t4235 + t4239;
  t4250 = t2066*t4222;
  t4257 = -1.*t4213*t2108;
  t4260 = t4250 + t4257;
  t4277 = t2357*t4260;
  t4289 = -1.*t4240*t2404;
  t4294 = t4277 + t4289;
  t4269 = t2357*t4240;
  t4273 = t4260*t2404;
  t4274 = t4269 + t4273;
  t4161 = -0.09*t474;
  t4170 = -0.049*t670;
  t4174 = t4161 + t4170;
  t4385 = -1.*t764*t474*t298;
  t4387 = t66*t670;
  t4389 = t4385 + t4387;
  t4393 = t4389*t1416;
  t4398 = t3062 + t4393;
  t4407 = t1293*t4389;
  t4411 = -1.*t3026*t1416;
  t4431 = t4407 + t4411;
  t4440 = t2066*t4398;
  t4451 = t4431*t2108;
  t4455 = t4440 + t4451;
  t4466 = t2066*t4431;
  t4467 = -1.*t4398*t2108;
  t4486 = t4466 + t4467;
  t4502 = t2357*t4486;
  t4517 = -1.*t4455*t2404;
  t4526 = t4502 + t4517;
  t4494 = t2357*t4455;
  t4495 = t4486*t2404;
  t4497 = t4494 + t4495;
  t4361 = 0.049*t474;
  t4371 = t4361 + t717;
  t4575 = t764*t474;
  t4583 = -1.*t66*t298*t670;
  t4585 = t4575 + t4583;
  t4593 = t1293*t4585;
  t4617 = t1277*t1416;
  t4618 = t4593 + t4617;
  t4622 = -1.*t4585*t1416;
  t4632 = t1961 + t4622;
  t4639 = t2066*t4618;
  t4640 = t4632*t2108;
  t4643 = t4639 + t4640;
  t4652 = t2066*t4632;
  t4659 = -1.*t4618*t2108;
  t4662 = t4652 + t4659;
  t4706 = t2357*t4662;
  t4712 = -1.*t4643*t2404;
  t4713 = t4706 + t4712;
  t4685 = t2357*t4643;
  t4695 = t4662*t2404;
  t4696 = t4685 + t4695;
  t4216 = t4213*t2135;
  t4226 = t4222*t2318;
  t4242 = t4240*t2437;
  t4268 = t4260*t2557;
  t4276 = t4274*t2635;
  t4297 = t4294*t2759;
  t4300 = t2617*t4294;
  t4303 = -1.*t4274*t2630;
  t4311 = t4300 + t4303;
  t4316 = -1.1312*t4311;
  t4324 = t2617*t4274;
  t4328 = t4294*t2630;
  t4331 = t4324 + t4328;
  t4353 = 0.0306*t4331;
  t4780 = 0.049*t1293;
  t4786 = t4780 + t1446;
  t4804 = -0.21*t1293;
  t4805 = -0.049*t1416;
  t4829 = t4804 + t4805;
  t4873 = -1.*t1293*t2958;
  t4874 = t4873 + t4411;
  t4888 = t4874*t2108;
  t4890 = t3141 + t4888;
  t4893 = t2066*t4874;
  t4894 = -1.*t3076*t2108;
  t4901 = t4893 + t4894;
  t4932 = t2357*t4901;
  t4940 = -1.*t4890*t2404;
  t4942 = t4932 + t4940;
  t4917 = t2357*t4890;
  t4919 = t4901*t2404;
  t4926 = t4917 + t4919;
  t5024 = t474*t66*t298;
  t5038 = t764*t670;
  t5042 = t5024 + t5038;
  t5052 = -1.*t5042*t1416;
  t5056 = t4593 + t5052;
  t5062 = -1.*t1293*t5042;
  t5076 = t5062 + t4622;
  t5081 = t2066*t5056;
  t5082 = t5076*t2108;
  t5083 = t5081 + t5082;
  t5098 = t2066*t5076;
  t5102 = -1.*t5056*t2108;
  t5113 = t5098 + t5102;
  t5164 = t2357*t5113;
  t5168 = -1.*t5083*t2404;
  t5170 = t5164 + t5168;
  t5130 = t2357*t5083;
  t5153 = t5113*t2404;
  t5155 = t5130 + t5153;
  t5242 = t200*t474*t1293;
  t5253 = -1.*t200*t670*t1416;
  t5262 = t5242 + t5253;
  t5295 = -1.*t5262*t2108;
  t5297 = t4235 + t5295;
  t5313 = -1.*t2066*t5262;
  t5314 = t5313 + t4257;
  t5330 = t2357*t5314;
  t5334 = -1.*t5297*t2404;
  t5337 = t5330 + t5334;
  t5321 = t2357*t5297;
  t5326 = t5314*t2404;
  t5327 = t5321 + t5326;
  t5231 = 0.0016*t2066;
  t5237 = t5231 + t2109;
  t5264 = -0.2707*t2066;
  t5274 = -0.0016*t2108;
  t5288 = t5264 + t5274;
  t5438 = -1.*t2066*t3046;
  t5441 = t5438 + t4894;
  t5472 = t2357*t5441;
  t5477 = -1.*t3163*t2404;
  t5485 = t5472 + t5477;
  t5453 = t5441*t2404;
  t5459 = t3236 + t5453;
  t5551 = t1293*t5042;
  t5556 = t4585*t1416;
  t5560 = t5551 + t5556;
  t5570 = -1.*t5560*t2108;
  t5575 = t5081 + t5570;
  t5578 = -1.*t2066*t5560;
  t5582 = t5578 + t5102;
  t5605 = t2357*t5582;
  t5609 = -1.*t5575*t2404;
  t5615 = t5605 + t5609;
  t5586 = t2357*t5575;
  t5587 = t5582*t2404;
  t5588 = t5586 + t5587;
  t5698 = t2066*t5262;
  t5704 = t4213*t2108;
  t5705 = t5698 + t5704;
  t5732 = -1.*t2357*t5705;
  t5734 = t5732 + t5334;
  t5720 = -1.*t5705*t2404;
  t5724 = t5321 + t5720;
  t5673 = -0.0184*t2357;
  t5690 = t5673 + t2405;
  t5706 = -0.7055*t2357;
  t5709 = 0.0184*t2404;
  t5712 = t5706 + t5709;
  t5767 = -1.*t2357*t3131;
  t5768 = t5767 + t5477;
  t3293 = t2617*t3246;
  t5801 = t2066*t5560;
  t5804 = t5056*t2108;
  t5808 = t5801 + t5804;
  t5840 = -1.*t2357*t5808;
  t5847 = t5840 + t5609;
  t5818 = -1.*t5808*t2404;
  t5821 = t5586 + t5818;
  t5898 = t2357*t5705;
  t5902 = t5297*t2404;
  t5904 = t5898 + t5902;
  t5741 = -1.*t5724*t2630;
  t5751 = t2617*t5724;
  t5894 = 0.0216*t2617;
  t5895 = t5894 + t2633;
  t5909 = -1.1135*t2617;
  t5911 = -0.0216*t2630;
  t5921 = t5909 + t5911;
  t5782 = -1.*t3246*t2630;
  t3295 = -1.*t3225*t2630;
  t3300 = t3293 + t3295;
  t5997 = t2357*t5808;
  t5999 = t5575*t2404;
  t6000 = t5997 + t5999;
  t5867 = -1.*t5821*t2630;
  t5873 = t2617*t5821;

  p_output1(0)=0;
  p_output1(1)=0;
  p_output1(2)=0;
  p_output1(3)=0;
  p_output1(4)=0;
  p_output1(5)=0;
  p_output1(6)=0;
  p_output1(7)=0;
  p_output1(8)=0;
  p_output1(9)=0;
  p_output1(10)=0;
  p_output1(11)=0;
  p_output1(12)=0;
  p_output1(13)=0;
  p_output1(14)=0;
  p_output1(15)=0;
  p_output1(16)=0;
  p_output1(17)=0;
  p_output1(18)=0;
  p_output1(19)=0;
  p_output1(20)=0;
  p_output1(21)=0;
  p_output1(22)=t1277*t1467 + t1562*t1819 + t2031*t2135 + t2269*t2318 + t2356*t2437 + t2454*t2557 + t2609*t2635 - 1.1312*(-1.*t2609*t2630 + t2617*t2736) + 0.0306*(t2609*t2617 + t2630*t2736) + t2736*t2759 - 0.135*t66 + 0.1305*t200*t66 - 1.*t332*t66 - 1.*t298*t66*t757 - 1.*t1054*t764;
  p_output1(23)=t1467*t2958 + t1819*t3026 + t2135*t3046 + t2318*t3076 + t2437*t3131 + t2557*t3163 + t2635*t3225 + t2759*t3246 + 0.0306*(t2617*t3225 + t2630*t3246) - 1.1312*t3300 - 1.*t1054*t66 + 0.135*t764 - 0.1305*t200*t764 + t332*t764 + t298*t757*t764;
  p_output1(24)=-0.004500000000000004*t200 - 0.049*t298 + t2135*t3367 + t2318*t3386 + t2437*t3401 + t2557*t3453 + t2635*t3478 + t2759*t3488 - 1.1312*(-1.*t2630*t3478 + t2617*t3488) + 0.0306*(t2617*t3478 + t2630*t3488) - 1.*t1467*t298*t474 + t1819*t298*t670 - 1.*t298*t757;
  p_output1(25)=t2135*t3639 + t2318*t3670 + t2437*t3720 + t2557*t3737 + t2635*t3765 + t2759*t3798 - 1.1312*(-1.*t2630*t3765 + t2617*t3798) + 0.0306*(t2617*t3765 + t2630*t3798) + 0.1305*t298*t764 + t3571*t764 + t1467*t200*t474*t764 - 1.*t1819*t200*t670*t764 + t200*t757*t764;
  p_output1(26)=t2135*t3943 + t2318*t3974 + t2437*t3997 + t2557*t4028 + t2635*t4046 + t2759*t4073 - 1.1312*(-1.*t2630*t4046 + t2617*t4073) + 0.0306*(t2617*t4046 + t2630*t4073) + 0.1305*t298*t66 + t3571*t66 + t1467*t200*t474*t66 - 1.*t1819*t200*t66*t670 + t200*t66*t757;
  p_output1(27)=t200*t4174 + t4216 + t4226 + t4242 + t4268 + t4276 + t4297 + t4316 + t4353 - 1.*t1819*t200*t474 - 1.*t1467*t200*t670;
  p_output1(28)=t1467*t3026 + t1819*t4389 + t2135*t4398 + t2318*t4431 + t2437*t4455 + t2557*t4486 + t2635*t4497 + t2759*t4526 - 1.1312*(-1.*t2630*t4497 + t2617*t4526) + 0.0306*(t2617*t4497 + t2630*t4526) - 1.*t4371*t66 + t298*t4174*t764;
  p_output1(29)=t1277*t1819 + t1467*t4585 + t2135*t4618 + t2318*t4632 + t2437*t4643 + t2557*t4662 + t2635*t4696 + t2759*t4713 - 1.1312*(-1.*t2630*t4696 + t2617*t4713) + 0.0306*(t2617*t4696 + t2630*t4713) + t298*t4174*t66 + t4371*t764;
  p_output1(30)=t4216 + t4226 + t4242 + t4268 + t4276 + t4297 + t4316 + t4353 + t200*t474*t4829 - 1.*t200*t4786*t670;
  p_output1(31)=t2135*t3076 + t3026*t4786 + t2958*t4829 + t2318*t4874 + t2437*t4890 + t2557*t4901 + t2635*t4926 + t2759*t4942 - 1.1312*(-1.*t2630*t4926 + t2617*t4942) + 0.0306*(t2617*t4926 + t2630*t4942);
  p_output1(32)=t4585*t4786 + t4829*t5042 + t2135*t5056 + t2318*t5076 + t2437*t5083 + t2557*t5113 + t2635*t5155 + t2759*t5170 - 1.1312*(-1.*t2630*t5155 + t2617*t5170) + 0.0306*(t2617*t5155 + t2630*t5170);
  p_output1(33)=t4213*t5237 + t5262*t5288 + t2437*t5297 + t2557*t5314 + t2635*t5327 + t2759*t5337 - 1.1312*(-1.*t2630*t5327 + t2617*t5337) + 0.0306*(t2617*t5327 + t2630*t5337);
  p_output1(34)=t2437*t3163 + t3076*t5237 + t3046*t5288 + t2557*t5441 + t2635*t5459 + t2759*t5485 - 1.1312*(-1.*t2630*t5459 + t2617*t5485) + 0.0306*(t2617*t5459 + t2630*t5485);
  p_output1(35)=t5056*t5237 + t5288*t5560 + t2437*t5575 + t2557*t5582 + t2635*t5588 + t2759*t5615 - 1.1312*(-1.*t2630*t5588 + t2617*t5615) + 0.0306*(t2617*t5588 + t2630*t5615);
  p_output1(36)=t5297*t5690 + t5705*t5712 + t2635*t5724 + t2759*t5734 - 1.1312*(t2617*t5734 + t5741) + 0.0306*(t2630*t5734 + t5751);
  p_output1(37)=t2635*t3246 + t3163*t5690 + t3131*t5712 + t2759*t5768 + 0.0306*(t3293 + t2630*t5768) - 1.1312*(t2617*t5768 + t5782);
  p_output1(38)=t5575*t5690 + t5712*t5808 + t2635*t5821 + t2759*t5847 - 1.1312*(t2617*t5847 + t5867) + 0.0306*(t2630*t5847 + t5873);
  p_output1(39)=t5724*t5895 - 1.1312*(t5741 - 1.*t2617*t5904) + 0.0306*(t5751 - 1.*t2630*t5904) + t5904*t5921;
  p_output1(40)=0.0306*t3300 - 1.1312*(-1.*t2617*t3225 + t5782) + t3246*t5895 + t3225*t5921;
  p_output1(41)=t5821*t5895 + t5921*t6000 - 1.1312*(t5867 - 1.*t2617*t6000) + 0.0306*(t5873 - 1.*t2630*t6000);
}


       
Eigen::Matrix<double,3,14> Jp_VectorNav_to_RightToeBottom(const Eigen::Matrix<double,14,1> &var1)
{
  /* Call Subroutines */
  Eigen::Matrix<double,3,14>  p_output1;
  
  output1(p_output1, var1);

  return p_output1;
}



