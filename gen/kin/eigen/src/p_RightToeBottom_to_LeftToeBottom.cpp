/*
 * Automatically Generated from Mathematica.
 * Tue 8 Jan 2019 23:02:45 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "p_RightToeBottom_to_LeftToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE static inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }


/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,1> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t659;
  double t493;
  double t581;
  double t601;
  double t676;
  double t464;
  double t713;
  double t751;
  double t800;
  double t644;
  double t679;
  double t708;
  double t813;
  double t424;
  double t923;
  double t990;
  double t1051;
  double t711;
  double t820;
  double t918;
  double t1083;
  double t342;
  double t1240;
  double t1311;
  double t1364;
  double t921;
  double t1084;
  double t1121;
  double t1422;
  double t291;
  double t1555;
  double t1583;
  double t1598;
  double t1135;
  double t1524;
  double t1525;
  double t1602;
  double t1913;
  double t2028;
  double t2057;
  double t2118;
  double t1946;
  double t1947;
  double t1949;
  double t2295;
  double t2324;
  double t2381;
  double t1997;
  double t2229;
  double t2261;
  double t2516;
  double t2534;
  double t2685;
  double t2291;
  double t2394;
  double t2407;
  double t3149;
  double t3212;
  double t3231;
  double t3008;
  double t3037;
  double t3130;
  double t3452;
  double t3455;
  double t3468;
  double t3138;
  double t3262;
  double t3322;
  double t3623;
  double t3665;
  double t3698;
  double t3427;
  double t3493;
  double t3494;
  double t3809;
  double t3815;
  double t3835;
  double t3542;
  double t3712;
  double t3715;
  double t1552;
  double t1621;
  double t1634;
  double t1769;
  double t1820;
  double t1877;
  double t2459;
  double t2694;
  double t2734;
  double t2808;
  double t2840;
  double t2859;
  double t3754;
  double t3861;
  double t3864;
  double t3870;
  double t3900;
  double t3905;
  double t4118;
  double t4131;
  double t4173;
  double t3868;
  double t3918;
  double t3937;
  double t2765;
  double t2884;
  double t2931;
  double t4241;
  double t4281;
  double t4323;
  double t1713;
  double t1891;
  double t1903;
  double t5108;
  double t5134;
  double t5448;
  double t5472;
  double t5646;
  double t5687;
  double t5925;
  double t5937;
  double t6043;
  double t6052;
  double t4906;
  double t4911;
  double t5157;
  double t5194;
  double t5202;
  double t5479;
  double t5498;
  double t5547;
  double t5633;
  double t5634;
  double t5636;
  double t5701;
  double t5722;
  double t5731;
  double t5753;
  double t5757;
  double t5802;
  double t5939;
  double t5953;
  double t5959;
  double t5977;
  double t5988;
  double t5996;
  double t6057;
  double t6071;
  double t6083;
  double t6093;
  double t6139;
  double t6140;
  double t4052;
  double t4060;
  double t4078;
  double t4655;
  double t4725;
  double t4741;
  double t4764;
  double t4946;
  double t4978;
  double t4979;
  double t5096;
  double t5206;
  double t5220;
  double t5243;
  double t5256;
  double t5435;
  double t5556;
  double t5643;
  double t5749;
  double t5880;
  double t5974;
  double t6007;
  double t6088;
  double t6141;
  double t6147;
  double t6148;
  double t6150;
  double t6192;
  double t6204;
  double t6212;
  double t6214;
  double t6215;
  double t6221;
  double t6229;
  double t6232;
  double t6233;
  double t6240;
  double t6253;
  double t6254;
  double t6264;
  double t6266;
  double t4436;
  double t4469;
  double t4488;
  double t3002;
  double t3950;
  double t4024;
  double t4038;
  double t4208;
  double t4345;
  double t4379;
  double t4396;
  double t4548;
  double t4606;
  double t4642;
  double t6469;
  double t6493;
  double t6494;
  double t6512;
  double t6521;
  double t6530;
  double t6597;
  double t6655;
  double t6673;
  double t6699;
  double t6703;
  double t6711;
  double t6720;
  double t6734;
  double t6763;
  double t6774;
  double t6782;
  double t6796;
  double t6797;
  double t6798;
  double t6802;
  double t6808;
  double t6816;
  double t6819;
  double t6832;
  double t6844;
  double t6847;
  double t6857;
  double t6859;
  double t6864;
  double t6866;
  double t6888;
  double t6891;
  double t6893;
  double t6900;
  double t6901;
  double t6907;
  double t6959;
  double t6476;
  double t6480;
  double t6556;
  double t6566;
  double t6567;
  double t6573;
  double t6600;
  double t6601;
  double t6525;
  double t6535;
  double t6542;
  double t6987;
  double t6634;
  double t6640;
  double t6643;
  double t6702;
  double t6705;
  double t6706;
  double t6999;
  double t7000;
  double t7001;
  double t7011;
  double t7018;
  double t7023;
  double t6737;
  double t6742;
  double t6751;
  double t6799;
  double t6804;
  double t6805;
  double t7026;
  double t7028;
  double t7031;
  double t7036;
  double t7037;
  double t7040;
  double t6825;
  double t6828;
  double t6831;
  double t6865;
  double t6881;
  double t6886;
  double t7045;
  double t7046;
  double t7047;
  double t7056;
  double t7057;
  double t7060;
  double t6896;
  double t6897;
  double t6899;
  double t7069;
  double t7070;
  double t7075;
  double t7077;
  double t7084;
  double t7085;
  double t6980;
  double t6983;
  double t6984;
  double t6990;
  double t6992;
  double t6994;
  double t7131;
  double t7132;
  double t7133;
  double t7136;
  double t7139;
  double t7144;
  double t7148;
  double t7150;
  double t7151;
  double t7154;
  double t7155;
  double t7156;
  double t7159;
  double t7161;
  double t7163;
  double t7165;
  double t7168;
  double t7170;
  double t7183;
  double t7188;
  double t7189;
  double t7194;
  double t7199;
  double t7201;
  double t6312;
  double t6327;
  double t6328;
  double t6333;
  double t6356;
  double t6368;
  double t6374;
  double t6379;
  double t6380;
  double t6399;
  double t6401;
  double t6404;
  double t6406;
  double t6408;
  double t6412;
  double t6416;
  double t6188;
  double t6267;
  double t6269;
  double t6488;
  double t6552;
  double t6564;
  double t6630;
  double t6650;
  double t6736;
  double t6791;
  double t6821;
  double t6848;
  double t6895;
  double t6914;
  double t6920;
  double t6925;
  double t6927;
  double t6928;
  double t6931;
  double t6932;
  double t6934;
  double t6944;
  double t6946;
  double t6961;
  double t6963;
  double t6971;
  double t6973;
  double t6985;
  double t6986;
  double t6998;
  double t7002;
  double t7025;
  double t7033;
  double t7042;
  double t7049;
  double t7061;
  double t7076;
  double t7088;
  double t7089;
  double t7093;
  double t7097;
  double t7100;
  double t7101;
  double t7103;
  double t7104;
  double t7105;
  double t7106;
  double t7117;
  double t7119;
  double t7120;
  double t7122;
  double t7128;
  double t7134;
  double t7146;
  double t7152;
  double t7157;
  double t7164;
  double t7174;
  double t7190;
  double t7203;
  double t7206;
  double t7208;
  double t7211;
  double t7213;
  double t7215;
  double t7216;
  double t7220;
  double t7224;
  double t7231;
  double t7238;
  double t7243;
  double t7244;
  double t6293;
  double t6294;
  double t6298;
  t659 = Cos(var1[7]);
  t493 = Cos(var1[9]);
  t581 = Sin(var1[7]);
  t601 = Sin(var1[8]);
  t676 = Sin(var1[9]);
  t464 = Cos(var1[10]);
  t713 = t659*t493;
  t751 = -1.*t581*t601*t676;
  t800 = t713 + t751;
  t644 = t493*t581*t601;
  t679 = t659*t676;
  t708 = t644 + t679;
  t813 = Sin(var1[10]);
  t424 = Cos(var1[11]);
  t923 = t464*t800;
  t990 = -1.*t708*t813;
  t1051 = t923 + t990;
  t711 = t464*t708;
  t820 = t800*t813;
  t918 = t711 + t820;
  t1083 = Sin(var1[11]);
  t342 = Cos(var1[12]);
  t1240 = t424*t1051;
  t1311 = -1.*t918*t1083;
  t1364 = t1240 + t1311;
  t921 = t424*t918;
  t1084 = t1051*t1083;
  t1121 = t921 + t1084;
  t1422 = Sin(var1[12]);
  t291 = Cos(var1[13]);
  t1555 = t342*t1364;
  t1583 = -1.*t1121*t1422;
  t1598 = t1555 + t1583;
  t1135 = t342*t1121;
  t1524 = t1364*t1422;
  t1525 = t1135 + t1524;
  t1602 = Sin(var1[13]);
  t1913 = Cos(var1[8]);
  t2028 = -1.*t1913*t464*t676;
  t2057 = -1.*t1913*t493*t813;
  t2118 = t2028 + t2057;
  t1946 = t1913*t493*t464;
  t1947 = -1.*t1913*t676*t813;
  t1949 = t1946 + t1947;
  t2295 = t424*t2118;
  t2324 = -1.*t1949*t1083;
  t2381 = t2295 + t2324;
  t1997 = t424*t1949;
  t2229 = t2118*t1083;
  t2261 = t1997 + t2229;
  t2516 = t342*t2381;
  t2534 = -1.*t2261*t1422;
  t2685 = t2516 + t2534;
  t2291 = t342*t2261;
  t2394 = t2381*t1422;
  t2407 = t2291 + t2394;
  t3149 = -1.*t493*t581;
  t3212 = -1.*t659*t601*t676;
  t3231 = t3149 + t3212;
  t3008 = t659*t493*t601;
  t3037 = -1.*t581*t676;
  t3130 = t3008 + t3037;
  t3452 = t464*t3231;
  t3455 = -1.*t3130*t813;
  t3468 = t3452 + t3455;
  t3138 = t464*t3130;
  t3262 = t3231*t813;
  t3322 = t3138 + t3262;
  t3623 = t424*t3468;
  t3665 = -1.*t3322*t1083;
  t3698 = t3623 + t3665;
  t3427 = t424*t3322;
  t3493 = t3468*t1083;
  t3494 = t3427 + t3493;
  t3809 = t342*t3698;
  t3815 = -1.*t3494*t1422;
  t3835 = t3809 + t3815;
  t3542 = t342*t3494;
  t3712 = t3698*t1422;
  t3715 = t3542 + t3712;
  t1552 = t291*t1525;
  t1621 = t1598*t1602;
  t1634 = t1552 + t1621;
  t1769 = t291*t1598;
  t1820 = -1.*t1525*t1602;
  t1877 = t1769 + t1820;
  t2459 = t291*t2407;
  t2694 = t2685*t1602;
  t2734 = t2459 + t2694;
  t2808 = t291*t2685;
  t2840 = -1.*t2407*t1602;
  t2859 = t2808 + t2840;
  t3754 = t291*t3715;
  t3861 = t3835*t1602;
  t3864 = t3754 + t3861;
  t3870 = t291*t3835;
  t3900 = -1.*t3715*t1602;
  t3905 = t3870 + t3900;
  t4118 = 0.642788*t2734;
  t4131 = 0.766044*t2859;
  t4173 = t4118 + t4131;
  t3868 = -0.766044*t3864;
  t3918 = 0.642788*t3905;
  t3937 = t3868 + t3918;
  t2765 = -0.766044*t2734;
  t2884 = 0.642788*t2859;
  t2931 = t2765 + t2884;
  t4241 = 0.642788*t3864;
  t4281 = 0.766044*t3905;
  t4323 = t4241 + t4281;
  t1713 = 0.642788*t1634;
  t1891 = 0.766044*t1877;
  t1903 = t1713 + t1891;
  t5108 = -1.*t493;
  t5134 = 1. + t5108;
  t5448 = -1.*t464;
  t5472 = 1. + t5448;
  t5646 = -1.*t424;
  t5687 = 1. + t5646;
  t5925 = -1.*t342;
  t5937 = 1. + t5925;
  t6043 = -1.*t291;
  t6052 = 1. + t6043;
  t4906 = -1.*t1913;
  t4911 = 1. + t4906;
  t5157 = -0.049*t5134;
  t5194 = -0.09*t676;
  t5202 = 0. + t5157 + t5194;
  t5479 = -0.049*t5472;
  t5498 = -0.21*t813;
  t5547 = 0. + t5479 + t5498;
  t5633 = -0.21*t5472;
  t5634 = 0.049*t813;
  t5636 = 0. + t5633 + t5634;
  t5701 = -0.0016*t5687;
  t5722 = -0.2707*t1083;
  t5731 = 0. + t5701 + t5722;
  t5753 = -0.2707*t5687;
  t5757 = 0.0016*t1083;
  t5802 = 0. + t5753 + t5757;
  t5939 = 0.0184*t5937;
  t5953 = -0.7055*t1422;
  t5959 = 0. + t5939 + t5953;
  t5977 = -0.7055*t5937;
  t5988 = -0.0184*t1422;
  t5996 = 0. + t5977 + t5988;
  t6057 = -0.0216*t6052;
  t6071 = -1.1135*t1602;
  t6083 = 0. + t6057 + t6071;
  t6093 = -1.1135*t6052;
  t6139 = 0.0216*t1602;
  t6140 = 0. + t6093 + t6139;
  t4052 = -0.766044*t1634;
  t4060 = 0.642788*t1877;
  t4078 = t4052 + t4060;
  t4655 = -1.*t659;
  t4725 = 1. + t4655;
  t4741 = -0.135*t4725;
  t4764 = -0.1305*t659*t1913;
  t4946 = -0.135*t4911;
  t4978 = 0.049*t601;
  t4979 = 0. + t4946 + t4978;
  t5096 = t659*t4979;
  t5206 = t659*t601*t5202;
  t5220 = -0.09*t5134;
  t5243 = 0.049*t676;
  t5256 = 0. + t5220 + t5243;
  t5435 = -1.*t581*t5256;
  t5556 = t3130*t5547;
  t5643 = t3231*t5636;
  t5749 = t3322*t5731;
  t5880 = t3468*t5802;
  t5974 = t3494*t5959;
  t6007 = t3698*t5996;
  t6088 = t3715*t6083;
  t6141 = t3835*t6140;
  t6147 = 0.0306*t3864;
  t6148 = -1.1312*t3905;
  t6150 = 0. + t4741 + t4764 + t5096 + t5206 + t5435 + t5556 + t5643 + t5749 + t5880 + t5974 + t6007 + t6088 + t6141 + t6147 + t6148;
  t6192 = -0.049*t4911;
  t6204 = -0.004500000000000004*t601;
  t6212 = t1913*t5202;
  t6214 = t1913*t493*t5547;
  t6215 = -1.*t1913*t676*t5636;
  t6221 = t1949*t5731;
  t6229 = t2118*t5802;
  t6232 = t2261*t5959;
  t6233 = t2381*t5996;
  t6240 = t2407*t6083;
  t6253 = t2685*t6140;
  t6254 = 0.0306*t2734;
  t6264 = -1.1312*t2859;
  t6266 = 0. + t6192 + t6204 + t6212 + t6214 + t6215 + t6221 + t6229 + t6232 + t6233 + t6240 + t6253 + t6254 + t6264;
  t4436 = t4173*t3937;
  t4469 = -1.*t2931*t4323;
  t4488 = t4436 + t4469;
  t3002 = t659*t1913*t2931;
  t3950 = t601*t3937;
  t4024 = t3002 + t3950;
  t4038 = -1.*t1903*t4024;
  t4208 = t659*t1913*t4173;
  t4345 = t601*t4323;
  t4379 = t4208 + t4345;
  t4396 = t4078*t4379;
  t4548 = -1.*t1913*t581*t4488;
  t4606 = 0. + t4038 + t4396 + t4548;
  t4642 = 1/t4606;
  t6469 = Cos(var1[1]);
  t6493 = Cos(var1[2]);
  t6494 = Cos(var1[3]);
  t6512 = -1.*t6494;
  t6521 = 1. + t6512;
  t6530 = Sin(var1[3]);
  t6597 = Sin(var1[2]);
  t6655 = Cos(var1[4]);
  t6673 = -1.*t6655;
  t6699 = 1. + t6673;
  t6703 = Sin(var1[4]);
  t6711 = -1.*t6469*t6493*t6530;
  t6720 = -1.*t6494*t6469*t6597;
  t6734 = t6711 + t6720;
  t6763 = t6494*t6469*t6493;
  t6774 = -1.*t6469*t6530*t6597;
  t6782 = t6763 + t6774;
  t6796 = Cos(var1[5]);
  t6797 = -1.*t6796;
  t6798 = 1. + t6797;
  t6802 = Sin(var1[5]);
  t6808 = t6703*t6734;
  t6816 = t6655*t6782;
  t6819 = t6808 + t6816;
  t6832 = t6655*t6734;
  t6844 = -1.*t6703*t6782;
  t6847 = t6832 + t6844;
  t6857 = Cos(var1[6]);
  t6859 = -1.*t6857;
  t6864 = 1. + t6859;
  t6866 = Sin(var1[6]);
  t6888 = -1.*t6802*t6819;
  t6891 = t6796*t6847;
  t6893 = t6888 + t6891;
  t6900 = t6796*t6819;
  t6901 = t6802*t6847;
  t6907 = t6900 + t6901;
  t6959 = Cos(var1[0]);
  t6476 = -1.*t6469;
  t6480 = 1. + t6476;
  t6556 = Sin(var1[1]);
  t6566 = -1.*t6493;
  t6567 = 1. + t6566;
  t6573 = -0.049*t6567;
  t6600 = -0.09*t6597;
  t6601 = 0. + t6573 + t6600;
  t6525 = -0.049*t6521;
  t6535 = -0.21*t6530;
  t6542 = 0. + t6525 + t6535;
  t6987 = Sin(var1[0]);
  t6634 = -0.21*t6521;
  t6640 = 0.049*t6530;
  t6643 = 0. + t6634 + t6640;
  t6702 = -0.2707*t6699;
  t6705 = 0.0016*t6703;
  t6706 = 0. + t6702 + t6705;
  t6999 = t6959*t6493*t6556;
  t7000 = -1.*t6987*t6597;
  t7001 = t6999 + t7000;
  t7011 = -1.*t6493*t6987;
  t7018 = -1.*t6959*t6556*t6597;
  t7023 = t7011 + t7018;
  t6737 = -0.0016*t6699;
  t6742 = -0.2707*t6703;
  t6751 = 0. + t6737 + t6742;
  t6799 = 0.0184*t6798;
  t6804 = -0.7055*t6802;
  t6805 = 0. + t6799 + t6804;
  t7026 = -1.*t6530*t7001;
  t7028 = t6494*t7023;
  t7031 = t7026 + t7028;
  t7036 = t6494*t7001;
  t7037 = t6530*t7023;
  t7040 = t7036 + t7037;
  t6825 = -0.7055*t6798;
  t6828 = -0.0184*t6802;
  t6831 = 0. + t6825 + t6828;
  t6865 = -1.1135*t6864;
  t6881 = 0.0216*t6866;
  t6886 = 0. + t6865 + t6881;
  t7045 = t6703*t7031;
  t7046 = t6655*t7040;
  t7047 = t7045 + t7046;
  t7056 = t6655*t7031;
  t7057 = -1.*t6703*t7040;
  t7060 = t7056 + t7057;
  t6896 = -0.0216*t6864;
  t6897 = -1.1135*t6866;
  t6899 = 0. + t6896 + t6897;
  t7069 = -1.*t6802*t7047;
  t7070 = t6796*t7060;
  t7075 = t7069 + t7070;
  t7077 = t6796*t7047;
  t7084 = t6802*t7060;
  t7085 = t7077 + t7084;
  t6980 = 0.135*t6480;
  t6983 = 0.049*t6556;
  t6984 = 0. + t6980 + t6983;
  t6990 = -0.09*t6567;
  t6992 = 0.049*t6597;
  t6994 = 0. + t6990 + t6992;
  t7131 = t6493*t6987*t6556;
  t7132 = t6959*t6597;
  t7133 = t7131 + t7132;
  t7136 = t6959*t6493;
  t7139 = -1.*t6987*t6556*t6597;
  t7144 = t7136 + t7139;
  t7148 = -1.*t6530*t7133;
  t7150 = t6494*t7144;
  t7151 = t7148 + t7150;
  t7154 = t6494*t7133;
  t7155 = t6530*t7144;
  t7156 = t7154 + t7155;
  t7159 = t6703*t7151;
  t7161 = t6655*t7156;
  t7163 = t7159 + t7161;
  t7165 = t6655*t7151;
  t7168 = -1.*t6703*t7156;
  t7170 = t7165 + t7168;
  t7183 = -1.*t6802*t7163;
  t7188 = t6796*t7170;
  t7189 = t7183 + t7188;
  t7194 = t6796*t7163;
  t7199 = t6802*t7170;
  t7201 = t7194 + t7199;
  t6312 = 0.135*t581;
  t6327 = -0.1305*t1913*t581;
  t6328 = t581*t4979;
  t6333 = t581*t601*t5202;
  t6356 = t659*t5256;
  t6368 = t708*t5547;
  t6374 = t800*t5636;
  t6379 = t918*t5731;
  t6380 = t1051*t5802;
  t6399 = t1121*t5959;
  t6401 = t1364*t5996;
  t6404 = t1525*t6083;
  t6406 = t1598*t6140;
  t6408 = 0.0306*t1634;
  t6412 = -1.1312*t1877;
  t6416 = 0. + t6312 + t6327 + t6328 + t6333 + t6356 + t6368 + t6374 + t6379 + t6380 + t6399 + t6401 + t6404 + t6406 + t6408 + t6412;
  t6188 = t2931*t6150;
  t6267 = -1.*t6266*t3937;
  t6269 = t6188 + t6267;
  t6488 = -0.049*t6480;
  t6552 = t6469*t6493*t6542;
  t6564 = 0.004500000000000004*t6556;
  t6630 = t6469*t6601;
  t6650 = -1.*t6469*t6643*t6597;
  t6736 = t6706*t6734;
  t6791 = t6751*t6782;
  t6821 = t6805*t6819;
  t6848 = t6831*t6847;
  t6895 = t6886*t6893;
  t6914 = t6899*t6907;
  t6920 = t6866*t6893;
  t6925 = t6857*t6907;
  t6927 = t6920 + t6925;
  t6928 = 0.0306*t6927;
  t6931 = t6857*t6893;
  t6932 = -1.*t6866*t6907;
  t6934 = t6931 + t6932;
  t6944 = -1.1312*t6934;
  t6946 = 0. + t6488 + t6552 + t6564 + t6630 + t6650 + t6736 + t6791 + t6821 + t6848 + t6895 + t6914 + t6928 + t6944;
  t6961 = -1.*t6959;
  t6963 = 1. + t6961;
  t6971 = 0.135*t6963;
  t6973 = 0.1305*t6959*t6469;
  t6985 = t6959*t6984;
  t6986 = t6959*t6556*t6601;
  t6998 = -1.*t6987*t6994;
  t7002 = t6542*t7001;
  t7025 = t6643*t7023;
  t7033 = t6706*t7031;
  t7042 = t6751*t7040;
  t7049 = t6805*t7047;
  t7061 = t6831*t7060;
  t7076 = t6886*t7075;
  t7088 = t6899*t7085;
  t7089 = t6866*t7075;
  t7093 = t6857*t7085;
  t7097 = t7089 + t7093;
  t7100 = 0.0306*t7097;
  t7101 = t6857*t7075;
  t7103 = -1.*t6866*t7085;
  t7104 = t7101 + t7103;
  t7105 = -1.1312*t7104;
  t7106 = 0. + t6971 + t6973 + t6985 + t6986 + t6998 + t7002 + t7025 + t7033 + t7042 + t7049 + t7061 + t7076 + t7088 + t7100 + t7105;
  t7117 = -0.135*t6987;
  t7119 = 0.1305*t6469*t6987;
  t7120 = t6987*t6984;
  t7122 = t6987*t6556*t6601;
  t7128 = t6959*t6994;
  t7134 = t6542*t7133;
  t7146 = t6643*t7144;
  t7152 = t6706*t7151;
  t7157 = t6751*t7156;
  t7164 = t6805*t7163;
  t7174 = t6831*t7170;
  t7190 = t6886*t7189;
  t7203 = t6899*t7201;
  t7206 = t6866*t7189;
  t7208 = t6857*t7201;
  t7211 = t7206 + t7208;
  t7213 = 0.0306*t7211;
  t7215 = t6857*t7189;
  t7216 = -1.*t6866*t7201;
  t7220 = t7215 + t7216;
  t7224 = -1.1312*t7220;
  t7231 = 0. + t7117 + t7119 + t7120 + t7122 + t7128 + t7134 + t7146 + t7152 + t7157 + t7164 + t7174 + t7190 + t7203 + t7213 + t7224;
  t7238 = t659*t1913*t6266;
  t7243 = t601*t6150;
  t7244 = t7238 + t7243;
  t6293 = t4173*t6150;
  t6294 = -1.*t6266*t4323;
  t6298 = t6293 + t6294;

  p_output1(0)=t4642*(-1.*t1903*t6269 + t4078*t6298 - 1.*t4488*t6416) + (0. - 1.*t1903*t3937 + t4078*t4323)*t4642*t6946 + (0. + t1903*t2931 - 1.*t4078*t4173)*t4642*t7106 + (0. + t4436 + t4469)*t4642*t7231;
  p_output1(1)=t4642*(0. - 1.*t1913*t3937*t581 + t1913*t4078*t659)*t6946 + t4642*(0. + t1913*t2931*t581 + t4078*t601)*t7106 + t4642*(0. - 1.*t3937*t601 - 1.*t1913*t2931*t659)*t7231 + t4642*(-1.*t1913*t581*t6269 + t4024*t6416 - 1.*t4078*t7244);
  p_output1(2)=t4642*(0. + t1913*t4323*t581 - 1.*t1903*t1913*t659)*t6946 + t4642*(0. - 1.*t1913*t4173*t581 - 1.*t1903*t601)*t7106 + (0. + t4208 + t4345)*t4642*t7231 + t4642*(t1913*t581*t6298 - 1.*t4379*t6416 + t1903*t7244);
}


       
Eigen::Matrix<double,3,1> p_RightToeBottom_to_LeftToeBottom(const Eigen::Matrix<double,14,1> &var1)
{
  /* Call Subroutines */
  Eigen::Matrix<double,3,1>  p_output1;
  
  output1(p_output1, var1);

  return p_output1;
}



