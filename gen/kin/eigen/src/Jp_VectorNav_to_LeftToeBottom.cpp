/*
 * Automatically Generated from Mathematica.
 * Tue 8 Jan 2019 23:02:42 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jp_VectorNav_to_LeftToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE static inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }


/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,14> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t39;
  double t132;
  double t326;
  double t456;
  double t572;
  double t665;
  double t772;
  double t951;
  double t1147;
  double t1172;
  double t1308;
  double t1353;
  double t1502;
  double t1515;
  double t1556;
  double t1699;
  double t1728;
  double t1773;
  double t1853;
  double t1863;
  double t1912;
  double t2053;
  double t2163;
  double t2270;
  double t2363;
  double t2579;
  double t2626;
  double t2645;
  double t2710;
  double t2742;
  double t2760;
  double t2887;
  double t2909;
  double t3084;
  double t3134;
  double t3231;
  double t3232;
  double t3341;
  double t3605;
  double t3630;
  double t3631;
  double t3705;
  double t3742;
  double t3754;
  double t3810;
  double t3923;
  double t3950;
  double t3968;
  double t211;
  double t264;
  double t311;
  double t410;
  double t437;
  double t737;
  double t859;
  double t862;
  double t985;
  double t1043;
  double t1088;
  double t1332;
  double t1473;
  double t1500;
  double t1615;
  double t1630;
  double t1681;
  double t1963;
  double t2077;
  double t2128;
  double t4220;
  double t4235;
  double t4250;
  double t4269;
  double t4270;
  double t4293;
  double t2416;
  double t2534;
  double t2555;
  double t2802;
  double t2893;
  double t2899;
  double t4305;
  double t4311;
  double t4322;
  double t4377;
  double t4393;
  double t4434;
  double t3188;
  double t3193;
  double t3219;
  double t3643;
  double t3715;
  double t3737;
  double t4458;
  double t4466;
  double t4472;
  double t4495;
  double t4500;
  double t4520;
  double t3880;
  double t3896;
  double t3908;
  double t4532;
  double t4533;
  double t4543;
  double t4556;
  double t4559;
  double t4562;
  double t4764;
  double t4776;
  double t4780;
  double t4793;
  double t4805;
  double t4811;
  double t4831;
  double t4833;
  double t4849;
  double t4859;
  double t4880;
  double t4893;
  double t4909;
  double t4917;
  double t4932;
  double t4951;
  double t4957;
  double t4971;
  double t5098;
  double t5109;
  double t5113;
  double t5129;
  double t5146;
  double t5150;
  double t5162;
  double t5164;
  double t5177;
  double t5197;
  double t5200;
  double t5202;
  double t5207;
  double t5208;
  double t5214;
  double t5229;
  double t5231;
  double t5236;
  double t5038;
  double t5048;
  double t5057;
  double t5369;
  double t5371;
  double t5373;
  double t5385;
  double t5393;
  double t5402;
  double t5414;
  double t5422;
  double t5427;
  double t5441;
  double t5445;
  double t5450;
  double t5464;
  double t5472;
  double t5488;
  double t5493;
  double t5499;
  double t5503;
  double t5583;
  double t5587;
  double t5595;
  double t5605;
  double t5614;
  double t5624;
  double t5629;
  double t5646;
  double t5650;
  double t5655;
  double t5656;
  double t5657;
  double t5668;
  double t5671;
  double t5673;
  double t5678;
  double t5690;
  double t5698;
  double t5558;
  double t5559;
  double t5572;
  double t5788;
  double t5791;
  double t5793;
  double t5797;
  double t5804;
  double t5824;
  double t5828;
  double t5829;
  double t5845;
  double t5846;
  double t5848;
  double t5858;
  double t5870;
  double t5874;
  double t5885;
  double t5888;
  double t5889;
  double t5897;
  double t5898;
  double t5909;
  double t5765;
  double t5770;
  double t5960;
  double t5963;
  double t5972;
  double t5994;
  double t5996;
  double t5999;
  double t6008;
  double t6010;
  double t6019;
  double t6028;
  double t6036;
  double t6043;
  double t6047;
  double t6049;
  double t6057;
  double t6059;
  double t6061;
  double t6074;
  double t6080;
  double t6081;
  double t5598;
  double t5628;
  double t5654;
  double t5660;
  double t5676;
  double t5700;
  double t5716;
  double t5728;
  double t5731;
  double t5740;
  double t5745;
  double t5752;
  double t5753;
  double t5758;
  double t6113;
  double t6115;
  double t6122;
  double t6126;
  double t6130;
  double t6145;
  double t6147;
  double t6149;
  double t6153;
  double t6156;
  double t6164;
  double t6165;
  double t6172;
  double t6176;
  double t6182;
  double t6184;
  double t6185;
  double t6187;
  double t6212;
  double t6214;
  double t6218;
  double t6222;
  double t6227;
  double t6231;
  double t6233;
  double t6237;
  double t6238;
  double t6242;
  double t6245;
  double t6251;
  double t6252;
  double t6255;
  double t6261;
  double t6263;
  double t6273;
  double t6278;
  double t6282;
  double t6333;
  double t6335;
  double t6337;
  double t6351;
  double t6355;
  double t6362;
  double t6367;
  double t6371;
  double t6374;
  double t6378;
  double t6380;
  double t6381;
  double t6385;
  double t6307;
  double t6313;
  double t6327;
  double t6329;
  double t6331;
  double t6432;
  double t6433;
  double t6439;
  double t6441;
  double t6447;
  double t6450;
  double t6461;
  double t6521;
  double t6522;
  double t6523;
  double t6527;
  double t6535;
  double t6537;
  double t6540;
  double t6543;
  double t6552;
  double t6554;
  double t6557;
  double t6565;
  double t6570;
  double t6617;
  double t6624;
  double t6626;
  double t6651;
  double t6653;
  double t6663;
  double t6664;
  double t6600;
  double t6612;
  double t6615;
  double t6636;
  double t6643;
  double t6709;
  double t6711;
  double t4619;
  double t6763;
  double t6766;
  double t6770;
  double t6777;
  double t6779;
  double t6785;
  double t6787;
  double t6675;
  double t6825;
  double t6832;
  double t6834;
  double t6692;
  double t6808;
  double t6809;
  double t6815;
  double t6816;
  double t6821;
  double t6719;
  double t4632;
  double t4633;
  double t6794;
  double t6891;
  double t6893;
  double t6894;
  double t6801;
  t39 = Sin(var1[0]);
  t132 = Cos(var1[1]);
  t326 = Sin(var1[1]);
  t456 = Cos(var1[2]);
  t572 = -1.*t456;
  t665 = 1. + t572;
  t772 = Sin(var1[2]);
  t951 = Cos(var1[0]);
  t1147 = Cos(var1[3]);
  t1172 = -1.*t1147;
  t1308 = 1. + t1172;
  t1353 = Sin(var1[3]);
  t1502 = -1.*t456*t39*t326;
  t1515 = -1.*t951*t772;
  t1556 = t1502 + t1515;
  t1699 = -1.*t951*t456;
  t1728 = t39*t326*t772;
  t1773 = t1699 + t1728;
  t1853 = Cos(var1[4]);
  t1863 = -1.*t1853;
  t1912 = 1. + t1863;
  t2053 = Sin(var1[4]);
  t2163 = -1.*t1353*t1556;
  t2270 = t1147*t1773;
  t2363 = t2163 + t2270;
  t2579 = t1147*t1556;
  t2626 = t1353*t1773;
  t2645 = t2579 + t2626;
  t2710 = Cos(var1[5]);
  t2742 = -1.*t2710;
  t2760 = 1. + t2742;
  t2887 = Sin(var1[5]);
  t2909 = t2053*t2363;
  t3084 = t1853*t2645;
  t3134 = t2909 + t3084;
  t3231 = t1853*t2363;
  t3232 = -1.*t2053*t2645;
  t3341 = t3231 + t3232;
  t3605 = Cos(var1[6]);
  t3630 = -1.*t3605;
  t3631 = 1. + t3630;
  t3705 = Sin(var1[6]);
  t3742 = -1.*t2887*t3134;
  t3754 = t2710*t3341;
  t3810 = t3742 + t3754;
  t3923 = t2710*t3134;
  t3950 = t2887*t3341;
  t3968 = t3923 + t3950;
  t211 = -1.*t132;
  t264 = 1. + t211;
  t311 = 0.135*t264;
  t410 = 0.049*t326;
  t437 = 0. + t311 + t410;
  t737 = -0.049*t665;
  t859 = -0.09*t772;
  t862 = 0. + t737 + t859;
  t985 = -0.09*t665;
  t1043 = 0.049*t772;
  t1088 = 0. + t985 + t1043;
  t1332 = -0.049*t1308;
  t1473 = -0.21*t1353;
  t1500 = 0. + t1332 + t1473;
  t1615 = -0.21*t1308;
  t1630 = 0.049*t1353;
  t1681 = 0. + t1615 + t1630;
  t1963 = -0.2707*t1912;
  t2077 = 0.0016*t2053;
  t2128 = 0. + t1963 + t2077;
  t4220 = t951*t456*t326;
  t4235 = -1.*t39*t772;
  t4250 = t4220 + t4235;
  t4269 = -1.*t456*t39;
  t4270 = -1.*t951*t326*t772;
  t4293 = t4269 + t4270;
  t2416 = -0.0016*t1912;
  t2534 = -0.2707*t2053;
  t2555 = 0. + t2416 + t2534;
  t2802 = 0.0184*t2760;
  t2893 = -0.7055*t2887;
  t2899 = 0. + t2802 + t2893;
  t4305 = -1.*t1353*t4250;
  t4311 = t1147*t4293;
  t4322 = t4305 + t4311;
  t4377 = t1147*t4250;
  t4393 = t1353*t4293;
  t4434 = t4377 + t4393;
  t3188 = -0.7055*t2760;
  t3193 = -0.0184*t2887;
  t3219 = 0. + t3188 + t3193;
  t3643 = -1.1135*t3631;
  t3715 = 0.0216*t3705;
  t3737 = 0. + t3643 + t3715;
  t4458 = t2053*t4322;
  t4466 = t1853*t4434;
  t4472 = t4458 + t4466;
  t4495 = t1853*t4322;
  t4500 = -1.*t2053*t4434;
  t4520 = t4495 + t4500;
  t3880 = -0.0216*t3631;
  t3896 = -1.1135*t3705;
  t3908 = 0. + t3880 + t3896;
  t4532 = -1.*t2887*t4472;
  t4533 = t2710*t4520;
  t4543 = t4532 + t4533;
  t4556 = t2710*t4472;
  t4559 = t2887*t4520;
  t4562 = t4556 + t4559;
  t4764 = t456*t1353*t326;
  t4776 = t1147*t326*t772;
  t4780 = t4764 + t4776;
  t4793 = -1.*t1147*t456*t326;
  t4805 = t1353*t326*t772;
  t4811 = t4793 + t4805;
  t4831 = t2053*t4780;
  t4833 = t1853*t4811;
  t4849 = t4831 + t4833;
  t4859 = t1853*t4780;
  t4880 = -1.*t2053*t4811;
  t4893 = t4859 + t4880;
  t4909 = -1.*t2887*t4849;
  t4917 = t2710*t4893;
  t4932 = t4909 + t4917;
  t4951 = t2710*t4849;
  t4957 = t2887*t4893;
  t4971 = t4951 + t4957;
  t5098 = -1.*t951*t132*t456*t1353;
  t5109 = -1.*t1147*t951*t132*t772;
  t5113 = t5098 + t5109;
  t5129 = t1147*t951*t132*t456;
  t5146 = -1.*t951*t132*t1353*t772;
  t5150 = t5129 + t5146;
  t5162 = t2053*t5113;
  t5164 = t1853*t5150;
  t5177 = t5162 + t5164;
  t5197 = t1853*t5113;
  t5200 = -1.*t2053*t5150;
  t5202 = t5197 + t5200;
  t5207 = -1.*t2887*t5177;
  t5208 = t2710*t5202;
  t5214 = t5207 + t5208;
  t5229 = t2710*t5177;
  t5231 = t2887*t5202;
  t5236 = t5229 + t5231;
  t5038 = 0.049*t132;
  t5048 = 0.135*t326;
  t5057 = t5038 + t5048;
  t5369 = -1.*t132*t456*t1353*t39;
  t5371 = -1.*t1147*t132*t39*t772;
  t5373 = t5369 + t5371;
  t5385 = t1147*t132*t456*t39;
  t5393 = -1.*t132*t1353*t39*t772;
  t5402 = t5385 + t5393;
  t5414 = t2053*t5373;
  t5422 = t1853*t5402;
  t5427 = t5414 + t5422;
  t5441 = t1853*t5373;
  t5445 = -1.*t2053*t5402;
  t5450 = t5441 + t5445;
  t5464 = -1.*t2887*t5427;
  t5472 = t2710*t5450;
  t5488 = t5464 + t5472;
  t5493 = t2710*t5427;
  t5499 = t2887*t5450;
  t5503 = t5493 + t5499;
  t5583 = -1.*t132*t456*t1353;
  t5587 = -1.*t1147*t132*t772;
  t5595 = t5583 + t5587;
  t5605 = -1.*t1147*t132*t456;
  t5614 = t132*t1353*t772;
  t5624 = t5605 + t5614;
  t5629 = -1.*t2053*t5595;
  t5646 = t1853*t5624;
  t5650 = t5629 + t5646;
  t5655 = t1853*t5595;
  t5656 = t2053*t5624;
  t5657 = t5655 + t5656;
  t5668 = t2887*t5650;
  t5671 = t2710*t5657;
  t5673 = t5668 + t5671;
  t5678 = t2710*t5650;
  t5690 = -1.*t2887*t5657;
  t5698 = t5678 + t5690;
  t5558 = -0.09*t456;
  t5559 = -0.049*t772;
  t5572 = t5558 + t5559;
  t5788 = -1.*t951*t456*t326;
  t5791 = t39*t772;
  t5793 = t5788 + t5791;
  t5797 = t1353*t5793;
  t5804 = t5797 + t4311;
  t5824 = t1147*t5793;
  t5828 = -1.*t1353*t4293;
  t5829 = t5824 + t5828;
  t5845 = -1.*t2053*t5804;
  t5846 = t1853*t5829;
  t5848 = t5845 + t5846;
  t5858 = t1853*t5804;
  t5870 = t2053*t5829;
  t5874 = t5858 + t5870;
  t5885 = t2887*t5848;
  t5888 = t2710*t5874;
  t5889 = t5885 + t5888;
  t5897 = t2710*t5848;
  t5898 = -1.*t2887*t5874;
  t5909 = t5897 + t5898;
  t5765 = 0.049*t456;
  t5770 = t5765 + t859;
  t5960 = t951*t456;
  t5963 = -1.*t39*t326*t772;
  t5972 = t5960 + t5963;
  t5994 = t1353*t1556;
  t5996 = t1147*t5972;
  t5999 = t5994 + t5996;
  t6008 = -1.*t1353*t5972;
  t6010 = t2579 + t6008;
  t6019 = -1.*t2053*t5999;
  t6028 = t1853*t6010;
  t6036 = t6019 + t6028;
  t6043 = t1853*t5999;
  t6047 = t2053*t6010;
  t6049 = t6043 + t6047;
  t6057 = t2887*t6036;
  t6059 = t2710*t6049;
  t6061 = t6057 + t6059;
  t6074 = t2710*t6036;
  t6080 = -1.*t2887*t6049;
  t6081 = t6074 + t6080;
  t5598 = t2555*t5595;
  t5628 = t2128*t5624;
  t5654 = t3219*t5650;
  t5660 = t2899*t5657;
  t5676 = t3908*t5673;
  t5700 = t3737*t5698;
  t5716 = -1.*t3705*t5673;
  t5728 = t3605*t5698;
  t5731 = t5716 + t5728;
  t5740 = -1.1312*t5731;
  t5745 = t3605*t5673;
  t5752 = t3705*t5698;
  t5753 = t5745 + t5752;
  t5758 = 0.0306*t5753;
  t6113 = -0.21*t1147;
  t6115 = -0.049*t1353;
  t6122 = t6113 + t6115;
  t6126 = 0.049*t1147;
  t6130 = t6126 + t1473;
  t6145 = -1.*t1147*t4250;
  t6147 = t6145 + t5828;
  t6149 = -1.*t2053*t4322;
  t6153 = t1853*t6147;
  t6156 = t6149 + t6153;
  t6164 = t2053*t6147;
  t6165 = t4495 + t6164;
  t6172 = t2887*t6156;
  t6176 = t2710*t6165;
  t6182 = t6172 + t6176;
  t6184 = t2710*t6156;
  t6185 = -1.*t2887*t6165;
  t6187 = t6184 + t6185;
  t6212 = t456*t39*t326;
  t6214 = t951*t772;
  t6218 = t6212 + t6214;
  t6222 = -1.*t1353*t6218;
  t6227 = t6222 + t5996;
  t6231 = -1.*t1147*t6218;
  t6233 = t6231 + t6008;
  t6237 = -1.*t2053*t6227;
  t6238 = t1853*t6233;
  t6242 = t6237 + t6238;
  t6245 = t1853*t6227;
  t6251 = t2053*t6233;
  t6252 = t6245 + t6251;
  t6255 = t2887*t6242;
  t6261 = t2710*t6252;
  t6263 = t6255 + t6261;
  t6273 = t2710*t6242;
  t6278 = -1.*t2887*t6252;
  t6282 = t6273 + t6278;
  t6333 = t1147*t132*t456;
  t6335 = -1.*t132*t1353*t772;
  t6337 = t6333 + t6335;
  t6351 = -1.*t1853*t6337;
  t6355 = t5629 + t6351;
  t6362 = -1.*t2053*t6337;
  t6367 = t5655 + t6362;
  t6371 = t2887*t6355;
  t6374 = t2710*t6367;
  t6378 = t6371 + t6374;
  t6380 = t2710*t6355;
  t6381 = -1.*t2887*t6367;
  t6385 = t6380 + t6381;
  t6307 = 0.0016*t1853;
  t6313 = t6307 + t2534;
  t6327 = -0.2707*t1853;
  t6329 = -0.0016*t2053;
  t6331 = t6327 + t6329;
  t6432 = -1.*t1853*t4434;
  t6433 = t6149 + t6432;
  t6439 = t2887*t6433;
  t6441 = t6439 + t4533;
  t6447 = t2710*t6433;
  t6450 = -1.*t2887*t4520;
  t6461 = t6447 + t6450;
  t6521 = t1147*t6218;
  t6522 = t1353*t5972;
  t6523 = t6521 + t6522;
  t6527 = -1.*t1853*t6523;
  t6535 = t6237 + t6527;
  t6537 = -1.*t2053*t6523;
  t6540 = t6245 + t6537;
  t6543 = t2887*t6535;
  t6552 = t2710*t6540;
  t6554 = t6543 + t6552;
  t6557 = t2710*t6535;
  t6565 = -1.*t2887*t6540;
  t6570 = t6557 + t6565;
  t6617 = t2053*t5595;
  t6624 = t1853*t6337;
  t6626 = t6617 + t6624;
  t6651 = -1.*t2887*t6626;
  t6653 = t6651 + t6374;
  t6663 = -1.*t2710*t6626;
  t6664 = t6663 + t6381;
  t6600 = -0.7055*t2710;
  t6612 = 0.0184*t2887;
  t6615 = t6600 + t6612;
  t6636 = -0.0184*t2710;
  t6643 = t6636 + t2893;
  t6709 = -1.*t2710*t4472;
  t6711 = t6709 + t6450;
  t4619 = t3605*t4543;
  t6763 = t2053*t6227;
  t6766 = t1853*t6523;
  t6770 = t6763 + t6766;
  t6777 = -1.*t2887*t6770;
  t6779 = t6777 + t6552;
  t6785 = -1.*t2710*t6770;
  t6787 = t6785 + t6565;
  t6675 = -1.*t3705*t6653;
  t6825 = t2710*t6626;
  t6832 = t2887*t6367;
  t6834 = t6825 + t6832;
  t6692 = t3605*t6653;
  t6808 = 0.0216*t3605;
  t6809 = t6808 + t3896;
  t6815 = -1.1135*t3605;
  t6816 = -0.0216*t3705;
  t6821 = t6815 + t6816;
  t6719 = -1.*t3705*t4543;
  t4632 = -1.*t3705*t4562;
  t4633 = t4619 + t4632;
  t6794 = -1.*t3705*t6779;
  t6891 = t2710*t6770;
  t6893 = t2887*t6540;
  t6894 = t6891 + t6893;
  t6801 = t3605*t6779;

  p_output1(0)=0;
  p_output1(1)=t1500*t1556 + t1681*t1773 + t2128*t2363 + t2555*t2645 + t2899*t3134 + t3219*t3341 + t3737*t3810 + 0.135*t39 - 0.1305*t132*t39 + t3908*t3968 + 0.0306*(t3705*t3810 + t3605*t3968) - 1.1312*(t3605*t3810 - 1.*t3705*t3968) - 1.*t39*t437 - 1.*t326*t39*t862 - 1.*t1088*t951;
  p_output1(2)=-1.*t1088*t39 + t1500*t4250 + t1681*t4293 + t2128*t4322 + t2555*t4434 + t2899*t4472 + t3219*t4520 + t3737*t4543 + t3908*t4562 + 0.0306*(t3705*t4543 + t3605*t4562) - 1.1312*t4633 - 0.135*t951 + 0.1305*t132*t951 + t437*t951 + t326*t862*t951;
  p_output1(3)=0.004500000000000004*t132 - 0.049*t326 - 1.*t1500*t326*t456 + t2128*t4780 + t2555*t4811 + t2899*t4849 + t3219*t4893 + t3737*t4932 + t3908*t4971 + 0.0306*(t3705*t4932 + t3605*t4971) - 1.1312*(t3605*t4932 - 1.*t3705*t4971) + t1681*t326*t772 - 1.*t326*t862;
  p_output1(4)=t2128*t5113 + t2555*t5150 + t2899*t5177 + t3219*t5202 + t3737*t5214 + t3908*t5236 + 0.0306*(t3705*t5214 + t3605*t5236) - 1.1312*(t3605*t5214 - 1.*t3705*t5236) - 0.1305*t326*t951 + t132*t1500*t456*t951 + t5057*t951 - 1.*t132*t1681*t772*t951 + t132*t862*t951;
  p_output1(5)=-0.1305*t326*t39 + t132*t1500*t39*t456 + t39*t5057 + t2128*t5373 + t2555*t5402 + t2899*t5427 + t3219*t5450 + t3737*t5488 + t3908*t5503 + 0.0306*(t3705*t5488 + t3605*t5503) - 1.1312*(t3605*t5488 - 1.*t3705*t5503) - 1.*t132*t1681*t39*t772 + t132*t39*t862;
  p_output1(6)=-1.*t132*t1681*t456 + t132*t5572 + t5598 + t5628 + t5654 + t5660 + t5676 + t5700 + t5740 + t5758 - 1.*t132*t1500*t772;
  p_output1(7)=t1500*t4293 - 1.*t39*t5770 + t1681*t5793 + t2555*t5804 + t2128*t5829 + t3219*t5848 + t2899*t5874 + t3908*t5889 + t3737*t5909 - 1.1312*(-1.*t3705*t5889 + t3605*t5909) + 0.0306*(t3605*t5889 + t3705*t5909) + t326*t5572*t951;
  p_output1(8)=t1556*t1681 + t326*t39*t5572 + t1500*t5972 + t2555*t5999 + t2128*t6010 + t3219*t6036 + t2899*t6049 + t3908*t6061 + t3737*t6081 - 1.1312*(-1.*t3705*t6061 + t3605*t6081) + 0.0306*(t3605*t6061 + t3705*t6081) + t5770*t951;
  p_output1(9)=t5598 + t5628 + t5654 + t5660 + t5676 + t5700 + t5740 + t5758 + t132*t456*t6122 - 1.*t132*t6130*t772;
  p_output1(10)=t2555*t4322 + t4250*t6122 + t4293*t6130 + t2128*t6147 + t3219*t6156 + t2899*t6165 + t3908*t6182 + t3737*t6187 - 1.1312*(-1.*t3705*t6182 + t3605*t6187) + 0.0306*(t3605*t6182 + t3705*t6187);
  p_output1(11)=t5972*t6130 + t6122*t6218 + t2555*t6227 + t2128*t6233 + t3219*t6242 + t2899*t6252 + t3908*t6263 + t3737*t6282 - 1.1312*(-1.*t3705*t6263 + t3605*t6282) + 0.0306*(t3605*t6263 + t3705*t6282);
  p_output1(12)=t5595*t6313 + t6331*t6337 + t3219*t6355 + t2899*t6367 + t3908*t6378 + t3737*t6385 - 1.1312*(-1.*t3705*t6378 + t3605*t6385) + 0.0306*(t3605*t6378 + t3705*t6385);
  p_output1(13)=t2899*t4520 + t4322*t6313 + t4434*t6331 + t3219*t6433 + t3908*t6441 + t3737*t6461 - 1.1312*(-1.*t3705*t6441 + t3605*t6461) + 0.0306*(t3605*t6441 + t3705*t6461);
  p_output1(14)=t6227*t6313 + t6331*t6523 + t3219*t6535 + t2899*t6540 + t3908*t6554 + t3737*t6570 - 1.1312*(-1.*t3705*t6554 + t3605*t6570) + 0.0306*(t3605*t6554 + t3705*t6570);
  p_output1(15)=t6615*t6626 + t6367*t6643 + t3908*t6653 + t3737*t6664 - 1.1312*(t3605*t6664 + t6675) + 0.0306*(t3705*t6664 + t6692);
  p_output1(16)=t3908*t4543 + t4472*t6615 + t4520*t6643 + t3737*t6711 + 0.0306*(t4619 + t3705*t6711) - 1.1312*(t3605*t6711 + t6719);
  p_output1(17)=t6540*t6643 + t6615*t6770 + t3908*t6779 + t3737*t6787 - 1.1312*(t3605*t6787 + t6794) + 0.0306*(t3705*t6787 + t6801);
  p_output1(18)=t6653*t6809 + t6821*t6834 - 1.1312*(t6675 - 1.*t3605*t6834) + 0.0306*(t6692 - 1.*t3705*t6834);
  p_output1(19)=0.0306*t4633 - 1.1312*(-1.*t3605*t4562 + t6719) + t4543*t6809 + t4562*t6821;
  p_output1(20)=t6779*t6809 + t6821*t6894 - 1.1312*(t6794 - 1.*t3605*t6894) + 0.0306*(t6801 - 1.*t3705*t6894);
  p_output1(21)=0;
  p_output1(22)=0;
  p_output1(23)=0;
  p_output1(24)=0;
  p_output1(25)=0;
  p_output1(26)=0;
  p_output1(27)=0;
  p_output1(28)=0;
  p_output1(29)=0;
  p_output1(30)=0;
  p_output1(31)=0;
  p_output1(32)=0;
  p_output1(33)=0;
  p_output1(34)=0;
  p_output1(35)=0;
  p_output1(36)=0;
  p_output1(37)=0;
  p_output1(38)=0;
  p_output1(39)=0;
  p_output1(40)=0;
  p_output1(41)=0;
}


       
Eigen::Matrix<double,3,14> Jp_VectorNav_to_LeftToeBottom(const Eigen::Matrix<double,14,1> &var1)
{
  /* Call Subroutines */
  Eigen::Matrix<double,3,14>  p_output1;
  
  output1(p_output1, var1);

  return p_output1;
}



