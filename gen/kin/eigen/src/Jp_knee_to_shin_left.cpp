/*
 * Automatically Generated from Mathematica.
 * Tue 8 Jan 2019 22:44:16 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jp_knee_to_shin_left.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE static inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }


/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,20> &p_output1, const Eigen::Matrix<double,20,1> &var1)
{
  double t717;
  double t934;
  double t985;
  double t538;
  double t1260;
  double t255;
  double t821;
  double t1442;
  double t1459;
  double t1614;
  double t1648;
  double t1666;
  double t1667;
  double t2074;
  double t2146;
  double t2204;
  double t2363;
  double t1937;
  double t1960;
  double t2066;
  double t2529;
  double t3378;
  double t3395;
  double t3423;
  double t3467;
  double t2923;
  double t3027;
  double t3175;
  double t3564;
  double t3567;
  double t3592;
  double t3878;
  double t3887;
  double t3942;
  double t4007;
  double t4128;
  double t4207;
  double t4261;
  double t4475;
  double t4600;
  double t4619;
  double t4699;
  double t4721;
  double t4790;
  double t4914;
  double t4943;
  double t4999;
  double t5001;
  double t5461;
  double t5495;
  double t5504;
  double t319;
  double t391;
  double t452;
  double t487;
  double t1749;
  double t1804;
  double t6024;
  double t6037;
  double t6051;
  double t6111;
  double t6129;
  double t6150;
  double t2257;
  double t2468;
  double t2486;
  double t2626;
  double t2632;
  double t2645;
  double t6211;
  double t6222;
  double t6225;
  double t3431;
  double t3476;
  double t3518;
  double t3638;
  double t3798;
  double t3836;
  double t3948;
  double t4084;
  double t4113;
  double t6279;
  double t6308;
  double t6313;
  double t6349;
  double t6372;
  double t6397;
  double t4381;
  double t4431;
  double t4458;
  double t4910;
  double t4917;
  double t4939;
  double t6470;
  double t6478;
  double t6480;
  double t6511;
  double t6561;
  double t6575;
  double t5174;
  double t5280;
  double t5323;
  double t6611;
  double t6642;
  double t6643;
  double t6710;
  double t6792;
  double t6808;
  double t6924;
  double t6933;
  double t6952;
  double t7041;
  double t7048;
  double t7051;
  double t7087;
  double t7095;
  double t7097;
  double t7116;
  double t7138;
  double t7144;
  double t7153;
  double t7157;
  double t7170;
  double t7179;
  double t7186;
  double t7195;
  double t7232;
  double t7239;
  double t7249;
  double t7327;
  double t7332;
  double t7349;
  double t7391;
  double t7394;
  double t7395;
  double t7405;
  double t7407;
  double t7408;
  double t7415;
  double t7428;
  double t7430;
  double t7443;
  double t7463;
  double t7464;
  double t7473;
  double t7479;
  double t7497;
  double t7517;
  double t7523;
  double t7525;
  double t7593;
  double t7597;
  double t7598;
  double t7621;
  double t7629;
  double t7632;
  double t7641;
  double t7655;
  double t7659;
  double t7670;
  double t7677;
  double t7680;
  double t7684;
  double t7692;
  double t7697;
  double t7705;
  double t7711;
  double t7719;
  double t7726;
  double t7732;
  double t7734;
  double t7788;
  double t7802;
  double t7805;
  double t7813;
  double t7815;
  double t7824;
  double t7839;
  double t7851;
  double t7858;
  double t7859;
  double t7862;
  double t7873;
  double t7877;
  double t7887;
  double t7899;
  double t7900;
  double t7906;
  double t7912;
  double t7914;
  double t7916;
  double t7945;
  double t7948;
  double t7962;
  double t7977;
  double t7978;
  double t7980;
  double t8001;
  double t8005;
  double t8015;
  double t8018;
  double t8019;
  double t8027;
  double t8028;
  double t8029;
  double t8035;
  double t8036;
  double t8037;
  double t8044;
  double t8048;
  double t8053;
  double t8092;
  double t8099;
  double t8102;
  double t8125;
  double t8128;
  double t8129;
  double t8141;
  double t8145;
  double t8148;
  double t8164;
  double t8167;
  double t8177;
  double t8183;
  double t8187;
  double t8188;
  double t8190;
  double t8195;
  double t8199;
  double t8299;
  double t8309;
  double t8313;
  double t8314;
  double t8316;
  double t8318;
  double t8323;
  double t8325;
  double t8332;
  double t8343;
  double t8346;
  double t8354;
  double t8355;
  double t8358;
  double t8401;
  double t8405;
  double t8407;
  double t8421;
  double t8422;
  double t8438;
  double t8440;
  double t8447;
  double t8454;
  double t8457;
  double t8465;
  double t8470;
  double t8472;
  double t8484;
  double t8485;
  double t8488;
  double t8497;
  double t8501;
  double t8504;
  double t8107;
  double t8114;
  double t8118;
  double t8133;
  double t8163;
  double t8181;
  double t8189;
  double t8200;
  double t8227;
  double t8232;
  double t8235;
  double t8240;
  double t8248;
  double t8253;
  double t8260;
  double t8264;
  double t6252;
  double t6259;
  double t6260;
  double t8576;
  double t8579;
  double t8583;
  double t8588;
  double t8589;
  double t8590;
  double t8542;
  double t8547;
  double t8548;
  double t8552;
  double t8553;
  double t8631;
  double t8632;
  double t8636;
  double t8642;
  double t8643;
  double t8651;
  double t8660;
  double t8661;
  double t8664;
  double t8669;
  double t8670;
  double t8674;
  double t8718;
  double t8730;
  double t8733;
  double t8740;
  double t8741;
  double t8742;
  double t8760;
  double t8761;
  double t8762;
  double t8767;
  double t8772;
  double t8773;
  double t8816;
  double t8817;
  double t8823;
  double t8838;
  double t8840;
  double t8849;
  double t8850;
  double t8852;
  double t8806;
  double t8808;
  double t8811;
  double t8813;
  double t8814;
  double t8887;
  double t8895;
  double t8898;
  double t8907;
  double t8912;
  double t8922;
  double t8927;
  double t8933;
  double t8936;
  double t8955;
  double t8956;
  double t8958;
  double t8963;
  double t8964;
  double t8965;
  double t8994;
  double t9006;
  double t9007;
  double t9011;
  double t9015;
  double t9016;
  double t9021;
  double t9024;
  double t9031;
  double t9036;
  double t9050;
  double t9055;
  double t9062;
  double t9065;
  double t9066;
  double t9134;
  double t9136;
  double t6886;
  double t9098;
  double t9111;
  double t9117;
  double t9120;
  double t9125;
  double t9168;
  double t9169;
  double t9170;
  double t9181;
  double t9182;
  double t9185;
  double t9188;
  double t9208;
  double t9210;
  double t9211;
  double t9221;
  double t9224;
  double t9230;
  double t9232;
  double t9143;
  double t6893;
  double t6894;
  double t9260;
  double t9264;
  double t9274;
  double t9276;
  double t9278;
  double t9191;
  double t9306;
  double t9308;
  double t9310;
  double t9196;
  double t9241;
  double t9329;
  double t9330;
  double t9331;
  double t9253;
  t717 = Cos(var1[5]);
  t934 = Sin(var1[3]);
  t985 = Sin(var1[4]);
  t538 = Cos(var1[3]);
  t1260 = Sin(var1[5]);
  t255 = Cos(var1[6]);
  t821 = -1.*t538*t717;
  t1442 = -1.*t934*t985*t1260;
  t1459 = t821 + t1442;
  t1614 = -1.*t717*t934*t985;
  t1648 = t538*t1260;
  t1666 = t1614 + t1648;
  t1667 = Sin(var1[6]);
  t2074 = Cos(var1[7]);
  t2146 = -1.*t2074;
  t2204 = 1. + t2146;
  t2363 = Sin(var1[7]);
  t1937 = t255*t1459;
  t1960 = t1666*t1667;
  t2066 = t1937 + t1960;
  t2529 = Cos(var1[4]);
  t3378 = Cos(var1[8]);
  t3395 = -1.*t3378;
  t3423 = 1. + t3395;
  t3467 = Sin(var1[8]);
  t2923 = -1.*t2529*t2074*t934;
  t3027 = t2066*t2363;
  t3175 = t2923 + t3027;
  t3564 = t255*t1666;
  t3567 = -1.*t1459*t1667;
  t3592 = t3564 + t3567;
  t3878 = Cos(var1[9]);
  t3887 = -1.*t3878;
  t3942 = 1. + t3887;
  t4007 = Sin(var1[9]);
  t4128 = t3378*t3175;
  t4207 = t3592*t3467;
  t4261 = t4128 + t4207;
  t4475 = t3378*t3592;
  t4600 = -1.*t3175*t3467;
  t4619 = t4475 + t4600;
  t4699 = Cos(var1[10]);
  t4721 = -1.*t4699;
  t4790 = 1. + t4721;
  t4914 = Sin(var1[10]);
  t4943 = -1.*t4007*t4261;
  t4999 = t3878*t4619;
  t5001 = t4943 + t4999;
  t5461 = t3878*t4261;
  t5495 = t4007*t4619;
  t5504 = t5461 + t5495;
  t319 = -1.*t255;
  t391 = 1. + t319;
  t452 = 0.135*t391;
  t487 = 0. + t452;
  t1749 = -0.135*t1667;
  t1804 = 0. + t1749;
  t6024 = -1.*t717*t934;
  t6037 = t538*t985*t1260;
  t6051 = t6024 + t6037;
  t6111 = t538*t717*t985;
  t6129 = t934*t1260;
  t6150 = t6111 + t6129;
  t2257 = 0.135*t2204;
  t2468 = 0.049*t2363;
  t2486 = 0. + t2257 + t2468;
  t2626 = -0.049*t2204;
  t2632 = 0.135*t2363;
  t2645 = 0. + t2626 + t2632;
  t6211 = t255*t6051;
  t6222 = t6150*t1667;
  t6225 = t6211 + t6222;
  t3431 = -0.049*t3423;
  t3476 = -0.09*t3467;
  t3518 = 0. + t3431 + t3476;
  t3638 = -0.09*t3423;
  t3798 = 0.049*t3467;
  t3836 = 0. + t3638 + t3798;
  t3948 = -0.049*t3942;
  t4084 = -0.21*t4007;
  t4113 = 0. + t3948 + t4084;
  t6279 = t538*t2529*t2074;
  t6308 = t6225*t2363;
  t6313 = t6279 + t6308;
  t6349 = t255*t6150;
  t6372 = -1.*t6051*t1667;
  t6397 = t6349 + t6372;
  t4381 = -0.21*t3942;
  t4431 = 0.049*t4007;
  t4458 = 0. + t4381 + t4431;
  t4910 = -0.2707*t4790;
  t4917 = 0.0016*t4914;
  t4939 = 0. + t4910 + t4917;
  t6470 = t3378*t6313;
  t6478 = t6397*t3467;
  t6480 = t6470 + t6478;
  t6511 = t3378*t6397;
  t6561 = -1.*t6313*t3467;
  t6575 = t6511 + t6561;
  t5174 = -0.0016*t4790;
  t5280 = -0.2707*t4914;
  t5323 = 0. + t5174 + t5280;
  t6611 = -1.*t4007*t6480;
  t6642 = t3878*t6575;
  t6643 = t6611 + t6642;
  t6710 = t3878*t6480;
  t6792 = t4007*t6575;
  t6808 = t6710 + t6792;
  t6924 = t538*t2529*t255*t1260;
  t6933 = t538*t2529*t717*t1667;
  t6952 = t6924 + t6933;
  t7041 = -1.*t538*t2074*t985;
  t7048 = t6952*t2363;
  t7051 = t7041 + t7048;
  t7087 = t538*t2529*t717*t255;
  t7095 = -1.*t538*t2529*t1260*t1667;
  t7097 = t7087 + t7095;
  t7116 = t3378*t7051;
  t7138 = t7097*t3467;
  t7144 = t7116 + t7138;
  t7153 = t3378*t7097;
  t7157 = -1.*t7051*t3467;
  t7170 = t7153 + t7157;
  t7179 = -1.*t4007*t7144;
  t7186 = t3878*t7170;
  t7195 = t7179 + t7186;
  t7232 = t3878*t7144;
  t7239 = t4007*t7170;
  t7249 = t7232 + t7239;
  t7327 = t2529*t255*t934*t1260;
  t7332 = t2529*t717*t934*t1667;
  t7349 = t7327 + t7332;
  t7391 = -1.*t2074*t934*t985;
  t7394 = t7349*t2363;
  t7395 = t7391 + t7394;
  t7405 = t2529*t717*t255*t934;
  t7407 = -1.*t2529*t934*t1260*t1667;
  t7408 = t7405 + t7407;
  t7415 = t3378*t7395;
  t7428 = t7408*t3467;
  t7430 = t7415 + t7428;
  t7443 = t3378*t7408;
  t7463 = -1.*t7395*t3467;
  t7464 = t7443 + t7463;
  t7473 = -1.*t4007*t7430;
  t7479 = t3878*t7464;
  t7497 = t7473 + t7479;
  t7517 = t3878*t7430;
  t7523 = t4007*t7464;
  t7525 = t7517 + t7523;
  t7593 = -1.*t255*t985*t1260;
  t7597 = -1.*t717*t985*t1667;
  t7598 = t7593 + t7597;
  t7621 = -1.*t2529*t2074;
  t7629 = t7598*t2363;
  t7632 = t7621 + t7629;
  t7641 = -1.*t717*t255*t985;
  t7655 = t985*t1260*t1667;
  t7659 = t7641 + t7655;
  t7670 = t3378*t7632;
  t7677 = t7659*t3467;
  t7680 = t7670 + t7677;
  t7684 = t3378*t7659;
  t7692 = -1.*t7632*t3467;
  t7697 = t7684 + t7692;
  t7705 = -1.*t4007*t7680;
  t7711 = t3878*t7697;
  t7719 = t7705 + t7711;
  t7726 = t3878*t7680;
  t7732 = t4007*t7697;
  t7734 = t7726 + t7732;
  t7788 = t717*t934;
  t7802 = -1.*t538*t985*t1260;
  t7805 = t7788 + t7802;
  t7813 = t7805*t1667;
  t7815 = t6349 + t7813;
  t7824 = t255*t7805;
  t7839 = -1.*t6150*t1667;
  t7851 = t7824 + t7839;
  t7858 = t3378*t7815*t2363;
  t7859 = t7851*t3467;
  t7862 = t7858 + t7859;
  t7873 = t3378*t7851;
  t7877 = -1.*t7815*t2363*t3467;
  t7887 = t7873 + t7877;
  t7899 = -1.*t4007*t7862;
  t7900 = t3878*t7887;
  t7906 = t7899 + t7900;
  t7912 = t3878*t7862;
  t7914 = t4007*t7887;
  t7916 = t7912 + t7914;
  t7945 = t717*t934*t985;
  t7948 = -1.*t538*t1260;
  t7962 = t7945 + t7948;
  t7977 = t255*t7962;
  t7978 = t1459*t1667;
  t7980 = t7977 + t7978;
  t8001 = -1.*t7962*t1667;
  t8005 = t1937 + t8001;
  t8015 = t3378*t7980*t2363;
  t8018 = t8005*t3467;
  t8019 = t8015 + t8018;
  t8027 = t3378*t8005;
  t8028 = -1.*t7980*t2363*t3467;
  t8029 = t8027 + t8028;
  t8035 = -1.*t4007*t8019;
  t8036 = t3878*t8029;
  t8037 = t8035 + t8036;
  t8044 = t3878*t8019;
  t8048 = t4007*t8029;
  t8053 = t8044 + t8048;
  t8092 = t2529*t717*t255;
  t8099 = -1.*t2529*t1260*t1667;
  t8102 = t8092 + t8099;
  t8125 = -1.*t2529*t255*t1260;
  t8128 = -1.*t2529*t717*t1667;
  t8129 = t8125 + t8128;
  t8141 = t3378*t8102*t2363;
  t8145 = t8129*t3467;
  t8148 = t8141 + t8145;
  t8164 = t3378*t8129;
  t8167 = -1.*t8102*t2363*t3467;
  t8177 = t8164 + t8167;
  t8183 = -1.*t4007*t8148;
  t8187 = t3878*t8177;
  t8188 = t8183 + t8187;
  t8190 = t3878*t8148;
  t8195 = t4007*t8177;
  t8199 = t8190 + t8195;
  t8299 = -1.*t255*t6051;
  t8309 = t8299 + t7839;
  t8313 = t3378*t6397*t2363;
  t8314 = t8309*t3467;
  t8316 = t8313 + t8314;
  t8318 = t3378*t8309;
  t8323 = -1.*t6397*t2363*t3467;
  t8325 = t8318 + t8323;
  t8332 = -1.*t4007*t8316;
  t8343 = t3878*t8325;
  t8346 = t8332 + t8343;
  t8354 = t3878*t8316;
  t8355 = t4007*t8325;
  t8358 = t8354 + t8355;
  t8401 = t538*t717;
  t8405 = t934*t985*t1260;
  t8407 = t8401 + t8405;
  t8421 = -1.*t8407*t1667;
  t8422 = t7977 + t8421;
  t8438 = -1.*t255*t8407;
  t8440 = t8438 + t8001;
  t8447 = t3378*t8422*t2363;
  t8454 = t8440*t3467;
  t8457 = t8447 + t8454;
  t8465 = t3378*t8440;
  t8470 = -1.*t8422*t2363*t3467;
  t8472 = t8465 + t8470;
  t8484 = -1.*t4007*t8457;
  t8485 = t3878*t8472;
  t8488 = t8484 + t8485;
  t8497 = t3878*t8457;
  t8501 = t4007*t8472;
  t8504 = t8497 + t8501;
  t8107 = 0.1305*t2074*t8102;
  t8114 = t8102*t2486;
  t8118 = t8102*t2363*t3518;
  t8133 = t8129*t3836;
  t8163 = t4113*t8148;
  t8181 = t4458*t8177;
  t8189 = t4939*t8188;
  t8200 = t5323*t8199;
  t8227 = t4914*t8188;
  t8232 = t4699*t8199;
  t8235 = t8227 + t8232;
  t8240 = -0.0016*t8235;
  t8248 = t4699*t8188;
  t8253 = -1.*t4914*t8199;
  t8260 = t8248 + t8253;
  t8264 = -0.2707*t8260;
  t6252 = t2074*t6225;
  t6259 = -1.*t538*t2529*t2363;
  t6260 = t6252 + t6259;
  t8576 = -1.*t3378*t4007*t6260;
  t8579 = -1.*t3878*t6260*t3467;
  t8583 = t8576 + t8579;
  t8588 = t3878*t3378*t6260;
  t8589 = -1.*t4007*t6260*t3467;
  t8590 = t8588 + t8589;
  t8542 = 0.135*t2074;
  t8547 = -0.049*t2363;
  t8548 = t8542 + t8547;
  t8552 = 0.049*t2074;
  t8553 = t8552 + t2632;
  t8631 = t255*t8407;
  t8632 = t7962*t1667;
  t8636 = t8631 + t8632;
  t8642 = t2074*t8636;
  t8643 = -1.*t2529*t934*t2363;
  t8651 = t8642 + t8643;
  t8660 = -1.*t3378*t4007*t8651;
  t8661 = -1.*t3878*t8651*t3467;
  t8664 = t8660 + t8661;
  t8669 = t3878*t3378*t8651;
  t8670 = -1.*t4007*t8651*t3467;
  t8674 = t8669 + t8670;
  t8718 = t2529*t255*t1260;
  t8730 = t2529*t717*t1667;
  t8733 = t8718 + t8730;
  t8740 = t2074*t8733;
  t8741 = t985*t2363;
  t8742 = t8740 + t8741;
  t8760 = -1.*t3378*t4007*t8742;
  t8761 = -1.*t3878*t8742*t3467;
  t8762 = t8760 + t8761;
  t8767 = t3878*t3378*t8742;
  t8772 = -1.*t4007*t8742*t3467;
  t8773 = t8767 + t8772;
  t8816 = -1.*t3378*t6313;
  t8817 = -1.*t6397*t3467;
  t8823 = t8816 + t8817;
  t8838 = t4007*t8823;
  t8840 = t8838 + t6642;
  t8849 = t3878*t8823;
  t8850 = -1.*t4007*t6575;
  t8852 = t8849 + t8850;
  t8806 = 0.049*t3378;
  t8808 = t8806 + t3476;
  t8811 = -0.09*t3378;
  t8813 = -0.049*t3467;
  t8814 = t8811 + t8813;
  t8887 = t2529*t2074*t934;
  t8895 = t8636*t2363;
  t8898 = t8887 + t8895;
  t8907 = -1.*t3378*t8898;
  t8912 = -1.*t8422*t3467;
  t8922 = t8907 + t8912;
  t8927 = t3378*t8422;
  t8933 = -1.*t8898*t3467;
  t8936 = t8927 + t8933;
  t8955 = t4007*t8922;
  t8956 = t3878*t8936;
  t8958 = t8955 + t8956;
  t8963 = t3878*t8922;
  t8964 = -1.*t4007*t8936;
  t8965 = t8963 + t8964;
  t8994 = -1.*t2074*t985;
  t9006 = t8733*t2363;
  t9007 = t8994 + t9006;
  t9011 = -1.*t3378*t9007;
  t9015 = -1.*t8102*t3467;
  t9016 = t9011 + t9015;
  t9021 = t3378*t8102;
  t9024 = -1.*t9007*t3467;
  t9031 = t9021 + t9024;
  t9036 = t4007*t9016;
  t9050 = t3878*t9031;
  t9055 = t9036 + t9050;
  t9062 = t3878*t9016;
  t9065 = -1.*t4007*t9031;
  t9066 = t9062 + t9065;
  t9134 = -1.*t3878*t6480;
  t9136 = t9134 + t8850;
  t6886 = t4699*t6643;
  t9098 = -0.21*t3878;
  t9111 = -0.049*t4007;
  t9117 = t9098 + t9111;
  t9120 = 0.049*t3878;
  t9125 = t9120 + t4084;
  t9168 = t3378*t8898;
  t9169 = t8422*t3467;
  t9170 = t9168 + t9169;
  t9181 = -1.*t4007*t9170;
  t9182 = t9181 + t8956;
  t9185 = -1.*t3878*t9170;
  t9188 = t9185 + t8964;
  t9208 = t3378*t9007;
  t9210 = t8102*t3467;
  t9211 = t9208 + t9210;
  t9221 = -1.*t4007*t9211;
  t9224 = t9221 + t9050;
  t9230 = -1.*t3878*t9211;
  t9232 = t9230 + t9065;
  t9143 = -1.*t4914*t6643;
  t6893 = -1.*t4914*t6808;
  t6894 = t6886 + t6893;
  t9260 = 0.0016*t4699;
  t9264 = t9260 + t5280;
  t9274 = -0.2707*t4699;
  t9276 = -0.0016*t4914;
  t9278 = t9274 + t9276;
  t9191 = -1.*t4914*t9182;
  t9306 = t3878*t9170;
  t9308 = t4007*t8936;
  t9310 = t9306 + t9308;
  t9196 = t4699*t9182;
  t9241 = -1.*t4914*t9224;
  t9329 = t3878*t9211;
  t9330 = t4007*t9031;
  t9331 = t9329 + t9330;
  t9253 = t4699*t9224;

  p_output1(0)=1.;
  p_output1(1)=0;
  p_output1(2)=0;
  p_output1(3)=0;
  p_output1(4)=1.;
  p_output1(5)=0;
  p_output1(6)=0;
  p_output1(7)=0;
  p_output1(8)=1.;
  p_output1(9)=t1666*t1804 + t2066*t2486 + t3175*t3518 + t3592*t3836 + t4113*t4261 + t4458*t4619 + t1459*t487 + t4939*t5001 + t5323*t5504 - 0.0016*(t4914*t5001 + t4699*t5504) - 0.2707*(t4699*t5001 - 1.*t4914*t5504) - 1.*t2529*t2645*t934 + 0.1305*(t2066*t2074 + t2363*t2529*t934);
  p_output1(10)=t2529*t2645*t538 + t487*t6051 + t1804*t6150 + t2486*t6225 + 0.1305*t6260 + t3518*t6313 + t3836*t6397 + t4113*t6480 + t4458*t6575 + t4939*t6643 + t5323*t6808 - 0.0016*(t4914*t6643 + t4699*t6808) - 0.2707*t6894;
  p_output1(11)=0;
  p_output1(12)=t1260*t2529*t487*t538 + t2486*t6952 + t3518*t7051 + t3836*t7097 + t4113*t7144 + t1804*t2529*t538*t717 + t4458*t7170 + t4939*t7195 + t5323*t7249 - 0.0016*(t4914*t7195 + t4699*t7249) - 0.2707*(t4699*t7195 - 1.*t4914*t7249) - 1.*t2645*t538*t985 + 0.1305*(t2074*t6952 + t2363*t538*t985);
  p_output1(13)=t2486*t7349 + t3518*t7395 + t3836*t7408 + t4113*t7430 + t4458*t7464 + t4939*t7497 + t5323*t7525 - 0.0016*(t4914*t7497 + t4699*t7525) - 0.2707*(t4699*t7497 - 1.*t4914*t7525) + t1260*t2529*t487*t934 + t1804*t2529*t717*t934 - 1.*t2645*t934*t985 + 0.1305*(t2074*t7349 + t2363*t934*t985);
  p_output1(14)=-1.*t2529*t2645 + t2486*t7598 + 0.1305*(t2363*t2529 + t2074*t7598) + t3518*t7632 + t3836*t7659 + t4113*t7680 + t4458*t7697 + t4939*t7719 + t5323*t7734 - 0.0016*(t4914*t7719 + t4699*t7734) - 0.2707*(t4699*t7719 - 1.*t4914*t7734) - 1.*t1260*t487*t985 - 1.*t1804*t717*t985;
  p_output1(15)=t487*t6150 + t1804*t7805 + 0.1305*t2074*t7815 + t2486*t7815 + t2363*t3518*t7815 + t3836*t7851 + t4113*t7862 + t4458*t7887 + t4939*t7906 + t5323*t7916 - 0.0016*(t4914*t7906 + t4699*t7916) - 0.2707*(t4699*t7906 - 1.*t4914*t7916);
  p_output1(16)=t1459*t1804 + t487*t7962 + 0.1305*t2074*t7980 + t2486*t7980 + t2363*t3518*t7980 + t3836*t8005 + t4113*t8019 + t4458*t8029 + t4939*t8037 + t5323*t8053 - 0.0016*(t4914*t8037 + t4699*t8053) - 0.2707*(t4699*t8037 - 1.*t4914*t8053);
  p_output1(17)=-1.*t1260*t1804*t2529 + t2529*t487*t717 + t8107 + t8114 + t8118 + t8133 + t8163 + t8181 + t8189 + t8200 + t8240 + t8264;
  p_output1(18)=0.135*t1667*t6051 - 0.135*t255*t6150 + 0.1305*t2074*t6397 + t2486*t6397 + t2363*t3518*t6397 + t3836*t8309 + t4113*t8316 + t4458*t8325 + t4939*t8346 + t5323*t8358 - 0.0016*(t4914*t8346 + t4699*t8358) - 0.2707*(t4699*t8346 - 1.*t4914*t8358);
  p_output1(19)=-0.135*t255*t7962 + 0.135*t1667*t8407 + 0.1305*t2074*t8422 + t2486*t8422 + t2363*t3518*t8422 + t3836*t8440 + t4113*t8457 + t4458*t8472 + t4939*t8488 + t5323*t8504 - 0.0016*(t4914*t8488 + t4699*t8504) - 0.2707*(t4699*t8488 - 1.*t4914*t8504);
  p_output1(20)=0.135*t1260*t1667*t2529 - 0.135*t2529*t255*t717 + t8107 + t8114 + t8118 + t8133 + t8163 + t8181 + t8189 + t8200 + t8240 + t8264;
  p_output1(21)=0.1305*(-1.*t2074*t2529*t538 - 1.*t2363*t6225) + t3518*t6260 + t3378*t4113*t6260 - 1.*t3467*t4458*t6260 + t2529*t538*t8548 + t6225*t8553 + t4939*t8583 + t5323*t8590 - 0.0016*(t4914*t8583 + t4699*t8590) - 0.2707*(t4699*t8583 - 1.*t4914*t8590);
  p_output1(22)=t8553*t8636 + 0.1305*(t2923 - 1.*t2363*t8636) + t3518*t8651 + t3378*t4113*t8651 - 1.*t3467*t4458*t8651 + t4939*t8664 + t5323*t8674 - 0.0016*(t4914*t8664 + t4699*t8674) - 0.2707*(t4699*t8664 - 1.*t4914*t8674) + t2529*t8548*t934;
  p_output1(23)=t8553*t8733 + t3518*t8742 + t3378*t4113*t8742 - 1.*t3467*t4458*t8742 + t4939*t8762 + t5323*t8773 - 0.0016*(t4914*t8762 + t4699*t8773) - 0.2707*(t4699*t8762 - 1.*t4914*t8773) - 1.*t8548*t985 + 0.1305*(-1.*t2363*t8733 + t2074*t985);
  p_output1(24)=t4113*t6575 + t6397*t8808 + t6313*t8814 + t4458*t8823 + t5323*t8840 + t4939*t8852 - 0.2707*(-1.*t4914*t8840 + t4699*t8852) - 0.0016*(t4699*t8840 + t4914*t8852);
  p_output1(25)=t8422*t8808 + t8814*t8898 + t4458*t8922 + t4113*t8936 + t5323*t8958 + t4939*t8965 - 0.2707*(-1.*t4914*t8958 + t4699*t8965) - 0.0016*(t4699*t8958 + t4914*t8965);
  p_output1(26)=t8102*t8808 + t8814*t9007 + t4458*t9016 + t4113*t9031 + t5323*t9055 + t4939*t9066 - 0.2707*(-1.*t4914*t9055 + t4699*t9066) - 0.0016*(t4699*t9055 + t4914*t9066);
  p_output1(27)=t5323*t6643 + t6480*t9117 + t6575*t9125 + t4939*t9136 - 0.0016*(t6886 + t4914*t9136) - 0.2707*(t4699*t9136 + t9143);
  p_output1(28)=t8936*t9125 + t9117*t9170 + t5323*t9182 + t4939*t9188 - 0.2707*(t4699*t9188 + t9191) - 0.0016*(t4914*t9188 + t9196);
  p_output1(29)=t9031*t9125 + t9117*t9211 + t5323*t9224 + t4939*t9232 - 0.2707*(t4699*t9232 + t9241) - 0.0016*(t4914*t9232 + t9253);
  p_output1(30)=-0.0016*t6894 - 0.2707*(-1.*t4699*t6808 + t9143) + t6643*t9264 + t6808*t9278;
  p_output1(31)=t9182*t9264 + t9278*t9310 - 0.2707*(t9191 - 1.*t4699*t9310) - 0.0016*(t9196 - 1.*t4914*t9310);
  p_output1(32)=t9224*t9264 + t9278*t9331 - 0.2707*(t9241 - 1.*t4699*t9331) - 0.0016*(t9253 - 1.*t4914*t9331);
  p_output1(33)=0;
  p_output1(34)=0;
  p_output1(35)=0;
  p_output1(36)=0;
  p_output1(37)=0;
  p_output1(38)=0;
  p_output1(39)=0;
  p_output1(40)=0;
  p_output1(41)=0;
  p_output1(42)=0;
  p_output1(43)=0;
  p_output1(44)=0;
  p_output1(45)=0;
  p_output1(46)=0;
  p_output1(47)=0;
  p_output1(48)=0;
  p_output1(49)=0;
  p_output1(50)=0;
  p_output1(51)=0;
  p_output1(52)=0;
  p_output1(53)=0;
  p_output1(54)=0;
  p_output1(55)=0;
  p_output1(56)=0;
  p_output1(57)=0;
  p_output1(58)=0;
  p_output1(59)=0;
}


       
Eigen::Matrix<double,3,20> Jp_knee_to_shin_left(const Eigen::Matrix<double,20,1> &var1)
//void Jp_knee_to_shin_left(Eigen::Matrix<double,3,20> &p_output1, const Eigen::Matrix<double,20,1> &var1)
{
  /* Call Subroutines */
  Eigen::Matrix<double,3,20>  p_output1;
  
  output1(p_output1, var1);

  return p_output1;
}



