/*
 * Automatically Generated from Mathematica.
 * Thu 23 May 2019 13:11:57 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "H_LeftToeBottom_to_RightToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE static inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }


/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,4,4> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t197;
  double t251;
  double t201;
  double t227;
  double t254;
  double t307;
  double t232;
  double t300;
  double t302;
  double t190;
  double t309;
  double t316;
  double t321;
  double t340;
  double t305;
  double t325;
  double t327;
  double t183;
  double t369;
  double t374;
  double t393;
  double t490;
  double t336;
  double t395;
  double t411;
  double t174;
  double t495;
  double t497;
  double t506;
  double t631;
  double t607;
  double t615;
  double t628;
  double t637;
  double t638;
  double t678;
  double t688;
  double t694;
  double t661;
  double t715;
  double t718;
  double t736;
  double t743;
  double t754;
  double t730;
  double t759;
  double t815;
  double t819;
  double t824;
  double t829;
  double t818;
  double t836;
  double t851;
  double t862;
  double t864;
  double t869;
  double t487;
  double t510;
  double t511;
  double t514;
  double t557;
  double t562;
  double t855;
  double t879;
  double t888;
  double t904;
  double t911;
  double t912;
  double t1017;
  double t1045;
  double t1050;
  double t1071;
  double t1073;
  double t1082;
  double t1051;
  double t1091;
  double t1125;
  double t1189;
  double t1205;
  double t1213;
  double t1163;
  double t1219;
  double t1230;
  double t1261;
  double t1274;
  double t1284;
  double t1247;
  double t1289;
  double t1325;
  double t1339;
  double t1349;
  double t1371;
  double t955;
  double t964;
  double t970;
  double t897;
  double t915;
  double t936;
  double t1334;
  double t1381;
  double t1395;
  double t1442;
  double t1471;
  double t1502;
  double t512;
  double t578;
  double t599;
  double t973;
  double t977;
  double t984;
  double t939;
  double t993;
  double t137;
  double t1613;
  double t1627;
  double t1630;
  double t1433;
  double t1527;
  double t1536;
  double t1551;
  double t1568;
  double t1592;
  double t1604;
  double t1643;
  double t1648;
  double t1691;
  double t1693;
  double t1711;
  double t1728;
  double t1744;
  double t1756;
  double t173;
  double t1843;
  double t1772;
  double t2120;
  double t2142;
  double t2113;
  double t2214;
  double t2217;
  double t2222;
  double t2122;
  double t2168;
  double t2189;
  double t2225;
  double t2111;
  double t2291;
  double t2306;
  double t2313;
  double t2200;
  double t2248;
  double t2265;
  double t2316;
  double t2104;
  double t2333;
  double t2336;
  double t2339;
  double t2270;
  double t2318;
  double t2330;
  double t2343;
  double t2091;
  double t2363;
  double t2376;
  double t2386;
  double t2332;
  double t2352;
  double t2355;
  double t2389;
  double t1005;
  double t2477;
  double t2481;
  double t2485;
  double t2455;
  double t2464;
  double t2471;
  double t2514;
  double t2524;
  double t2530;
  double t2475;
  double t2488;
  double t2491;
  double t2553;
  double t2581;
  double t2590;
  double t2505;
  double t2546;
  double t2548;
  double t2598;
  double t2604;
  double t2608;
  double t2551;
  double t2591;
  double t2596;
  double t1777;
  double t1800;
  double t1818;
  double t2723;
  double t2733;
  double t2753;
  double t2705;
  double t2712;
  double t2717;
  double t2778;
  double t2783;
  double t2794;
  double t2720;
  double t2757;
  double t2767;
  double t2826;
  double t2829;
  double t2831;
  double t2773;
  double t2799;
  double t2806;
  double t1849;
  double t1856;
  double t1861;
  double t2361;
  double t2393;
  double t2403;
  double t2409;
  double t2410;
  double t2411;
  double t2416;
  double t2421;
  double t2446;
  double t1878;
  double t1880;
  double t1883;
  double t2825;
  double t2841;
  double t2848;
  double t2868;
  double t2881;
  double t2885;
  double t2904;
  double t2940;
  double t2941;
  double t1908;
  double t1913;
  double t1917;
  double t2597;
  double t2614;
  double t2620;
  double t2621;
  double t2628;
  double t2637;
  double t2639;
  double t2647;
  double t2673;
  double t1929;
  double t1933;
  double t1968;
  double t1978;
  double t2021;
  double t2024;
  double t2029;
  double t2041;
  double t2042;
  double t2048;
  double t3023;
  double t3026;
  double t3034;
  double t3101;
  double t3102;
  double t3104;
  double t3077;
  double t3081;
  double t3084;
  double t3226;
  double t3228;
  double t3318;
  double t3321;
  double t3389;
  double t3391;
  double t3450;
  double t3471;
  double t3501;
  double t3516;
  double t3205;
  double t3208;
  double t3210;
  double t3213;
  double t3216;
  double t3249;
  double t3274;
  double t3284;
  double t3302;
  double t3308;
  double t3309;
  double t3327;
  double t3333;
  double t3351;
  double t3374;
  double t3385;
  double t3386;
  double t3395;
  double t3410;
  double t3420;
  double t3440;
  double t3441;
  double t3445;
  double t3474;
  double t3479;
  double t3480;
  double t3484;
  double t3486;
  double t3487;
  double t3529;
  double t3536;
  double t3541;
  double t3563;
  double t3569;
  double t3570;
  double t3854;
  double t3863;
  double t3917;
  double t3918;
  double t3974;
  double t3982;
  double t4030;
  double t4035;
  double t4079;
  double t4086;
  double t3828;
  double t3834;
  double t3920;
  double t3944;
  double t3955;
  double t3867;
  double t3869;
  double t3879;
  double t3960;
  double t3966;
  double t3967;
  double t3990;
  double t3992;
  double t3993;
  double t4014;
  double t4015;
  double t4022;
  double t4051;
  double t4055;
  double t4060;
  double t4066;
  double t4072;
  double t4076;
  double t4091;
  double t4093;
  double t4101;
  double t4123;
  double t4125;
  double t4130;
  double t3812;
  double t3814;
  double t3823;
  double t3825;
  double t3837;
  double t3838;
  double t3846;
  double t3850;
  double t3885;
  double t3890;
  double t3907;
  double t3910;
  double t3916;
  double t3956;
  double t3969;
  double t4003;
  double t4029;
  double t4064;
  double t4078;
  double t4121;
  double t4131;
  double t4144;
  double t4147;
  double t4148;
  double t4156;
  double t4159;
  double t4163;
  double t4184;
  double t4186;
  double t4189;
  double t4196;
  double t4201;
  double t4202;
  double t4205;
  double t4208;
  double t4209;
  double t4212;
  double t4238;
  double t3178;
  double t3182;
  double t3220;
  double t3301;
  double t3311;
  double t3353;
  double t3387;
  double t3435;
  double t3449;
  double t3483;
  double t3493;
  double t3546;
  double t3573;
  double t3589;
  double t3593;
  double t3597;
  double t3738;
  double t3744;
  double t3775;
  double t3781;
  double t3785;
  double t3787;
  double t3789;
  double t3797;
  double t3799;
  double t3802;
  double t3804;
  double t3807;
  double t3808;
  double t3810;
  double t3600;
  double t3604;
  double t3606;
  double t3609;
  double t3617;
  double t3627;
  double t3631;
  double t3634;
  double t3638;
  double t3639;
  double t3648;
  double t3649;
  double t3655;
  double t3675;
  double t3679;
  double t3680;
  double t3682;
  double t3713;
  double t4296;
  double t4313;
  double t4329;
  double t4331;
  double t4335;
  double t4339;
  double t4346;
  double t4366;
  double t4368;
  double t4378;
  double t4379;
  double t4391;
  double t4392;
  double t4400;
  double t4405;
  double t4409;
  double t4149;
  double t4246;
  double t4265;
  double t4449;
  double t4456;
  double t4459;
  double t4278;
  double t4282;
  double t4284;
  t197 = Cos(var1[1]);
  t251 = Cos(var1[3]);
  t201 = Cos(var1[2]);
  t227 = Sin(var1[3]);
  t254 = Sin(var1[2]);
  t307 = Cos(var1[4]);
  t232 = -1.*t197*t201*t227;
  t300 = -1.*t251*t197*t254;
  t302 = t232 + t300;
  t190 = Sin(var1[4]);
  t309 = t251*t197*t201;
  t316 = -1.*t197*t227*t254;
  t321 = t309 + t316;
  t340 = Cos(var1[5]);
  t305 = t190*t302;
  t325 = t307*t321;
  t327 = t305 + t325;
  t183 = Sin(var1[5]);
  t369 = t307*t302;
  t374 = -1.*t190*t321;
  t393 = t369 + t374;
  t490 = Cos(var1[6]);
  t336 = -1.*t183*t327;
  t395 = t340*t393;
  t411 = t336 + t395;
  t174 = Sin(var1[6]);
  t495 = t340*t327;
  t497 = t183*t393;
  t506 = t495 + t497;
  t631 = Sin(var1[0]);
  t607 = Cos(var1[0]);
  t615 = Sin(var1[1]);
  t628 = t607*t201*t615;
  t637 = -1.*t631*t254;
  t638 = t628 + t637;
  t678 = -1.*t201*t631;
  t688 = -1.*t607*t615*t254;
  t694 = t678 + t688;
  t661 = -1.*t227*t638;
  t715 = t251*t694;
  t718 = t661 + t715;
  t736 = t251*t638;
  t743 = t227*t694;
  t754 = t736 + t743;
  t730 = t190*t718;
  t759 = t307*t754;
  t815 = t730 + t759;
  t819 = t307*t718;
  t824 = -1.*t190*t754;
  t829 = t819 + t824;
  t818 = -1.*t183*t815;
  t836 = t340*t829;
  t851 = t818 + t836;
  t862 = t340*t815;
  t864 = t183*t829;
  t869 = t862 + t864;
  t487 = t174*t411;
  t510 = t490*t506;
  t511 = t487 + t510;
  t514 = t490*t411;
  t557 = -1.*t174*t506;
  t562 = t514 + t557;
  t855 = t174*t851;
  t879 = t490*t869;
  t888 = t855 + t879;
  t904 = t490*t851;
  t911 = -1.*t174*t869;
  t912 = t904 + t911;
  t1017 = t201*t631*t615;
  t1045 = t607*t254;
  t1050 = t1017 + t1045;
  t1071 = t607*t201;
  t1073 = -1.*t631*t615*t254;
  t1082 = t1071 + t1073;
  t1051 = -1.*t227*t1050;
  t1091 = t251*t1082;
  t1125 = t1051 + t1091;
  t1189 = t251*t1050;
  t1205 = t227*t1082;
  t1213 = t1189 + t1205;
  t1163 = t190*t1125;
  t1219 = t307*t1213;
  t1230 = t1163 + t1219;
  t1261 = t307*t1125;
  t1274 = -1.*t190*t1213;
  t1284 = t1261 + t1274;
  t1247 = -1.*t183*t1230;
  t1289 = t340*t1284;
  t1325 = t1247 + t1289;
  t1339 = t340*t1230;
  t1349 = t183*t1284;
  t1371 = t1339 + t1349;
  t955 = -0.766044*t511;
  t964 = 0.642788*t562;
  t970 = t955 + t964;
  t897 = -0.766044*t888;
  t915 = 0.642788*t912;
  t936 = t897 + t915;
  t1334 = t174*t1325;
  t1381 = t490*t1371;
  t1395 = t1334 + t1381;
  t1442 = t490*t1325;
  t1471 = -1.*t174*t1371;
  t1502 = t1442 + t1471;
  t512 = 0.642788*t511;
  t578 = 0.766044*t562;
  t599 = t512 + t578;
  t973 = 0.642788*t888;
  t977 = 0.766044*t912;
  t984 = t973 + t977;
  t939 = t599*t936;
  t993 = -1.*t970*t984;
  t137 = Cos(var1[8]);
  t1613 = -0.766044*t1395;
  t1627 = 0.642788*t1502;
  t1630 = t1613 + t1627;
  t1433 = 0.642788*t1395;
  t1527 = 0.766044*t1502;
  t1536 = t1433 + t1527;
  t1551 = t607*t197*t970;
  t1568 = t615*t936;
  t1592 = t1551 + t1568;
  t1604 = -1.*t1536*t1592;
  t1643 = t607*t197*t599;
  t1648 = t615*t984;
  t1691 = t1643 + t1648;
  t1693 = t1630*t1691;
  t1711 = t939 + t993;
  t1728 = -1.*t197*t631*t1711;
  t1744 = 0. + t1604 + t1693 + t1728;
  t1756 = 1/t1744;
  t173 = Sin(var1[7]);
  t1843 = Sin(var1[8]);
  t1772 = Cos(var1[7]);
  t2120 = Cos(var1[9]);
  t2142 = Sin(var1[9]);
  t2113 = Cos(var1[10]);
  t2214 = t1772*t2120;
  t2217 = -1.*t173*t1843*t2142;
  t2222 = t2214 + t2217;
  t2122 = t2120*t173*t1843;
  t2168 = t1772*t2142;
  t2189 = t2122 + t2168;
  t2225 = Sin(var1[10]);
  t2111 = Cos(var1[11]);
  t2291 = t2113*t2222;
  t2306 = -1.*t2189*t2225;
  t2313 = t2291 + t2306;
  t2200 = t2113*t2189;
  t2248 = t2222*t2225;
  t2265 = t2200 + t2248;
  t2316 = Sin(var1[11]);
  t2104 = Cos(var1[12]);
  t2333 = t2111*t2313;
  t2336 = -1.*t2265*t2316;
  t2339 = t2333 + t2336;
  t2270 = t2111*t2265;
  t2318 = t2313*t2316;
  t2330 = t2270 + t2318;
  t2343 = Sin(var1[12]);
  t2091 = Cos(var1[13]);
  t2363 = t2104*t2339;
  t2376 = -1.*t2330*t2343;
  t2386 = t2363 + t2376;
  t2332 = t2104*t2330;
  t2352 = t2339*t2343;
  t2355 = t2332 + t2352;
  t2389 = Sin(var1[13]);
  t1005 = 0. + t939 + t993;
  t2477 = -1.*t2120*t173;
  t2481 = -1.*t1772*t1843*t2142;
  t2485 = t2477 + t2481;
  t2455 = t1772*t2120*t1843;
  t2464 = -1.*t173*t2142;
  t2471 = t2455 + t2464;
  t2514 = t2113*t2485;
  t2524 = -1.*t2471*t2225;
  t2530 = t2514 + t2524;
  t2475 = t2113*t2471;
  t2488 = t2485*t2225;
  t2491 = t2475 + t2488;
  t2553 = t2111*t2530;
  t2581 = -1.*t2491*t2316;
  t2590 = t2553 + t2581;
  t2505 = t2111*t2491;
  t2546 = t2530*t2316;
  t2548 = t2505 + t2546;
  t2598 = t2104*t2590;
  t2604 = -1.*t2548*t2343;
  t2608 = t2598 + t2604;
  t2551 = t2104*t2548;
  t2591 = t2590*t2343;
  t2596 = t2551 + t2591;
  t1777 = -1.*t599*t1630;
  t1800 = t970*t1536;
  t1818 = 0. + t1777 + t1800;
  t2723 = -1.*t137*t2113*t2142;
  t2733 = -1.*t137*t2120*t2225;
  t2753 = t2723 + t2733;
  t2705 = t137*t2120*t2113;
  t2712 = -1.*t137*t2142*t2225;
  t2717 = t2705 + t2712;
  t2778 = t2111*t2753;
  t2783 = -1.*t2717*t2316;
  t2794 = t2778 + t2783;
  t2720 = t2111*t2717;
  t2757 = t2753*t2316;
  t2767 = t2720 + t2757;
  t2826 = t2104*t2794;
  t2829 = -1.*t2767*t2343;
  t2831 = t2826 + t2829;
  t2773 = t2104*t2767;
  t2799 = t2794*t2343;
  t2806 = t2773 + t2799;
  t1849 = t984*t1630;
  t1856 = -1.*t936*t1536;
  t1861 = 0. + t1849 + t1856;
  t2361 = t2091*t2355;
  t2393 = t2386*t2389;
  t2403 = t2361 + t2393;
  t2409 = 0.642788*t2403;
  t2410 = t2091*t2386;
  t2411 = -1.*t2355*t2389;
  t2416 = t2410 + t2411;
  t2421 = 0.766044*t2416;
  t2446 = t2409 + t2421;
  t1878 = -1.*t607*t197*t970;
  t1880 = -1.*t615*t936;
  t1883 = 0. + t1878 + t1880;
  t2825 = t2091*t2806;
  t2841 = t2831*t2389;
  t2848 = t2825 + t2841;
  t2868 = 0.642788*t2848;
  t2881 = t2091*t2831;
  t2885 = -1.*t2806*t2389;
  t2904 = t2881 + t2885;
  t2940 = 0.766044*t2904;
  t2941 = t2868 + t2940;
  t1908 = -1.*t197*t631*t936;
  t1913 = t607*t197*t1630;
  t1917 = 0. + t1908 + t1913;
  t2597 = t2091*t2596;
  t2614 = t2608*t2389;
  t2620 = t2597 + t2614;
  t2621 = 0.642788*t2620;
  t2628 = t2091*t2608;
  t2637 = -1.*t2596*t2389;
  t2639 = t2628 + t2637;
  t2647 = 0.766044*t2639;
  t2673 = t2621 + t2647;
  t1929 = t197*t631*t970;
  t1933 = t615*t1630;
  t1968 = 0. + t1929 + t1933;
  t1978 = 0. + t1643 + t1648;
  t2021 = t197*t631*t984;
  t2024 = -1.*t607*t197*t1536;
  t2029 = 0. + t2021 + t2024;
  t2041 = -1.*t197*t631*t599;
  t2042 = -1.*t615*t1536;
  t2048 = 0. + t2041 + t2042;
  t3023 = -0.766044*t2403;
  t3026 = 0.642788*t2416;
  t3034 = t3023 + t3026;
  t3101 = -0.766044*t2848;
  t3102 = 0.642788*t2904;
  t3104 = t3101 + t3102;
  t3077 = -0.766044*t2620;
  t3081 = 0.642788*t2639;
  t3084 = t3077 + t3081;
  t3226 = -1.*t2120;
  t3228 = 1. + t3226;
  t3318 = -1.*t2113;
  t3321 = 1. + t3318;
  t3389 = -1.*t2111;
  t3391 = 1. + t3389;
  t3450 = -1.*t2104;
  t3471 = 1. + t3450;
  t3501 = -1.*t2091;
  t3516 = 1. + t3501;
  t3205 = -1.*t137;
  t3208 = 1. + t3205;
  t3210 = -0.135*t3208;
  t3213 = 0.049*t1843;
  t3216 = 0. + t3210 + t3213;
  t3249 = -0.049*t3228;
  t3274 = -0.09*t2142;
  t3284 = 0. + t3249 + t3274;
  t3302 = -0.09*t3228;
  t3308 = 0.049*t2142;
  t3309 = 0. + t3302 + t3308;
  t3327 = -0.049*t3321;
  t3333 = -0.21*t2225;
  t3351 = 0. + t3327 + t3333;
  t3374 = -0.21*t3321;
  t3385 = 0.049*t2225;
  t3386 = 0. + t3374 + t3385;
  t3395 = -0.0016*t3391;
  t3410 = -0.2707*t2316;
  t3420 = 0. + t3395 + t3410;
  t3440 = -0.2707*t3391;
  t3441 = 0.0016*t2316;
  t3445 = 0. + t3440 + t3441;
  t3474 = 0.0184*t3471;
  t3479 = -0.7055*t2343;
  t3480 = 0. + t3474 + t3479;
  t3484 = -0.7055*t3471;
  t3486 = -0.0184*t2343;
  t3487 = 0. + t3484 + t3486;
  t3529 = -0.0216*t3516;
  t3536 = -1.1135*t2389;
  t3541 = 0. + t3529 + t3536;
  t3563 = -1.1135*t3516;
  t3569 = 0.0216*t2389;
  t3570 = 0. + t3563 + t3569;
  t3854 = -1.*t201;
  t3863 = 1. + t3854;
  t3917 = -1.*t251;
  t3918 = 1. + t3917;
  t3974 = -1.*t307;
  t3982 = 1. + t3974;
  t4030 = -1.*t340;
  t4035 = 1. + t4030;
  t4079 = -1.*t490;
  t4086 = 1. + t4079;
  t3828 = -1.*t197;
  t3834 = 1. + t3828;
  t3920 = -0.049*t3918;
  t3944 = -0.21*t227;
  t3955 = 0. + t3920 + t3944;
  t3867 = -0.049*t3863;
  t3869 = -0.09*t254;
  t3879 = 0. + t3867 + t3869;
  t3960 = -0.21*t3918;
  t3966 = 0.049*t227;
  t3967 = 0. + t3960 + t3966;
  t3990 = -0.2707*t3982;
  t3992 = 0.0016*t190;
  t3993 = 0. + t3990 + t3992;
  t4014 = -0.0016*t3982;
  t4015 = -0.2707*t190;
  t4022 = 0. + t4014 + t4015;
  t4051 = 0.0184*t4035;
  t4055 = -0.7055*t183;
  t4060 = 0. + t4051 + t4055;
  t4066 = -0.7055*t4035;
  t4072 = -0.0184*t183;
  t4076 = 0. + t4066 + t4072;
  t4091 = -1.1135*t4086;
  t4093 = 0.0216*t174;
  t4101 = 0. + t4091 + t4093;
  t4123 = -0.0216*t4086;
  t4125 = -1.1135*t174;
  t4130 = 0. + t4123 + t4125;
  t3812 = -1.*t607;
  t3814 = 1. + t3812;
  t3823 = 0.135*t3814;
  t3825 = 0.1305*t607*t197;
  t3837 = 0.135*t3834;
  t3838 = 0.049*t615;
  t3846 = 0. + t3837 + t3838;
  t3850 = t607*t3846;
  t3885 = t607*t615*t3879;
  t3890 = -0.09*t3863;
  t3907 = 0.049*t254;
  t3910 = 0. + t3890 + t3907;
  t3916 = -1.*t631*t3910;
  t3956 = t3955*t638;
  t3969 = t3967*t694;
  t4003 = t3993*t718;
  t4029 = t4022*t754;
  t4064 = t4060*t815;
  t4078 = t4076*t829;
  t4121 = t4101*t851;
  t4131 = t4130*t869;
  t4144 = 0.0306*t888;
  t4147 = -1.1312*t912;
  t4148 = 0. + t3823 + t3825 + t3850 + t3885 + t3916 + t3956 + t3969 + t4003 + t4029 + t4064 + t4078 + t4121 + t4131 + t4144 + t4147;
  t4156 = -0.049*t3834;
  t4159 = t197*t201*t3955;
  t4163 = 0.004500000000000004*t615;
  t4184 = t197*t3879;
  t4186 = -1.*t197*t3967*t254;
  t4189 = t3993*t302;
  t4196 = t4022*t321;
  t4201 = t4060*t327;
  t4202 = t4076*t393;
  t4205 = t4101*t411;
  t4208 = t4130*t506;
  t4209 = 0.0306*t511;
  t4212 = -1.1312*t562;
  t4238 = 0. + t4156 + t4159 + t4163 + t4184 + t4186 + t4189 + t4196 + t4201 + t4202 + t4205 + t4208 + t4209 + t4212;
  t3178 = 0.135*t173;
  t3182 = -0.1305*t137*t173;
  t3220 = t173*t3216;
  t3301 = t173*t1843*t3284;
  t3311 = t1772*t3309;
  t3353 = t2189*t3351;
  t3387 = t2222*t3386;
  t3435 = t2265*t3420;
  t3449 = t2313*t3445;
  t3483 = t2330*t3480;
  t3493 = t2339*t3487;
  t3546 = t2355*t3541;
  t3573 = t2386*t3570;
  t3589 = 0.0306*t2403;
  t3593 = -1.1312*t2416;
  t3597 = 0. + t3178 + t3182 + t3220 + t3301 + t3311 + t3353 + t3387 + t3435 + t3449 + t3483 + t3493 + t3546 + t3573 + t3589 + t3593;
  t3738 = -0.049*t3208;
  t3744 = -0.004500000000000004*t1843;
  t3775 = t137*t3284;
  t3781 = t137*t2120*t3351;
  t3785 = -1.*t137*t2142*t3386;
  t3787 = t2717*t3420;
  t3789 = t2753*t3445;
  t3797 = t2767*t3480;
  t3799 = t2794*t3487;
  t3802 = t2806*t3541;
  t3804 = t2831*t3570;
  t3807 = 0.0306*t2848;
  t3808 = -1.1312*t2904;
  t3810 = 0. + t3738 + t3744 + t3775 + t3781 + t3785 + t3787 + t3789 + t3797 + t3799 + t3802 + t3804 + t3807 + t3808;
  t3600 = -1.*t1772;
  t3604 = 1. + t3600;
  t3606 = -0.135*t3604;
  t3609 = -0.1305*t1772*t137;
  t3617 = t1772*t3216;
  t3627 = t1772*t1843*t3284;
  t3631 = -1.*t173*t3309;
  t3634 = t2471*t3351;
  t3638 = t2485*t3386;
  t3639 = t2491*t3420;
  t3648 = t2530*t3445;
  t3649 = t2548*t3480;
  t3655 = t2590*t3487;
  t3675 = t2596*t3541;
  t3679 = t2608*t3570;
  t3680 = 0.0306*t2620;
  t3682 = -1.1312*t2639;
  t3713 = 0. + t3606 + t3609 + t3617 + t3627 + t3631 + t3634 + t3638 + t3639 + t3648 + t3649 + t3655 + t3675 + t3679 + t3680 + t3682;
  t4296 = -0.135*t631;
  t4313 = 0.1305*t197*t631;
  t4329 = t631*t3846;
  t4331 = t631*t615*t3879;
  t4335 = t607*t3910;
  t4339 = t3955*t1050;
  t4346 = t3967*t1082;
  t4366 = t3993*t1125;
  t4368 = t4022*t1213;
  t4378 = t4060*t1230;
  t4379 = t4076*t1284;
  t4391 = t4101*t1325;
  t4392 = t4130*t1371;
  t4400 = 0.0306*t1395;
  t4405 = -1.1312*t1502;
  t4409 = 0. + t4296 + t4313 + t4329 + t4331 + t4335 + t4339 + t4346 + t4366 + t4368 + t4378 + t4379 + t4391 + t4392 + t4400 + t4405;
  t4149 = t970*t4148;
  t4246 = -1.*t4238*t936;
  t4265 = t4149 + t4246;
  t4449 = t607*t197*t4238;
  t4456 = t615*t4148;
  t4459 = t4449 + t4456;
  t4278 = t599*t4148;
  t4282 = -1.*t4238*t984;
  t4284 = t4278 + t4282;

  p_output1(0)=0. - 1.*t1005*t137*t173*t1756 - 1.*t137*t1756*t1772*t1818 + t1756*t1843*t1861;
  p_output1(1)=0. - 1.*t137*t173*t1756*t1883 + t1756*t1843*t1917 - 1.*t137*t1756*t1772*t1968;
  p_output1(2)=0. - 1.*t137*t173*t1756*t1978 + t1756*t1843*t2029 - 1.*t137*t1756*t1772*t2048;
  p_output1(3)=0.;
  p_output1(4)=0. + t1005*t1756*t2446 + t1756*t1818*t2673 + t1756*t1861*t2941;
  p_output1(5)=0. + t1756*t1883*t2446 + t1756*t1968*t2673 + t1756*t1917*t2941;
  p_output1(6)=0. + t1756*t1978*t2446 + t1756*t2048*t2673 + t1756*t2029*t2941;
  p_output1(7)=0.;
  p_output1(8)=0. + t1005*t1756*t3034 + t1756*t1818*t3084 + t1756*t1861*t3104;
  p_output1(9)=0. + t1756*t1883*t3034 + t1756*t1968*t3084 + t1756*t1917*t3104;
  p_output1(10)=0. + t1756*t1978*t3034 + t1756*t2048*t3084 + t1756*t2029*t3104;
  p_output1(11)=0.;
  p_output1(12)=t1005*t1756*t3597 + t1756*t1818*t3713 + t1756*t1861*t3810 + t1756*(-1.*t1536*t4265 + t1630*t4284 - 1.*t1711*t4409);
  p_output1(13)=t1756*t1883*t3597 + t1756*t1968*t3713 + t1756*t1917*t3810 + t1756*(t1592*t4409 - 1.*t1630*t4459 - 1.*t197*t4265*t631);
  p_output1(14)=t1756*t1978*t3597 + t1756*t2048*t3713 + t1756*t2029*t3810 + t1756*(-1.*t1691*t4409 + t1536*t4459 + t197*t4284*t631);
  p_output1(15)=0. + (t1604 + t1693 + t1728)*t1756;
}


       
Eigen::Matrix<double,4,4> H_LeftToeBottom_to_RightToeBottom(const Eigen::Matrix<double,14,1> &var1)
//void H_LeftToeBottom_to_RightToeBottom(Eigen::Matrix<double,4,4> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  /* Call Subroutines */
  Eigen::Matrix<double,4,4>  p_output1;
  
  output1(p_output1, var1);

  return p_output1;
}



