/*
 * Automatically Generated from Mathematica.
 * Thu 23 May 2019 13:11:51 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "H_RightToeBottom_to_LeftToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE static inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }


/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,4,4> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t478;
  double t670;
  double t706;
  double t486;
  double t728;
  double t435;
  double t1131;
  double t1139;
  double t1152;
  double t684;
  double t763;
  double t802;
  double t1168;
  double t428;
  double t1367;
  double t1389;
  double t1426;
  double t834;
  double t1248;
  double t1341;
  double t1510;
  double t196;
  double t1612;
  double t1620;
  double t1645;
  double t1355;
  double t1544;
  double t1566;
  double t1703;
  double t2234;
  double t2011;
  double t2025;
  double t2293;
  double t2383;
  double t2474;
  double t2133;
  double t2246;
  double t2256;
  double t2710;
  double t2719;
  double t2782;
  double t2281;
  double t2598;
  double t2650;
  double t2883;
  double t2905;
  double t2931;
  double t2664;
  double t2785;
  double t2846;
  double t3094;
  double t3126;
  double t3130;
  double t2870;
  double t3005;
  double t3017;
  double t1585;
  double t1746;
  double t1751;
  double t1786;
  double t1816;
  double t1873;
  double t3050;
  double t3139;
  double t3149;
  double t3163;
  double t3192;
  double t3240;
  double t3402;
  double t3429;
  double t3475;
  double t3370;
  double t3376;
  double t3398;
  double t3798;
  double t3833;
  double t3866;
  double t3590;
  double t3618;
  double t3642;
  double t3948;
  double t3983;
  double t3994;
  double t3752;
  double t3876;
  double t3887;
  double t4180;
  double t4187;
  double t4207;
  double t3922;
  double t4048;
  double t4062;
  double t4272;
  double t4297;
  double t4301;
  double t4152;
  double t4226;
  double t4263;
  double t3157;
  double t3271;
  double t3338;
  double t1773;
  double t1891;
  double t1957;
  double t4270;
  double t4311;
  double t4328;
  double t4371;
  double t4399;
  double t4445;
  double t4355;
  double t4484;
  double t4485;
  double t4516;
  double t4524;
  double t4529;
  double t126;
  double t4635;
  double t4637;
  double t3515;
  double t4486;
  double t4494;
  double t4496;
  double t4497;
  double t4578;
  double t4614;
  double t4623;
  double t4644;
  double t4700;
  double t4716;
  double t4777;
  double t88;
  double t4818;
  double t4954;
  double t4863;
  double t4932;
  double t4941;
  double t5449;
  double t5418;
  double t5426;
  double t5451;
  double t5481;
  double t5448;
  double t5454;
  double t5468;
  double t5413;
  double t5491;
  double t5496;
  double t5533;
  double t5580;
  double t5475;
  double t5547;
  double t5555;
  double t5409;
  double t5581;
  double t5610;
  double t5626;
  double t5686;
  double t5561;
  double t5645;
  double t5662;
  double t5405;
  double t5687;
  double t5702;
  double t5714;
  double t3352;
  double t3482;
  double t3504;
  double t5776;
  double t5794;
  double t5801;
  double t5808;
  double t5811;
  double t5827;
  double t5804;
  double t5842;
  double t5845;
  double t5860;
  double t5862;
  double t5863;
  double t5852;
  double t5865;
  double t5868;
  double t5870;
  double t5872;
  double t5876;
  double t5869;
  double t5895;
  double t5897;
  double t5966;
  double t6007;
  double t6010;
  double t4810;
  double t6100;
  double t6105;
  double t6107;
  double t6117;
  double t6122;
  double t6132;
  double t6108;
  double t6134;
  double t6153;
  double t6159;
  double t6160;
  double t6166;
  double t6154;
  double t6168;
  double t6171;
  double t6181;
  double t6184;
  double t6186;
  double t6174;
  double t6192;
  double t6195;
  double t6198;
  double t6216;
  double t6219;
  double t5166;
  double t5177;
  double t5179;
  double t5684;
  double t5718;
  double t5719;
  double t5722;
  double t5736;
  double t5744;
  double t5746;
  double t5747;
  double t5756;
  double t4979;
  double t5007;
  double t5032;
  double t5958;
  double t6028;
  double t6032;
  double t6034;
  double t6056;
  double t6061;
  double t6078;
  double t6079;
  double t6084;
  double t5050;
  double t5051;
  double t5071;
  double t6196;
  double t6253;
  double t6257;
  double t6258;
  double t6259;
  double t6265;
  double t6268;
  double t6271;
  double t6272;
  double t5342;
  double t5360;
  double t5385;
  double t5229;
  double t5243;
  double t5248;
  double t5322;
  double t6335;
  double t6336;
  double t6353;
  double t6363;
  double t6379;
  double t6387;
  double t6396;
  double t6400;
  double t6401;
  double t6506;
  double t6512;
  double t6567;
  double t6572;
  double t6626;
  double t6627;
  double t6667;
  double t6669;
  double t6713;
  double t6733;
  double t6448;
  double t6460;
  double t6524;
  double t6525;
  double t6526;
  double t6581;
  double t6588;
  double t6601;
  double t6613;
  double t6615;
  double t6617;
  double t6628;
  double t6636;
  double t6638;
  double t6646;
  double t6647;
  double t6656;
  double t6675;
  double t6687;
  double t6690;
  double t6694;
  double t6695;
  double t6707;
  double t6748;
  double t6752;
  double t6774;
  double t6780;
  double t6783;
  double t6786;
  double t6435;
  double t6440;
  double t6445;
  double t6447;
  double t6463;
  double t6466;
  double t6487;
  double t6504;
  double t6528;
  double t6532;
  double t6534;
  double t6541;
  double t6542;
  double t6603;
  double t6620;
  double t6642;
  double t6661;
  double t6691;
  double t6710;
  double t6778;
  double t6790;
  double t6793;
  double t6799;
  double t6800;
  double t6814;
  double t6820;
  double t6822;
  double t6830;
  double t6833;
  double t6835;
  double t6845;
  double t6855;
  double t6859;
  double t6862;
  double t6867;
  double t6868;
  double t6874;
  double t6875;
  double t7020;
  double t7025;
  double t7084;
  double t7085;
  double t7125;
  double t7127;
  double t7155;
  double t7159;
  double t7004;
  double t7005;
  double t7048;
  double t7054;
  double t7059;
  double t7066;
  double t7068;
  double t7037;
  double t7038;
  double t7040;
  double t7075;
  double t7078;
  double t7079;
  double t7086;
  double t7091;
  double t7093;
  double t7111;
  double t7116;
  double t7118;
  double t7131;
  double t7132;
  double t7136;
  double t7139;
  double t7140;
  double t7149;
  double t7161;
  double t7166;
  double t7167;
  double t7169;
  double t7178;
  double t7181;
  double t7213;
  double t7216;
  double t7218;
  double t7231;
  double t7232;
  double t7233;
  double t6933;
  double t6937;
  double t6951;
  double t6952;
  double t6957;
  double t6962;
  double t6964;
  double t6965;
  double t6971;
  double t6972;
  double t6976;
  double t6977;
  double t6986;
  double t6992;
  double t6995;
  double t6996;
  double t6811;
  double t6876;
  double t6877;
  double t7014;
  double t7041;
  double t7043;
  double t7073;
  double t7080;
  double t7101;
  double t7119;
  double t7138;
  double t7151;
  double t7168;
  double t7188;
  double t7190;
  double t7191;
  double t7192;
  double t7197;
  double t7201;
  double t7203;
  double t7204;
  double t7220;
  double t7230;
  double t7235;
  double t7239;
  double t7240;
  double t7244;
  double t7246;
  double t7248;
  double t7250;
  double t7251;
  double t7253;
  double t7258;
  double t7261;
  double t7262;
  double t7265;
  double t7267;
  double t7274;
  double t7276;
  double t7279;
  double t7283;
  double t7284;
  double t7286;
  double t7288;
  double t7289;
  double t7291;
  double t7292;
  double t7293;
  double t7294;
  double t7295;
  double t7296;
  double t7301;
  double t7302;
  double t7307;
  double t6885;
  double t6902;
  double t6926;
  t478 = Cos(var1[8]);
  t670 = Cos(var1[10]);
  t706 = Sin(var1[9]);
  t486 = Cos(var1[9]);
  t728 = Sin(var1[10]);
  t435 = Cos(var1[11]);
  t1131 = -1.*t478*t670*t706;
  t1139 = -1.*t478*t486*t728;
  t1152 = t1131 + t1139;
  t684 = t478*t486*t670;
  t763 = -1.*t478*t706*t728;
  t802 = t684 + t763;
  t1168 = Sin(var1[11]);
  t428 = Cos(var1[12]);
  t1367 = t435*t1152;
  t1389 = -1.*t802*t1168;
  t1426 = t1367 + t1389;
  t834 = t435*t802;
  t1248 = t1152*t1168;
  t1341 = t834 + t1248;
  t1510 = Sin(var1[12]);
  t196 = Cos(var1[13]);
  t1612 = t428*t1426;
  t1620 = -1.*t1341*t1510;
  t1645 = t1612 + t1620;
  t1355 = t428*t1341;
  t1544 = t1426*t1510;
  t1566 = t1355 + t1544;
  t1703 = Sin(var1[13]);
  t2234 = Cos(var1[7]);
  t2011 = Sin(var1[7]);
  t2025 = Sin(var1[8]);
  t2293 = t2234*t486;
  t2383 = -1.*t2011*t2025*t706;
  t2474 = t2293 + t2383;
  t2133 = t486*t2011*t2025;
  t2246 = t2234*t706;
  t2256 = t2133 + t2246;
  t2710 = t670*t2474;
  t2719 = -1.*t2256*t728;
  t2782 = t2710 + t2719;
  t2281 = t670*t2256;
  t2598 = t2474*t728;
  t2650 = t2281 + t2598;
  t2883 = t435*t2782;
  t2905 = -1.*t2650*t1168;
  t2931 = t2883 + t2905;
  t2664 = t435*t2650;
  t2785 = t2782*t1168;
  t2846 = t2664 + t2785;
  t3094 = t428*t2931;
  t3126 = -1.*t2846*t1510;
  t3130 = t3094 + t3126;
  t2870 = t428*t2846;
  t3005 = t2931*t1510;
  t3017 = t2870 + t3005;
  t1585 = t196*t1566;
  t1746 = t1645*t1703;
  t1751 = t1585 + t1746;
  t1786 = t196*t1645;
  t1816 = -1.*t1566*t1703;
  t1873 = t1786 + t1816;
  t3050 = t196*t3017;
  t3139 = t3130*t1703;
  t3149 = t3050 + t3139;
  t3163 = t196*t3130;
  t3192 = -1.*t3017*t1703;
  t3240 = t3163 + t3192;
  t3402 = 0.642788*t3149;
  t3429 = 0.766044*t3240;
  t3475 = t3402 + t3429;
  t3370 = -0.766044*t1751;
  t3376 = 0.642788*t1873;
  t3398 = t3370 + t3376;
  t3798 = -1.*t486*t2011;
  t3833 = -1.*t2234*t2025*t706;
  t3866 = t3798 + t3833;
  t3590 = t2234*t486*t2025;
  t3618 = -1.*t2011*t706;
  t3642 = t3590 + t3618;
  t3948 = t670*t3866;
  t3983 = -1.*t3642*t728;
  t3994 = t3948 + t3983;
  t3752 = t670*t3642;
  t3876 = t3866*t728;
  t3887 = t3752 + t3876;
  t4180 = t435*t3994;
  t4187 = -1.*t3887*t1168;
  t4207 = t4180 + t4187;
  t3922 = t435*t3887;
  t4048 = t3994*t1168;
  t4062 = t3922 + t4048;
  t4272 = t428*t4207;
  t4297 = -1.*t4062*t1510;
  t4301 = t4272 + t4297;
  t4152 = t428*t4062;
  t4226 = t4207*t1510;
  t4263 = t4152 + t4226;
  t3157 = -0.766044*t3149;
  t3271 = 0.642788*t3240;
  t3338 = t3157 + t3271;
  t1773 = 0.642788*t1751;
  t1891 = 0.766044*t1873;
  t1957 = t1773 + t1891;
  t4270 = t196*t4263;
  t4311 = t4301*t1703;
  t4328 = t4270 + t4311;
  t4371 = t196*t4301;
  t4399 = -1.*t4263*t1703;
  t4445 = t4371 + t4399;
  t4355 = -0.766044*t4328;
  t4484 = 0.642788*t4445;
  t4485 = t4355 + t4484;
  t4516 = 0.642788*t4328;
  t4524 = 0.766044*t4445;
  t4529 = t4516 + t4524;
  t126 = Cos(var1[1]);
  t4635 = t1957*t4485;
  t4637 = -1.*t3398*t4529;
  t3515 = t2234*t478*t3398;
  t4486 = t2025*t4485;
  t4494 = t3515 + t4486;
  t4496 = -1.*t3475*t4494;
  t4497 = t2234*t478*t1957;
  t4578 = t2025*t4529;
  t4614 = t4497 + t4578;
  t4623 = t3338*t4614;
  t4644 = t4635 + t4637;
  t4700 = -1.*t478*t2011*t4644;
  t4716 = 0. + t4496 + t4623 + t4700;
  t4777 = 1/t4716;
  t88 = Cos(var1[0]);
  t4818 = Sin(var1[0]);
  t4954 = Sin(var1[1]);
  t4863 = t4529*t3338;
  t4932 = -1.*t4485*t3475;
  t4941 = 0. + t4863 + t4932;
  t5449 = Cos(var1[3]);
  t5418 = Cos(var1[2]);
  t5426 = Sin(var1[3]);
  t5451 = Sin(var1[2]);
  t5481 = Cos(var1[4]);
  t5448 = -1.*t126*t5418*t5426;
  t5454 = -1.*t5449*t126*t5451;
  t5468 = t5448 + t5454;
  t5413 = Sin(var1[4]);
  t5491 = t5449*t126*t5418;
  t5496 = -1.*t126*t5426*t5451;
  t5533 = t5491 + t5496;
  t5580 = Cos(var1[5]);
  t5475 = t5413*t5468;
  t5547 = t5481*t5533;
  t5555 = t5475 + t5547;
  t5409 = Sin(var1[5]);
  t5581 = t5481*t5468;
  t5610 = -1.*t5413*t5533;
  t5626 = t5581 + t5610;
  t5686 = Cos(var1[6]);
  t5561 = -1.*t5409*t5555;
  t5645 = t5580*t5626;
  t5662 = t5561 + t5645;
  t5405 = Sin(var1[6]);
  t5687 = t5580*t5555;
  t5702 = t5409*t5626;
  t5714 = t5687 + t5702;
  t3352 = -1.*t1957*t3338;
  t3482 = t3398*t3475;
  t3504 = 0. + t3352 + t3482;
  t5776 = t88*t5418*t4954;
  t5794 = -1.*t4818*t5451;
  t5801 = t5776 + t5794;
  t5808 = -1.*t5418*t4818;
  t5811 = -1.*t88*t4954*t5451;
  t5827 = t5808 + t5811;
  t5804 = -1.*t5426*t5801;
  t5842 = t5449*t5827;
  t5845 = t5804 + t5842;
  t5860 = t5449*t5801;
  t5862 = t5426*t5827;
  t5863 = t5860 + t5862;
  t5852 = t5413*t5845;
  t5865 = t5481*t5863;
  t5868 = t5852 + t5865;
  t5870 = t5481*t5845;
  t5872 = -1.*t5413*t5863;
  t5876 = t5870 + t5872;
  t5869 = -1.*t5409*t5868;
  t5895 = t5580*t5876;
  t5897 = t5869 + t5895;
  t5966 = t5580*t5868;
  t6007 = t5409*t5876;
  t6010 = t5966 + t6007;
  t4810 = 0. + t4635 + t4637;
  t6100 = t5418*t4818*t4954;
  t6105 = t88*t5451;
  t6107 = t6100 + t6105;
  t6117 = t88*t5418;
  t6122 = -1.*t4818*t4954*t5451;
  t6132 = t6117 + t6122;
  t6108 = -1.*t5426*t6107;
  t6134 = t5449*t6132;
  t6153 = t6108 + t6134;
  t6159 = t5449*t6107;
  t6160 = t5426*t6132;
  t6166 = t6159 + t6160;
  t6154 = t5413*t6153;
  t6168 = t5481*t6166;
  t6171 = t6154 + t6168;
  t6181 = t5481*t6153;
  t6184 = -1.*t5413*t6166;
  t6186 = t6181 + t6184;
  t6174 = -1.*t5409*t6171;
  t6192 = t5580*t6186;
  t6195 = t6174 + t6192;
  t6198 = t5580*t6171;
  t6216 = t5409*t6186;
  t6219 = t6198 + t6216;
  t5166 = -1.*t478*t2011*t4485;
  t5177 = t2234*t478*t3338;
  t5179 = 0. + t5166 + t5177;
  t5684 = t5405*t5662;
  t5718 = t5686*t5714;
  t5719 = t5684 + t5718;
  t5722 = 0.642788*t5719;
  t5736 = t5686*t5662;
  t5744 = -1.*t5405*t5714;
  t5746 = t5736 + t5744;
  t5747 = 0.766044*t5746;
  t5756 = t5722 + t5747;
  t4979 = t478*t2011*t3398;
  t5007 = t2025*t3338;
  t5032 = 0. + t4979 + t5007;
  t5958 = t5405*t5897;
  t6028 = t5686*t6010;
  t6032 = t5958 + t6028;
  t6034 = 0.642788*t6032;
  t6056 = t5686*t5897;
  t6061 = -1.*t5405*t6010;
  t6078 = t6056 + t6061;
  t6079 = 0.766044*t6078;
  t6084 = t6034 + t6079;
  t5050 = -1.*t2234*t478*t3398;
  t5051 = -1.*t2025*t4485;
  t5071 = 0. + t5050 + t5051;
  t6196 = t5405*t6195;
  t6253 = t5686*t6219;
  t6257 = t6196 + t6253;
  t6258 = 0.642788*t6257;
  t6259 = t5686*t6195;
  t6265 = -1.*t5405*t6219;
  t6268 = t6259 + t6265;
  t6271 = 0.766044*t6268;
  t6272 = t6258 + t6271;
  t5342 = t478*t2011*t4529;
  t5360 = -1.*t2234*t478*t3475;
  t5385 = 0. + t5342 + t5360;
  t5229 = -1.*t478*t2011*t1957;
  t5243 = -1.*t2025*t3475;
  t5248 = 0. + t5229 + t5243;
  t5322 = 0. + t4497 + t4578;
  t6335 = -0.766044*t5719;
  t6336 = 0.642788*t5746;
  t6353 = t6335 + t6336;
  t6363 = -0.766044*t6032;
  t6379 = 0.642788*t6078;
  t6387 = t6363 + t6379;
  t6396 = -0.766044*t6257;
  t6400 = 0.642788*t6268;
  t6401 = t6396 + t6400;
  t6506 = -1.*t486;
  t6512 = 1. + t6506;
  t6567 = -1.*t670;
  t6572 = 1. + t6567;
  t6626 = -1.*t435;
  t6627 = 1. + t6626;
  t6667 = -1.*t428;
  t6669 = 1. + t6667;
  t6713 = -1.*t196;
  t6733 = 1. + t6713;
  t6448 = -1.*t478;
  t6460 = 1. + t6448;
  t6524 = -0.049*t6512;
  t6525 = -0.09*t706;
  t6526 = 0. + t6524 + t6525;
  t6581 = -0.049*t6572;
  t6588 = -0.21*t728;
  t6601 = 0. + t6581 + t6588;
  t6613 = -0.21*t6572;
  t6615 = 0.049*t728;
  t6617 = 0. + t6613 + t6615;
  t6628 = -0.0016*t6627;
  t6636 = -0.2707*t1168;
  t6638 = 0. + t6628 + t6636;
  t6646 = -0.2707*t6627;
  t6647 = 0.0016*t1168;
  t6656 = 0. + t6646 + t6647;
  t6675 = 0.0184*t6669;
  t6687 = -0.7055*t1510;
  t6690 = 0. + t6675 + t6687;
  t6694 = -0.7055*t6669;
  t6695 = -0.0184*t1510;
  t6707 = 0. + t6694 + t6695;
  t6748 = -0.0216*t6733;
  t6752 = -1.1135*t1703;
  t6774 = 0. + t6748 + t6752;
  t6780 = -1.1135*t6733;
  t6783 = 0.0216*t1703;
  t6786 = 0. + t6780 + t6783;
  t6435 = -1.*t2234;
  t6440 = 1. + t6435;
  t6445 = -0.135*t6440;
  t6447 = -0.1305*t2234*t478;
  t6463 = -0.135*t6460;
  t6466 = 0.049*t2025;
  t6487 = 0. + t6463 + t6466;
  t6504 = t2234*t6487;
  t6528 = t2234*t2025*t6526;
  t6532 = -0.09*t6512;
  t6534 = 0.049*t706;
  t6541 = 0. + t6532 + t6534;
  t6542 = -1.*t2011*t6541;
  t6603 = t3642*t6601;
  t6620 = t3866*t6617;
  t6642 = t3887*t6638;
  t6661 = t3994*t6656;
  t6691 = t4062*t6690;
  t6710 = t4207*t6707;
  t6778 = t4263*t6774;
  t6790 = t4301*t6786;
  t6793 = 0.0306*t4328;
  t6799 = -1.1312*t4445;
  t6800 = 0. + t6445 + t6447 + t6504 + t6528 + t6542 + t6603 + t6620 + t6642 + t6661 + t6691 + t6710 + t6778 + t6790 + t6793 + t6799;
  t6814 = -0.049*t6460;
  t6820 = -0.004500000000000004*t2025;
  t6822 = t478*t6526;
  t6830 = t478*t486*t6601;
  t6833 = -1.*t478*t706*t6617;
  t6835 = t802*t6638;
  t6845 = t1152*t6656;
  t6855 = t1341*t6690;
  t6859 = t1426*t6707;
  t6862 = t1566*t6774;
  t6867 = t1645*t6786;
  t6868 = 0.0306*t1751;
  t6874 = -1.1312*t1873;
  t6875 = 0. + t6814 + t6820 + t6822 + t6830 + t6833 + t6835 + t6845 + t6855 + t6859 + t6862 + t6867 + t6868 + t6874;
  t7020 = -1.*t5449;
  t7025 = 1. + t7020;
  t7084 = -1.*t5481;
  t7085 = 1. + t7084;
  t7125 = -1.*t5580;
  t7127 = 1. + t7125;
  t7155 = -1.*t5686;
  t7159 = 1. + t7155;
  t7004 = -1.*t126;
  t7005 = 1. + t7004;
  t7048 = -1.*t5418;
  t7054 = 1. + t7048;
  t7059 = -0.049*t7054;
  t7066 = -0.09*t5451;
  t7068 = 0. + t7059 + t7066;
  t7037 = -0.049*t7025;
  t7038 = -0.21*t5426;
  t7040 = 0. + t7037 + t7038;
  t7075 = -0.21*t7025;
  t7078 = 0.049*t5426;
  t7079 = 0. + t7075 + t7078;
  t7086 = -0.2707*t7085;
  t7091 = 0.0016*t5413;
  t7093 = 0. + t7086 + t7091;
  t7111 = -0.0016*t7085;
  t7116 = -0.2707*t5413;
  t7118 = 0. + t7111 + t7116;
  t7131 = 0.0184*t7127;
  t7132 = -0.7055*t5409;
  t7136 = 0. + t7131 + t7132;
  t7139 = -0.7055*t7127;
  t7140 = -0.0184*t5409;
  t7149 = 0. + t7139 + t7140;
  t7161 = -1.1135*t7159;
  t7166 = 0.0216*t5405;
  t7167 = 0. + t7161 + t7166;
  t7169 = -0.0216*t7159;
  t7178 = -1.1135*t5405;
  t7181 = 0. + t7169 + t7178;
  t7213 = 0.135*t7005;
  t7216 = 0.049*t4954;
  t7218 = 0. + t7213 + t7216;
  t7231 = -0.09*t7054;
  t7232 = 0.049*t5451;
  t7233 = 0. + t7231 + t7232;
  t6933 = 0.135*t2011;
  t6937 = -0.1305*t478*t2011;
  t6951 = t2011*t6487;
  t6952 = t2011*t2025*t6526;
  t6957 = t2234*t6541;
  t6962 = t2256*t6601;
  t6964 = t2474*t6617;
  t6965 = t2650*t6638;
  t6971 = t2782*t6656;
  t6972 = t2846*t6690;
  t6976 = t2931*t6707;
  t6977 = t3017*t6774;
  t6986 = t3130*t6786;
  t6992 = 0.0306*t3149;
  t6995 = -1.1312*t3240;
  t6996 = 0. + t6933 + t6937 + t6951 + t6952 + t6957 + t6962 + t6964 + t6965 + t6971 + t6972 + t6976 + t6977 + t6986 + t6992 + t6995;
  t6811 = t3398*t6800;
  t6876 = -1.*t6875*t4485;
  t6877 = t6811 + t6876;
  t7014 = -0.049*t7005;
  t7041 = t126*t5418*t7040;
  t7043 = 0.004500000000000004*t4954;
  t7073 = t126*t7068;
  t7080 = -1.*t126*t7079*t5451;
  t7101 = t7093*t5468;
  t7119 = t7118*t5533;
  t7138 = t7136*t5555;
  t7151 = t7149*t5626;
  t7168 = t7167*t5662;
  t7188 = t7181*t5714;
  t7190 = 0.0306*t5719;
  t7191 = -1.1312*t5746;
  t7192 = 0. + t7014 + t7041 + t7043 + t7073 + t7080 + t7101 + t7119 + t7138 + t7151 + t7168 + t7188 + t7190 + t7191;
  t7197 = -1.*t88;
  t7201 = 1. + t7197;
  t7203 = 0.135*t7201;
  t7204 = 0.1305*t88*t126;
  t7220 = t88*t7218;
  t7230 = t88*t4954*t7068;
  t7235 = -1.*t4818*t7233;
  t7239 = t7040*t5801;
  t7240 = t7079*t5827;
  t7244 = t7093*t5845;
  t7246 = t7118*t5863;
  t7248 = t7136*t5868;
  t7250 = t7149*t5876;
  t7251 = t7167*t5897;
  t7253 = t7181*t6010;
  t7258 = 0.0306*t6032;
  t7261 = -1.1312*t6078;
  t7262 = 0. + t7203 + t7204 + t7220 + t7230 + t7235 + t7239 + t7240 + t7244 + t7246 + t7248 + t7250 + t7251 + t7253 + t7258 + t7261;
  t7265 = -0.135*t4818;
  t7267 = 0.1305*t126*t4818;
  t7274 = t4818*t7218;
  t7276 = t4818*t4954*t7068;
  t7279 = t88*t7233;
  t7283 = t7040*t6107;
  t7284 = t7079*t6132;
  t7286 = t7093*t6153;
  t7288 = t7118*t6166;
  t7289 = t7136*t6171;
  t7291 = t7149*t6186;
  t7292 = t7167*t6195;
  t7293 = t7181*t6219;
  t7294 = 0.0306*t6257;
  t7295 = -1.1312*t6268;
  t7296 = 0. + t7265 + t7267 + t7274 + t7276 + t7279 + t7283 + t7284 + t7286 + t7288 + t7289 + t7291 + t7292 + t7293 + t7294 + t7295;
  t7301 = t2234*t478*t6875;
  t7302 = t2025*t6800;
  t7307 = t7301 + t7302;
  t6885 = t1957*t6800;
  t6902 = -1.*t6875*t4529;
  t6926 = t6885 + t6902;

  p_output1(0)=0. - 1.*t126*t4777*t4810*t4818 + t4777*t4941*t4954 - 1.*t126*t3504*t4777*t88;
  p_output1(1)=0. - 1.*t126*t4777*t4818*t5071 + t4777*t4954*t5179 - 1.*t126*t4777*t5032*t88;
  p_output1(2)=0. - 1.*t126*t4777*t4818*t5322 + t4777*t4954*t5385 - 1.*t126*t4777*t5248*t88;
  p_output1(3)=0.;
  p_output1(4)=0. + t4777*t4941*t5756 + t3504*t4777*t6084 + t4777*t4810*t6272;
  p_output1(5)=0. + t4777*t5179*t5756 + t4777*t5032*t6084 + t4777*t5071*t6272;
  p_output1(6)=0. + t4777*t5385*t5756 + t4777*t5248*t6084 + t4777*t5322*t6272;
  p_output1(7)=0.;
  p_output1(8)=0. + t4777*t4941*t6353 + t3504*t4777*t6387 + t4777*t4810*t6401;
  p_output1(9)=0. + t4777*t5179*t6353 + t4777*t5032*t6387 + t4777*t5071*t6401;
  p_output1(10)=0. + t4777*t5385*t6353 + t4777*t5248*t6387 + t4777*t5322*t6401;
  p_output1(11)=0.;
  p_output1(12)=t4777*(-1.*t3475*t6877 + t3338*t6926 - 1.*t4644*t6996) + t4777*t4941*t7192 + t3504*t4777*t7262 + t4777*t4810*t7296;
  p_output1(13)=t4777*t5179*t7192 + t4777*t5032*t7262 + t4777*t5071*t7296 + t4777*(-1.*t2011*t478*t6877 + t4494*t6996 - 1.*t3338*t7307);
  p_output1(14)=t4777*t5385*t7192 + t4777*t5248*t7262 + t4777*t5322*t7296 + t4777*(t2011*t478*t6926 - 1.*t4614*t6996 + t3475*t7307);
  p_output1(15)=0. + (t4496 + t4623 + t4700)*t4777;
}


       
Eigen::Matrix<double,4,4> H_RightToeBottom_to_LeftToeBottom(const Eigen::Matrix<double,14,1> &var1)
//void H_RightToeBottom_to_LeftToeBottom(Eigen::Matrix<double,4,4> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  /* Call Subroutines */
  Eigen::Matrix<double,4,4>  p_output1;
  
  output1(p_output1, var1);

  return p_output1;
}



