/*
 * Automatically Generated from Mathematica.
 * Thu 23 May 2019 13:12:00 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "p_LeftToeBottom_to_RightToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE static inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }


/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,1> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t40;
  double t239;
  double t469;
  double t748;
  double t819;
  double t855;
  double t904;
  double t1082;
  double t1156;
  double t1189;
  double t1198;
  double t1226;
  double t1121;
  double t1132;
  double t1134;
  double t1554;
  double t1560;
  double t1562;
  double t1867;
  double t1901;
  double t1902;
  double t2058;
  double t1762;
  double t1765;
  double t1769;
  double t2141;
  double t2168;
  double t2188;
  double t2339;
  double t2401;
  double t2408;
  double t2446;
  double t2270;
  double t2291;
  double t2337;
  double t2536;
  double t2546;
  double t2551;
  double t2705;
  double t2728;
  double t2753;
  double t2774;
  double t2598;
  double t2646;
  double t2647;
  double t2854;
  double t2857;
  double t2933;
  double t3421;
  double t3546;
  double t3449;
  double t3486;
  double t3563;
  double t3638;
  double t3529;
  double t3589;
  double t3606;
  double t3407;
  double t3648;
  double t3649;
  double t3658;
  double t3684;
  double t3627;
  double t3661;
  double t3682;
  double t3367;
  double t3738;
  double t3770;
  double t3771;
  double t3804;
  double t3683;
  double t3775;
  double t3789;
  double t3353;
  double t3818;
  double t3825;
  double t3846;
  double t3956;
  double t3913;
  double t3920;
  double t3944;
  double t3960;
  double t3966;
  double t4013;
  double t4015;
  double t4022;
  double t3969;
  double t4055;
  double t4060;
  double t4076;
  double t4091;
  double t4093;
  double t4070;
  double t4101;
  double t4121;
  double t4130;
  double t4131;
  double t4144;
  double t4125;
  double t4147;
  double t4149;
  double t4184;
  double t4189;
  double t4196;
  double t3797;
  double t3850;
  double t3852;
  double t3869;
  double t3879;
  double t3882;
  double t4163;
  double t4201;
  double t4202;
  double t4209;
  double t4212;
  double t4255;
  double t4401;
  double t4422;
  double t4429;
  double t4437;
  double t4439;
  double t4441;
  double t4430;
  double t4449;
  double t4462;
  double t4483;
  double t4487;
  double t4491;
  double t4474;
  double t4492;
  double t4502;
  double t4516;
  double t4525;
  double t4535;
  double t4514;
  double t4537;
  double t4540;
  double t4548;
  double t4554;
  double t4566;
  double t4329;
  double t4331;
  double t4333;
  double t4205;
  double t4271;
  double t4292;
  double t4544;
  double t4570;
  double t4571;
  double t4589;
  double t4594;
  double t4601;
  double t3857;
  double t3890;
  double t3902;
  double t4346;
  double t4366;
  double t4369;
  double t4296;
  double t4378;
  double t260;
  double t338;
  double t444;
  double t528;
  double t671;
  double t902;
  double t916;
  double t918;
  double t1091;
  double t1098;
  double t1108;
  double t1219;
  double t1296;
  double t1429;
  double t1574;
  double t1582;
  double t1643;
  double t4739;
  double t4740;
  double t4743;
  double t4752;
  double t4761;
  double t4763;
  double t2039;
  double t2068;
  double t2095;
  double t2214;
  double t2237;
  double t2238;
  double t4771;
  double t4772;
  double t4776;
  double t4779;
  double t4783;
  double t4786;
  double t2421;
  double t2467;
  double t2514;
  double t2553;
  double t2561;
  double t2589;
  double t4795;
  double t4801;
  double t4802;
  double t4809;
  double t4821;
  double t4823;
  double t2757;
  double t2799;
  double t2831;
  double t2947;
  double t2950;
  double t2953;
  double t4844;
  double t4847;
  double t4852;
  double t4871;
  double t4873;
  double t4874;
  double t4626;
  double t4629;
  double t4639;
  double t4586;
  double t4602;
  double t4603;
  double t4607;
  double t4610;
  double t4615;
  double t4620;
  double t4646;
  double t4647;
  double t4656;
  double t4660;
  double t4671;
  double t4672;
  double t4677;
  double t4682;
  double t5016;
  double t5019;
  double t5030;
  double t5037;
  double t5045;
  double t5046;
  double t5064;
  double t5066;
  double t5070;
  double t5087;
  double t5089;
  double t5092;
  double t5097;
  double t5112;
  double t5113;
  double t5120;
  double t5122;
  double t5124;
  double t5313;
  double t5317;
  double t5387;
  double t5389;
  double t5434;
  double t5435;
  double t5503;
  double t5511;
  double t5551;
  double t5557;
  double t5242;
  double t5258;
  double t5394;
  double t5407;
  double t5411;
  double t5319;
  double t5324;
  double t5333;
  double t5422;
  double t5423;
  double t5427;
  double t5445;
  double t5453;
  double t5455;
  double t5479;
  double t5486;
  double t5499;
  double t5515;
  double t5521;
  double t5524;
  double t5532;
  double t5538;
  double t5546;
  double t5559;
  double t5560;
  double t5561;
  double t5565;
  double t5566;
  double t5567;
  double t5190;
  double t5201;
  double t5214;
  double t5216;
  double t5263;
  double t5293;
  double t5306;
  double t5308;
  double t5346;
  double t5355;
  double t5364;
  double t5370;
  double t5371;
  double t5416;
  double t5428;
  double t5476;
  double t5500;
  double t5525;
  double t5550;
  double t5562;
  double t5569;
  double t5575;
  double t5584;
  double t5592;
  double t5599;
  double t5617;
  double t5626;
  double t5629;
  double t5635;
  double t5636;
  double t5638;
  double t5640;
  double t5642;
  double t5649;
  double t5653;
  double t5656;
  double t5659;
  double t5663;
  double t115;
  double t244;
  double t721;
  double t986;
  double t1120;
  double t1466;
  double t1700;
  double t2100;
  double t2247;
  double t2520;
  double t2590;
  double t2841;
  double t2985;
  double t2987;
  double t2995;
  double t3019;
  double t3020;
  double t3034;
  double t3072;
  double t3101;
  double t3290;
  double t3327;
  double t4973;
  double t5004;
  double t5007;
  double t5011;
  double t5012;
  double t5034;
  double t5050;
  double t5084;
  double t5096;
  double t5117;
  double t5125;
  double t5127;
  double t5130;
  double t5132;
  double t5133;
  double t5141;
  double t5143;
  double t5149;
  double t5151;
  double t5157;
  double t4690;
  double t4717;
  double t4720;
  double t4723;
  double t4724;
  double t4727;
  double t4730;
  double t4746;
  double t4767;
  double t4778;
  double t4790;
  double t4803;
  double t4843;
  double t4854;
  double t4880;
  double t4881;
  double t4888;
  double t4894;
  double t4896;
  double t4919;
  double t4921;
  double t4923;
  double t4926;
  double t4931;
  double t5712;
  double t5721;
  double t5729;
  double t5730;
  double t5732;
  double t5733;
  double t5742;
  double t5749;
  double t5752;
  double t5760;
  double t5770;
  double t5772;
  double t5773;
  double t5782;
  double t5795;
  double t5816;
  double t5595;
  double t5679;
  double t5680;
  double t5946;
  double t5955;
  double t5961;
  double t5689;
  double t5700;
  double t5706;
  t40 = Sin(var1[7]);
  t239 = Cos(var1[8]);
  t469 = Sin(var1[8]);
  t748 = Cos(var1[9]);
  t819 = -1.*t748;
  t855 = 1. + t819;
  t904 = Sin(var1[9]);
  t1082 = Cos(var1[7]);
  t1156 = Cos(var1[10]);
  t1189 = -1.*t1156;
  t1198 = 1. + t1189;
  t1226 = Sin(var1[10]);
  t1121 = t748*t40*t469;
  t1132 = t1082*t904;
  t1134 = t1121 + t1132;
  t1554 = t1082*t748;
  t1560 = -1.*t40*t469*t904;
  t1562 = t1554 + t1560;
  t1867 = Cos(var1[11]);
  t1901 = -1.*t1867;
  t1902 = 1. + t1901;
  t2058 = Sin(var1[11]);
  t1762 = t1156*t1134;
  t1765 = t1562*t1226;
  t1769 = t1762 + t1765;
  t2141 = t1156*t1562;
  t2168 = -1.*t1134*t1226;
  t2188 = t2141 + t2168;
  t2339 = Cos(var1[12]);
  t2401 = -1.*t2339;
  t2408 = 1. + t2401;
  t2446 = Sin(var1[12]);
  t2270 = t1867*t1769;
  t2291 = t2188*t2058;
  t2337 = t2270 + t2291;
  t2536 = t1867*t2188;
  t2546 = -1.*t1769*t2058;
  t2551 = t2536 + t2546;
  t2705 = Cos(var1[13]);
  t2728 = -1.*t2705;
  t2753 = 1. + t2728;
  t2774 = Sin(var1[13]);
  t2598 = t2339*t2337;
  t2646 = t2551*t2446;
  t2647 = t2598 + t2646;
  t2854 = t2339*t2551;
  t2857 = -1.*t2337*t2446;
  t2933 = t2854 + t2857;
  t3421 = Cos(var1[1]);
  t3546 = Cos(var1[3]);
  t3449 = Cos(var1[2]);
  t3486 = Sin(var1[3]);
  t3563 = Sin(var1[2]);
  t3638 = Cos(var1[4]);
  t3529 = -1.*t3421*t3449*t3486;
  t3589 = -1.*t3546*t3421*t3563;
  t3606 = t3529 + t3589;
  t3407 = Sin(var1[4]);
  t3648 = t3546*t3421*t3449;
  t3649 = -1.*t3421*t3486*t3563;
  t3658 = t3648 + t3649;
  t3684 = Cos(var1[5]);
  t3627 = t3407*t3606;
  t3661 = t3638*t3658;
  t3682 = t3627 + t3661;
  t3367 = Sin(var1[5]);
  t3738 = t3638*t3606;
  t3770 = -1.*t3407*t3658;
  t3771 = t3738 + t3770;
  t3804 = Cos(var1[6]);
  t3683 = -1.*t3367*t3682;
  t3775 = t3684*t3771;
  t3789 = t3683 + t3775;
  t3353 = Sin(var1[6]);
  t3818 = t3684*t3682;
  t3825 = t3367*t3771;
  t3846 = t3818 + t3825;
  t3956 = Sin(var1[0]);
  t3913 = Cos(var1[0]);
  t3920 = Sin(var1[1]);
  t3944 = t3913*t3449*t3920;
  t3960 = -1.*t3956*t3563;
  t3966 = t3944 + t3960;
  t4013 = -1.*t3449*t3956;
  t4015 = -1.*t3913*t3920*t3563;
  t4022 = t4013 + t4015;
  t3969 = -1.*t3486*t3966;
  t4055 = t3546*t4022;
  t4060 = t3969 + t4055;
  t4076 = t3546*t3966;
  t4091 = t3486*t4022;
  t4093 = t4076 + t4091;
  t4070 = t3407*t4060;
  t4101 = t3638*t4093;
  t4121 = t4070 + t4101;
  t4130 = t3638*t4060;
  t4131 = -1.*t3407*t4093;
  t4144 = t4130 + t4131;
  t4125 = -1.*t3367*t4121;
  t4147 = t3684*t4144;
  t4149 = t4125 + t4147;
  t4184 = t3684*t4121;
  t4189 = t3367*t4144;
  t4196 = t4184 + t4189;
  t3797 = t3353*t3789;
  t3850 = t3804*t3846;
  t3852 = t3797 + t3850;
  t3869 = t3804*t3789;
  t3879 = -1.*t3353*t3846;
  t3882 = t3869 + t3879;
  t4163 = t3353*t4149;
  t4201 = t3804*t4196;
  t4202 = t4163 + t4201;
  t4209 = t3804*t4149;
  t4212 = -1.*t3353*t4196;
  t4255 = t4209 + t4212;
  t4401 = t3449*t3956*t3920;
  t4422 = t3913*t3563;
  t4429 = t4401 + t4422;
  t4437 = t3913*t3449;
  t4439 = -1.*t3956*t3920*t3563;
  t4441 = t4437 + t4439;
  t4430 = -1.*t3486*t4429;
  t4449 = t3546*t4441;
  t4462 = t4430 + t4449;
  t4483 = t3546*t4429;
  t4487 = t3486*t4441;
  t4491 = t4483 + t4487;
  t4474 = t3407*t4462;
  t4492 = t3638*t4491;
  t4502 = t4474 + t4492;
  t4516 = t3638*t4462;
  t4525 = -1.*t3407*t4491;
  t4535 = t4516 + t4525;
  t4514 = -1.*t3367*t4502;
  t4537 = t3684*t4535;
  t4540 = t4514 + t4537;
  t4548 = t3684*t4502;
  t4554 = t3367*t4535;
  t4566 = t4548 + t4554;
  t4329 = -0.766044*t3852;
  t4331 = 0.642788*t3882;
  t4333 = t4329 + t4331;
  t4205 = -0.766044*t4202;
  t4271 = 0.642788*t4255;
  t4292 = t4205 + t4271;
  t4544 = t3353*t4540;
  t4570 = t3804*t4566;
  t4571 = t4544 + t4570;
  t4589 = t3804*t4540;
  t4594 = -1.*t3353*t4566;
  t4601 = t4589 + t4594;
  t3857 = 0.642788*t3852;
  t3890 = 0.766044*t3882;
  t3902 = t3857 + t3890;
  t4346 = 0.642788*t4202;
  t4366 = 0.766044*t4255;
  t4369 = t4346 + t4366;
  t4296 = t3902*t4292;
  t4378 = -1.*t4333*t4369;
  t260 = -1.*t239;
  t338 = 1. + t260;
  t444 = -0.135*t338;
  t528 = 0.049*t469;
  t671 = 0. + t444 + t528;
  t902 = -0.049*t855;
  t916 = -0.09*t904;
  t918 = 0. + t902 + t916;
  t1091 = -0.09*t855;
  t1098 = 0.049*t904;
  t1108 = 0. + t1091 + t1098;
  t1219 = -0.049*t1198;
  t1296 = -0.21*t1226;
  t1429 = 0. + t1219 + t1296;
  t1574 = -0.21*t1198;
  t1582 = 0.049*t1226;
  t1643 = 0. + t1574 + t1582;
  t4739 = t1082*t748*t469;
  t4740 = -1.*t40*t904;
  t4743 = t4739 + t4740;
  t4752 = -1.*t748*t40;
  t4761 = -1.*t1082*t469*t904;
  t4763 = t4752 + t4761;
  t2039 = -0.0016*t1902;
  t2068 = -0.2707*t2058;
  t2095 = 0. + t2039 + t2068;
  t2214 = -0.2707*t1902;
  t2237 = 0.0016*t2058;
  t2238 = 0. + t2214 + t2237;
  t4771 = t1156*t4743;
  t4772 = t4763*t1226;
  t4776 = t4771 + t4772;
  t4779 = t1156*t4763;
  t4783 = -1.*t4743*t1226;
  t4786 = t4779 + t4783;
  t2421 = 0.0184*t2408;
  t2467 = -0.7055*t2446;
  t2514 = 0. + t2421 + t2467;
  t2553 = -0.7055*t2408;
  t2561 = -0.0184*t2446;
  t2589 = 0. + t2553 + t2561;
  t4795 = t1867*t4776;
  t4801 = t4786*t2058;
  t4802 = t4795 + t4801;
  t4809 = t1867*t4786;
  t4821 = -1.*t4776*t2058;
  t4823 = t4809 + t4821;
  t2757 = -0.0216*t2753;
  t2799 = -1.1135*t2774;
  t2831 = 0. + t2757 + t2799;
  t2947 = -1.1135*t2753;
  t2950 = 0.0216*t2774;
  t2953 = 0. + t2947 + t2950;
  t4844 = t2339*t4802;
  t4847 = t4823*t2446;
  t4852 = t4844 + t4847;
  t4871 = t2339*t4823;
  t4873 = -1.*t4802*t2446;
  t4874 = t4871 + t4873;
  t4626 = -0.766044*t4571;
  t4629 = 0.642788*t4601;
  t4639 = t4626 + t4629;
  t4586 = 0.642788*t4571;
  t4602 = 0.766044*t4601;
  t4603 = t4586 + t4602;
  t4607 = t3913*t3421*t4333;
  t4610 = t3920*t4292;
  t4615 = t4607 + t4610;
  t4620 = -1.*t4603*t4615;
  t4646 = t3913*t3421*t3902;
  t4647 = t3920*t4369;
  t4656 = t4646 + t4647;
  t4660 = t4639*t4656;
  t4671 = t4296 + t4378;
  t4672 = -1.*t3421*t3956*t4671;
  t4677 = 0. + t4620 + t4660 + t4672;
  t4682 = 1/t4677;
  t5016 = t239*t748*t1156;
  t5019 = -1.*t239*t904*t1226;
  t5030 = t5016 + t5019;
  t5037 = -1.*t239*t1156*t904;
  t5045 = -1.*t239*t748*t1226;
  t5046 = t5037 + t5045;
  t5064 = t1867*t5030;
  t5066 = t5046*t2058;
  t5070 = t5064 + t5066;
  t5087 = t1867*t5046;
  t5089 = -1.*t5030*t2058;
  t5092 = t5087 + t5089;
  t5097 = t2339*t5070;
  t5112 = t5092*t2446;
  t5113 = t5097 + t5112;
  t5120 = t2339*t5092;
  t5122 = -1.*t5070*t2446;
  t5124 = t5120 + t5122;
  t5313 = -1.*t3449;
  t5317 = 1. + t5313;
  t5387 = -1.*t3546;
  t5389 = 1. + t5387;
  t5434 = -1.*t3638;
  t5435 = 1. + t5434;
  t5503 = -1.*t3684;
  t5511 = 1. + t5503;
  t5551 = -1.*t3804;
  t5557 = 1. + t5551;
  t5242 = -1.*t3421;
  t5258 = 1. + t5242;
  t5394 = -0.049*t5389;
  t5407 = -0.21*t3486;
  t5411 = 0. + t5394 + t5407;
  t5319 = -0.049*t5317;
  t5324 = -0.09*t3563;
  t5333 = 0. + t5319 + t5324;
  t5422 = -0.21*t5389;
  t5423 = 0.049*t3486;
  t5427 = 0. + t5422 + t5423;
  t5445 = -0.2707*t5435;
  t5453 = 0.0016*t3407;
  t5455 = 0. + t5445 + t5453;
  t5479 = -0.0016*t5435;
  t5486 = -0.2707*t3407;
  t5499 = 0. + t5479 + t5486;
  t5515 = 0.0184*t5511;
  t5521 = -0.7055*t3367;
  t5524 = 0. + t5515 + t5521;
  t5532 = -0.7055*t5511;
  t5538 = -0.0184*t3367;
  t5546 = 0. + t5532 + t5538;
  t5559 = -1.1135*t5557;
  t5560 = 0.0216*t3353;
  t5561 = 0. + t5559 + t5560;
  t5565 = -0.0216*t5557;
  t5566 = -1.1135*t3353;
  t5567 = 0. + t5565 + t5566;
  t5190 = -1.*t3913;
  t5201 = 1. + t5190;
  t5214 = 0.135*t5201;
  t5216 = 0.1305*t3913*t3421;
  t5263 = 0.135*t5258;
  t5293 = 0.049*t3920;
  t5306 = 0. + t5263 + t5293;
  t5308 = t3913*t5306;
  t5346 = t3913*t3920*t5333;
  t5355 = -0.09*t5317;
  t5364 = 0.049*t3563;
  t5370 = 0. + t5355 + t5364;
  t5371 = -1.*t3956*t5370;
  t5416 = t5411*t3966;
  t5428 = t5427*t4022;
  t5476 = t5455*t4060;
  t5500 = t5499*t4093;
  t5525 = t5524*t4121;
  t5550 = t5546*t4144;
  t5562 = t5561*t4149;
  t5569 = t5567*t4196;
  t5575 = 0.0306*t4202;
  t5584 = -1.1312*t4255;
  t5592 = 0. + t5214 + t5216 + t5308 + t5346 + t5371 + t5416 + t5428 + t5476 + t5500 + t5525 + t5550 + t5562 + t5569 + t5575 + t5584;
  t5599 = -0.049*t5258;
  t5617 = t3421*t3449*t5411;
  t5626 = 0.004500000000000004*t3920;
  t5629 = t3421*t5333;
  t5635 = -1.*t3421*t5427*t3563;
  t5636 = t5455*t3606;
  t5638 = t5499*t3658;
  t5640 = t5524*t3682;
  t5642 = t5546*t3771;
  t5649 = t5561*t3789;
  t5653 = t5567*t3846;
  t5656 = 0.0306*t3852;
  t5659 = -1.1312*t3882;
  t5663 = 0. + t5599 + t5617 + t5626 + t5629 + t5635 + t5636 + t5638 + t5640 + t5642 + t5649 + t5653 + t5656 + t5659;
  t115 = 0.135*t40;
  t244 = -0.1305*t239*t40;
  t721 = t40*t671;
  t986 = t40*t469*t918;
  t1120 = t1082*t1108;
  t1466 = t1134*t1429;
  t1700 = t1562*t1643;
  t2100 = t1769*t2095;
  t2247 = t2188*t2238;
  t2520 = t2337*t2514;
  t2590 = t2551*t2589;
  t2841 = t2647*t2831;
  t2985 = t2933*t2953;
  t2987 = t2705*t2647;
  t2995 = t2933*t2774;
  t3019 = t2987 + t2995;
  t3020 = 0.0306*t3019;
  t3034 = t2705*t2933;
  t3072 = -1.*t2647*t2774;
  t3101 = t3034 + t3072;
  t3290 = -1.1312*t3101;
  t3327 = 0. + t115 + t244 + t721 + t986 + t1120 + t1466 + t1700 + t2100 + t2247 + t2520 + t2590 + t2841 + t2985 + t3020 + t3290;
  t4973 = -0.049*t338;
  t5004 = -0.004500000000000004*t469;
  t5007 = t239*t918;
  t5011 = t239*t748*t1429;
  t5012 = -1.*t239*t904*t1643;
  t5034 = t5030*t2095;
  t5050 = t5046*t2238;
  t5084 = t5070*t2514;
  t5096 = t5092*t2589;
  t5117 = t5113*t2831;
  t5125 = t5124*t2953;
  t5127 = t2705*t5113;
  t5130 = t5124*t2774;
  t5132 = t5127 + t5130;
  t5133 = 0.0306*t5132;
  t5141 = t2705*t5124;
  t5143 = -1.*t5113*t2774;
  t5149 = t5141 + t5143;
  t5151 = -1.1312*t5149;
  t5157 = 0. + t4973 + t5004 + t5007 + t5011 + t5012 + t5034 + t5050 + t5084 + t5096 + t5117 + t5125 + t5133 + t5151;
  t4690 = -1.*t1082;
  t4717 = 1. + t4690;
  t4720 = -0.135*t4717;
  t4723 = -0.1305*t1082*t239;
  t4724 = t1082*t671;
  t4727 = t1082*t469*t918;
  t4730 = -1.*t40*t1108;
  t4746 = t4743*t1429;
  t4767 = t4763*t1643;
  t4778 = t4776*t2095;
  t4790 = t4786*t2238;
  t4803 = t4802*t2514;
  t4843 = t4823*t2589;
  t4854 = t4852*t2831;
  t4880 = t4874*t2953;
  t4881 = t2705*t4852;
  t4888 = t4874*t2774;
  t4894 = t4881 + t4888;
  t4896 = 0.0306*t4894;
  t4919 = t2705*t4874;
  t4921 = -1.*t4852*t2774;
  t4923 = t4919 + t4921;
  t4926 = -1.1312*t4923;
  t4931 = 0. + t4720 + t4723 + t4724 + t4727 + t4730 + t4746 + t4767 + t4778 + t4790 + t4803 + t4843 + t4854 + t4880 + t4896 + t4926;
  t5712 = -0.135*t3956;
  t5721 = 0.1305*t3421*t3956;
  t5729 = t3956*t5306;
  t5730 = t3956*t3920*t5333;
  t5732 = t3913*t5370;
  t5733 = t5411*t4429;
  t5742 = t5427*t4441;
  t5749 = t5455*t4462;
  t5752 = t5499*t4491;
  t5760 = t5524*t4502;
  t5770 = t5546*t4535;
  t5772 = t5561*t4540;
  t5773 = t5567*t4566;
  t5782 = 0.0306*t4571;
  t5795 = -1.1312*t4601;
  t5816 = 0. + t5712 + t5721 + t5729 + t5730 + t5732 + t5733 + t5742 + t5749 + t5752 + t5760 + t5770 + t5772 + t5773 + t5782 + t5795;
  t5595 = t4333*t5592;
  t5679 = -1.*t5663*t4292;
  t5680 = t5595 + t5679;
  t5946 = t3913*t3421*t5663;
  t5955 = t3920*t5592;
  t5961 = t5946 + t5955;
  t5689 = t3902*t5592;
  t5700 = -1.*t5663*t4369;
  t5706 = t5689 + t5700;

  p_output1(0)=t3327*(0. + t4296 + t4378)*t4682 + (0. + t4333*t4603 - 1.*t3902*t4639)*t4682*t4931 + (0. - 1.*t4292*t4603 + t4369*t4639)*t4682*t5157 + t4682*(-1.*t4603*t5680 + t4639*t5706 - 1.*t4671*t5816);
  p_output1(1)=t3327*(0. - 1.*t3920*t4292 - 1.*t3421*t3913*t4333)*t4682 + (0. + t3421*t3956*t4333 + t3920*t4639)*t4682*t4931 + (0. - 1.*t3421*t3956*t4292 + t3421*t3913*t4639)*t4682*t5157 + t4682*(-1.*t3421*t3956*t5680 + t4615*t5816 - 1.*t4639*t5961);
  p_output1(2)=t3327*(0. + t4646 + t4647)*t4682 + (0. - 1.*t3421*t3902*t3956 - 1.*t3920*t4603)*t4682*t4931 + (0. + t3421*t3956*t4369 - 1.*t3421*t3913*t4603)*t4682*t5157 + t4682*(t3421*t3956*t5706 - 1.*t4656*t5816 + t4603*t5961);
}


       
Eigen::Matrix<double,3,1> p_LeftToeBottom_to_RightToeBottom(const Eigen::Matrix<double,14,1> &var1)
//void p_LeftToeBottom_to_RightToeBottom(Eigen::Matrix<double,3,1> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  /* Call Subroutines */
  Eigen::Matrix<double,3,1>  p_output1;
  
  output1(p_output1, var1);

  return p_output1;
}



