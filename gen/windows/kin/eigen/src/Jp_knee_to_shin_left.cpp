/*
 * Automatically Generated from Mathematica.
 * Thu 23 May 2019 13:09:26 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jp_knee_to_shin_left.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE static inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }


/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,20> &p_output1, const Eigen::Matrix<double,20,1> &var1)
{
  double t372;
  double t383;
  double t455;
  double t369;
  double t463;
  double t42;
  double t373;
  double t502;
  double t534;
  double t753;
  double t778;
  double t949;
  double t1005;
  double t1337;
  double t1397;
  double t1484;
  double t1491;
  double t1130;
  double t1211;
  double t1237;
  double t1694;
  double t2109;
  double t2110;
  double t2121;
  double t2206;
  double t1853;
  double t1970;
  double t1995;
  double t2327;
  double t2421;
  double t2432;
  double t2527;
  double t2572;
  double t2585;
  double t2650;
  double t2750;
  double t2763;
  double t2774;
  double t2868;
  double t2869;
  double t2889;
  double t2912;
  double t2920;
  double t2949;
  double t2995;
  double t3034;
  double t3067;
  double t3176;
  double t3264;
  double t3326;
  double t3348;
  double t49;
  double t53;
  double t195;
  double t310;
  double t1015;
  double t1051;
  double t3565;
  double t3613;
  double t3644;
  double t3737;
  double t3749;
  double t3761;
  double t1488;
  double t1505;
  double t1579;
  double t1723;
  double t1725;
  double t1730;
  double t3788;
  double t3794;
  double t3821;
  double t2173;
  double t2210;
  double t2219;
  double t2442;
  double t2490;
  double t2495;
  double t2612;
  double t2674;
  double t2682;
  double t4033;
  double t4060;
  double t4072;
  double t4143;
  double t4162;
  double t4165;
  double t2846;
  double t2852;
  double t2861;
  double t2979;
  double t3016;
  double t3020;
  double t4181;
  double t4208;
  double t4245;
  double t4311;
  double t4324;
  double t4341;
  double t3192;
  double t3235;
  double t3248;
  double t4361;
  double t4410;
  double t4423;
  double t4496;
  double t4530;
  double t4538;
  double t4852;
  double t4854;
  double t4862;
  double t5207;
  double t5215;
  double t5312;
  double t5448;
  double t5455;
  double t5482;
  double t5501;
  double t5612;
  double t5628;
  double t5641;
  double t5647;
  double t5661;
  double t5690;
  double t5718;
  double t5729;
  double t5773;
  double t5812;
  double t5831;
  double t6348;
  double t6353;
  double t6365;
  double t6512;
  double t6516;
  double t6523;
  double t6542;
  double t6547;
  double t6576;
  double t6625;
  double t6631;
  double t6657;
  double t6666;
  double t6710;
  double t6715;
  double t6770;
  double t6772;
  double t6817;
  double t6830;
  double t6834;
  double t6835;
  double t6932;
  double t6941;
  double t6944;
  double t6983;
  double t6986;
  double t6993;
  double t6997;
  double t7004;
  double t7005;
  double t7031;
  double t7032;
  double t7041;
  double t7048;
  double t7052;
  double t7065;
  double t7103;
  double t7107;
  double t7111;
  double t7129;
  double t7168;
  double t7184;
  double t7319;
  double t7320;
  double t7332;
  double t7345;
  double t7353;
  double t7371;
  double t7372;
  double t7373;
  double t7406;
  double t7411;
  double t7415;
  double t7454;
  double t7468;
  double t7470;
  double t7490;
  double t7499;
  double t7510;
  double t7529;
  double t7533;
  double t7534;
  double t7598;
  double t7612;
  double t7614;
  double t7627;
  double t7629;
  double t7634;
  double t7654;
  double t7656;
  double t7661;
  double t7663;
  double t7696;
  double t7706;
  double t7724;
  double t7727;
  double t7729;
  double t7740;
  double t7749;
  double t7757;
  double t7763;
  double t7780;
  double t7858;
  double t7860;
  double t7873;
  double t7922;
  double t7923;
  double t7927;
  double t7936;
  double t7939;
  double t7950;
  double t7954;
  double t7955;
  double t7957;
  double t7975;
  double t7976;
  double t7978;
  double t7994;
  double t8005;
  double t8007;
  double t8056;
  double t8058;
  double t8078;
  double t8079;
  double t8083;
  double t8087;
  double t8088;
  double t8090;
  double t8094;
  double t8097;
  double t8101;
  double t8105;
  double t8107;
  double t8108;
  double t8172;
  double t8180;
  double t8181;
  double t8184;
  double t8189;
  double t8209;
  double t8220;
  double t8225;
  double t8226;
  double t8228;
  double t8234;
  double t8239;
  double t8240;
  double t8243;
  double t8246;
  double t8249;
  double t8262;
  double t8268;
  double t8273;
  double t7875;
  double t7910;
  double t7915;
  double t7931;
  double t7952;
  double t7959;
  double t7993;
  double t8008;
  double t8009;
  double t8011;
  double t8018;
  double t8021;
  double t8022;
  double t8029;
  double t8030;
  double t8032;
  double t3922;
  double t3943;
  double t3973;
  double t8470;
  double t8471;
  double t8474;
  double t8481;
  double t8492;
  double t8496;
  double t8330;
  double t8335;
  double t8339;
  double t8343;
  double t8345;
  double t8535;
  double t8536;
  double t8538;
  double t8546;
  double t8549;
  double t8552;
  double t8575;
  double t8577;
  double t8578;
  double t8581;
  double t8583;
  double t8585;
  double t8610;
  double t8611;
  double t8614;
  double t8618;
  double t8619;
  double t8625;
  double t8640;
  double t8641;
  double t8643;
  double t8645;
  double t8647;
  double t8650;
  double t8683;
  double t8684;
  double t8687;
  double t8691;
  double t8697;
  double t8702;
  double t8703;
  double t8706;
  double t8668;
  double t8669;
  double t8672;
  double t8673;
  double t8678;
  double t8741;
  double t8745;
  double t8746;
  double t8748;
  double t8752;
  double t8754;
  double t8759;
  double t8760;
  double t8761;
  double t8763;
  double t8765;
  double t8778;
  double t8788;
  double t8797;
  double t8798;
  double t8832;
  double t8834;
  double t8836;
  double t8842;
  double t8844;
  double t8845;
  double t8849;
  double t8853;
  double t8855;
  double t8860;
  double t8862;
  double t8863;
  double t8868;
  double t8871;
  double t8874;
  double t8927;
  double t8932;
  double t4687;
  double t8907;
  double t8908;
  double t8909;
  double t8921;
  double t8922;
  double t8973;
  double t8974;
  double t8976;
  double t8980;
  double t8982;
  double t8985;
  double t8988;
  double t9043;
  double t9048;
  double t9049;
  double t9058;
  double t9059;
  double t9064;
  double t9065;
  double t8941;
  double t4722;
  double t4791;
  double t9098;
  double t9099;
  double t9105;
  double t9109;
  double t9110;
  double t8995;
  double t9133;
  double t9134;
  double t9137;
  double t9014;
  double t9068;
  double t9169;
  double t9172;
  double t9173;
  double t9080;
  t372 = Cos(var1[5]);
  t383 = Sin(var1[3]);
  t455 = Sin(var1[4]);
  t369 = Cos(var1[3]);
  t463 = Sin(var1[5]);
  t42 = Cos(var1[6]);
  t373 = -1.*t369*t372;
  t502 = -1.*t383*t455*t463;
  t534 = t373 + t502;
  t753 = -1.*t372*t383*t455;
  t778 = t369*t463;
  t949 = t753 + t778;
  t1005 = Sin(var1[6]);
  t1337 = Cos(var1[7]);
  t1397 = -1.*t1337;
  t1484 = 1. + t1397;
  t1491 = Sin(var1[7]);
  t1130 = t42*t534;
  t1211 = t949*t1005;
  t1237 = t1130 + t1211;
  t1694 = Cos(var1[4]);
  t2109 = Cos(var1[8]);
  t2110 = -1.*t2109;
  t2121 = 1. + t2110;
  t2206 = Sin(var1[8]);
  t1853 = -1.*t1694*t1337*t383;
  t1970 = t1237*t1491;
  t1995 = t1853 + t1970;
  t2327 = t42*t949;
  t2421 = -1.*t534*t1005;
  t2432 = t2327 + t2421;
  t2527 = Cos(var1[9]);
  t2572 = -1.*t2527;
  t2585 = 1. + t2572;
  t2650 = Sin(var1[9]);
  t2750 = t2109*t1995;
  t2763 = t2432*t2206;
  t2774 = t2750 + t2763;
  t2868 = t2109*t2432;
  t2869 = -1.*t1995*t2206;
  t2889 = t2868 + t2869;
  t2912 = Cos(var1[10]);
  t2920 = -1.*t2912;
  t2949 = 1. + t2920;
  t2995 = Sin(var1[10]);
  t3034 = -1.*t2650*t2774;
  t3067 = t2527*t2889;
  t3176 = t3034 + t3067;
  t3264 = t2527*t2774;
  t3326 = t2650*t2889;
  t3348 = t3264 + t3326;
  t49 = -1.*t42;
  t53 = 1. + t49;
  t195 = 0.135*t53;
  t310 = 0. + t195;
  t1015 = -0.135*t1005;
  t1051 = 0. + t1015;
  t3565 = -1.*t372*t383;
  t3613 = t369*t455*t463;
  t3644 = t3565 + t3613;
  t3737 = t369*t372*t455;
  t3749 = t383*t463;
  t3761 = t3737 + t3749;
  t1488 = 0.135*t1484;
  t1505 = 0.049*t1491;
  t1579 = 0. + t1488 + t1505;
  t1723 = -0.049*t1484;
  t1725 = 0.135*t1491;
  t1730 = 0. + t1723 + t1725;
  t3788 = t42*t3644;
  t3794 = t3761*t1005;
  t3821 = t3788 + t3794;
  t2173 = -0.049*t2121;
  t2210 = -0.09*t2206;
  t2219 = 0. + t2173 + t2210;
  t2442 = -0.09*t2121;
  t2490 = 0.049*t2206;
  t2495 = 0. + t2442 + t2490;
  t2612 = -0.049*t2585;
  t2674 = -0.21*t2650;
  t2682 = 0. + t2612 + t2674;
  t4033 = t369*t1694*t1337;
  t4060 = t3821*t1491;
  t4072 = t4033 + t4060;
  t4143 = t42*t3761;
  t4162 = -1.*t3644*t1005;
  t4165 = t4143 + t4162;
  t2846 = -0.21*t2585;
  t2852 = 0.049*t2650;
  t2861 = 0. + t2846 + t2852;
  t2979 = -0.2707*t2949;
  t3016 = 0.0016*t2995;
  t3020 = 0. + t2979 + t3016;
  t4181 = t2109*t4072;
  t4208 = t4165*t2206;
  t4245 = t4181 + t4208;
  t4311 = t2109*t4165;
  t4324 = -1.*t4072*t2206;
  t4341 = t4311 + t4324;
  t3192 = -0.0016*t2949;
  t3235 = -0.2707*t2995;
  t3248 = 0. + t3192 + t3235;
  t4361 = -1.*t2650*t4245;
  t4410 = t2527*t4341;
  t4423 = t4361 + t4410;
  t4496 = t2527*t4245;
  t4530 = t2650*t4341;
  t4538 = t4496 + t4530;
  t4852 = t369*t1694*t42*t463;
  t4854 = t369*t1694*t372*t1005;
  t4862 = t4852 + t4854;
  t5207 = -1.*t369*t1337*t455;
  t5215 = t4862*t1491;
  t5312 = t5207 + t5215;
  t5448 = t369*t1694*t372*t42;
  t5455 = -1.*t369*t1694*t463*t1005;
  t5482 = t5448 + t5455;
  t5501 = t2109*t5312;
  t5612 = t5482*t2206;
  t5628 = t5501 + t5612;
  t5641 = t2109*t5482;
  t5647 = -1.*t5312*t2206;
  t5661 = t5641 + t5647;
  t5690 = -1.*t2650*t5628;
  t5718 = t2527*t5661;
  t5729 = t5690 + t5718;
  t5773 = t2527*t5628;
  t5812 = t2650*t5661;
  t5831 = t5773 + t5812;
  t6348 = t1694*t42*t383*t463;
  t6353 = t1694*t372*t383*t1005;
  t6365 = t6348 + t6353;
  t6512 = -1.*t1337*t383*t455;
  t6516 = t6365*t1491;
  t6523 = t6512 + t6516;
  t6542 = t1694*t372*t42*t383;
  t6547 = -1.*t1694*t383*t463*t1005;
  t6576 = t6542 + t6547;
  t6625 = t2109*t6523;
  t6631 = t6576*t2206;
  t6657 = t6625 + t6631;
  t6666 = t2109*t6576;
  t6710 = -1.*t6523*t2206;
  t6715 = t6666 + t6710;
  t6770 = -1.*t2650*t6657;
  t6772 = t2527*t6715;
  t6817 = t6770 + t6772;
  t6830 = t2527*t6657;
  t6834 = t2650*t6715;
  t6835 = t6830 + t6834;
  t6932 = -1.*t42*t455*t463;
  t6941 = -1.*t372*t455*t1005;
  t6944 = t6932 + t6941;
  t6983 = -1.*t1694*t1337;
  t6986 = t6944*t1491;
  t6993 = t6983 + t6986;
  t6997 = -1.*t372*t42*t455;
  t7004 = t455*t463*t1005;
  t7005 = t6997 + t7004;
  t7031 = t2109*t6993;
  t7032 = t7005*t2206;
  t7041 = t7031 + t7032;
  t7048 = t2109*t7005;
  t7052 = -1.*t6993*t2206;
  t7065 = t7048 + t7052;
  t7103 = -1.*t2650*t7041;
  t7107 = t2527*t7065;
  t7111 = t7103 + t7107;
  t7129 = t2527*t7041;
  t7168 = t2650*t7065;
  t7184 = t7129 + t7168;
  t7319 = t372*t383;
  t7320 = -1.*t369*t455*t463;
  t7332 = t7319 + t7320;
  t7345 = t7332*t1005;
  t7353 = t4143 + t7345;
  t7371 = t42*t7332;
  t7372 = -1.*t3761*t1005;
  t7373 = t7371 + t7372;
  t7406 = t2109*t7353*t1491;
  t7411 = t7373*t2206;
  t7415 = t7406 + t7411;
  t7454 = t2109*t7373;
  t7468 = -1.*t7353*t1491*t2206;
  t7470 = t7454 + t7468;
  t7490 = -1.*t2650*t7415;
  t7499 = t2527*t7470;
  t7510 = t7490 + t7499;
  t7529 = t2527*t7415;
  t7533 = t2650*t7470;
  t7534 = t7529 + t7533;
  t7598 = t372*t383*t455;
  t7612 = -1.*t369*t463;
  t7614 = t7598 + t7612;
  t7627 = t42*t7614;
  t7629 = t534*t1005;
  t7634 = t7627 + t7629;
  t7654 = -1.*t7614*t1005;
  t7656 = t1130 + t7654;
  t7661 = t2109*t7634*t1491;
  t7663 = t7656*t2206;
  t7696 = t7661 + t7663;
  t7706 = t2109*t7656;
  t7724 = -1.*t7634*t1491*t2206;
  t7727 = t7706 + t7724;
  t7729 = -1.*t2650*t7696;
  t7740 = t2527*t7727;
  t7749 = t7729 + t7740;
  t7757 = t2527*t7696;
  t7763 = t2650*t7727;
  t7780 = t7757 + t7763;
  t7858 = t1694*t372*t42;
  t7860 = -1.*t1694*t463*t1005;
  t7873 = t7858 + t7860;
  t7922 = -1.*t1694*t42*t463;
  t7923 = -1.*t1694*t372*t1005;
  t7927 = t7922 + t7923;
  t7936 = t2109*t7873*t1491;
  t7939 = t7927*t2206;
  t7950 = t7936 + t7939;
  t7954 = t2109*t7927;
  t7955 = -1.*t7873*t1491*t2206;
  t7957 = t7954 + t7955;
  t7975 = -1.*t2650*t7950;
  t7976 = t2527*t7957;
  t7978 = t7975 + t7976;
  t7994 = t2527*t7950;
  t8005 = t2650*t7957;
  t8007 = t7994 + t8005;
  t8056 = -1.*t42*t3644;
  t8058 = t8056 + t7372;
  t8078 = t2109*t4165*t1491;
  t8079 = t8058*t2206;
  t8083 = t8078 + t8079;
  t8087 = t2109*t8058;
  t8088 = -1.*t4165*t1491*t2206;
  t8090 = t8087 + t8088;
  t8094 = -1.*t2650*t8083;
  t8097 = t2527*t8090;
  t8101 = t8094 + t8097;
  t8105 = t2527*t8083;
  t8107 = t2650*t8090;
  t8108 = t8105 + t8107;
  t8172 = t369*t372;
  t8180 = t383*t455*t463;
  t8181 = t8172 + t8180;
  t8184 = -1.*t8181*t1005;
  t8189 = t7627 + t8184;
  t8209 = -1.*t42*t8181;
  t8220 = t8209 + t7654;
  t8225 = t2109*t8189*t1491;
  t8226 = t8220*t2206;
  t8228 = t8225 + t8226;
  t8234 = t2109*t8220;
  t8239 = -1.*t8189*t1491*t2206;
  t8240 = t8234 + t8239;
  t8243 = -1.*t2650*t8228;
  t8246 = t2527*t8240;
  t8249 = t8243 + t8246;
  t8262 = t2527*t8228;
  t8268 = t2650*t8240;
  t8273 = t8262 + t8268;
  t7875 = 0.1305*t1337*t7873;
  t7910 = t7873*t1579;
  t7915 = t7873*t1491*t2219;
  t7931 = t7927*t2495;
  t7952 = t2682*t7950;
  t7959 = t2861*t7957;
  t7993 = t3020*t7978;
  t8008 = t3248*t8007;
  t8009 = t2995*t7978;
  t8011 = t2912*t8007;
  t8018 = t8009 + t8011;
  t8021 = -0.0016*t8018;
  t8022 = t2912*t7978;
  t8029 = -1.*t2995*t8007;
  t8030 = t8022 + t8029;
  t8032 = -0.2707*t8030;
  t3922 = t1337*t3821;
  t3943 = -1.*t369*t1694*t1491;
  t3973 = t3922 + t3943;
  t8470 = -1.*t2109*t2650*t3973;
  t8471 = -1.*t2527*t3973*t2206;
  t8474 = t8470 + t8471;
  t8481 = t2527*t2109*t3973;
  t8492 = -1.*t2650*t3973*t2206;
  t8496 = t8481 + t8492;
  t8330 = 0.135*t1337;
  t8335 = -0.049*t1491;
  t8339 = t8330 + t8335;
  t8343 = 0.049*t1337;
  t8345 = t8343 + t1725;
  t8535 = t42*t8181;
  t8536 = t7614*t1005;
  t8538 = t8535 + t8536;
  t8546 = t1337*t8538;
  t8549 = -1.*t1694*t383*t1491;
  t8552 = t8546 + t8549;
  t8575 = -1.*t2109*t2650*t8552;
  t8577 = -1.*t2527*t8552*t2206;
  t8578 = t8575 + t8577;
  t8581 = t2527*t2109*t8552;
  t8583 = -1.*t2650*t8552*t2206;
  t8585 = t8581 + t8583;
  t8610 = t1694*t42*t463;
  t8611 = t1694*t372*t1005;
  t8614 = t8610 + t8611;
  t8618 = t1337*t8614;
  t8619 = t455*t1491;
  t8625 = t8618 + t8619;
  t8640 = -1.*t2109*t2650*t8625;
  t8641 = -1.*t2527*t8625*t2206;
  t8643 = t8640 + t8641;
  t8645 = t2527*t2109*t8625;
  t8647 = -1.*t2650*t8625*t2206;
  t8650 = t8645 + t8647;
  t8683 = -1.*t2109*t4072;
  t8684 = -1.*t4165*t2206;
  t8687 = t8683 + t8684;
  t8691 = t2650*t8687;
  t8697 = t8691 + t4410;
  t8702 = t2527*t8687;
  t8703 = -1.*t2650*t4341;
  t8706 = t8702 + t8703;
  t8668 = 0.049*t2109;
  t8669 = t8668 + t2210;
  t8672 = -0.09*t2109;
  t8673 = -0.049*t2206;
  t8678 = t8672 + t8673;
  t8741 = t1694*t1337*t383;
  t8745 = t8538*t1491;
  t8746 = t8741 + t8745;
  t8748 = -1.*t2109*t8746;
  t8752 = -1.*t8189*t2206;
  t8754 = t8748 + t8752;
  t8759 = t2109*t8189;
  t8760 = -1.*t8746*t2206;
  t8761 = t8759 + t8760;
  t8763 = t2650*t8754;
  t8765 = t2527*t8761;
  t8778 = t8763 + t8765;
  t8788 = t2527*t8754;
  t8797 = -1.*t2650*t8761;
  t8798 = t8788 + t8797;
  t8832 = -1.*t1337*t455;
  t8834 = t8614*t1491;
  t8836 = t8832 + t8834;
  t8842 = -1.*t2109*t8836;
  t8844 = -1.*t7873*t2206;
  t8845 = t8842 + t8844;
  t8849 = t2109*t7873;
  t8853 = -1.*t8836*t2206;
  t8855 = t8849 + t8853;
  t8860 = t2650*t8845;
  t8862 = t2527*t8855;
  t8863 = t8860 + t8862;
  t8868 = t2527*t8845;
  t8871 = -1.*t2650*t8855;
  t8874 = t8868 + t8871;
  t8927 = -1.*t2527*t4245;
  t8932 = t8927 + t8703;
  t4687 = t2912*t4423;
  t8907 = -0.21*t2527;
  t8908 = -0.049*t2650;
  t8909 = t8907 + t8908;
  t8921 = 0.049*t2527;
  t8922 = t8921 + t2674;
  t8973 = t2109*t8746;
  t8974 = t8189*t2206;
  t8976 = t8973 + t8974;
  t8980 = -1.*t2650*t8976;
  t8982 = t8980 + t8765;
  t8985 = -1.*t2527*t8976;
  t8988 = t8985 + t8797;
  t9043 = t2109*t8836;
  t9048 = t7873*t2206;
  t9049 = t9043 + t9048;
  t9058 = -1.*t2650*t9049;
  t9059 = t9058 + t8862;
  t9064 = -1.*t2527*t9049;
  t9065 = t9064 + t8871;
  t8941 = -1.*t2995*t4423;
  t4722 = -1.*t2995*t4538;
  t4791 = t4687 + t4722;
  t9098 = 0.0016*t2912;
  t9099 = t9098 + t3235;
  t9105 = -0.2707*t2912;
  t9109 = -0.0016*t2995;
  t9110 = t9105 + t9109;
  t8995 = -1.*t2995*t8982;
  t9133 = t2527*t8976;
  t9134 = t2650*t8761;
  t9137 = t9133 + t9134;
  t9014 = t2912*t8982;
  t9068 = -1.*t2995*t9059;
  t9169 = t2527*t9049;
  t9172 = t2650*t8855;
  t9173 = t9169 + t9172;
  t9080 = t2912*t9059;

  p_output1(0)=1.;
  p_output1(1)=0;
  p_output1(2)=0;
  p_output1(3)=0;
  p_output1(4)=1.;
  p_output1(5)=0;
  p_output1(6)=0;
  p_output1(7)=0;
  p_output1(8)=1.;
  p_output1(9)=t1237*t1579 + t1995*t2219 + t2432*t2495 + t2682*t2774 + t2861*t2889 + t3020*t3176 + t3248*t3348 - 0.0016*(t2995*t3176 + t2912*t3348) - 0.2707*(t2912*t3176 - 1.*t2995*t3348) - 1.*t1694*t1730*t383 + 0.1305*(t1237*t1337 + t1491*t1694*t383) + t310*t534 + t1051*t949;
  p_output1(10)=t310*t3644 + t1694*t1730*t369 + t1051*t3761 + t1579*t3821 + 0.1305*t3973 + t2219*t4072 + t2495*t4165 + t2682*t4245 + t2861*t4341 + t3020*t4423 + t3248*t4538 - 0.0016*(t2995*t4423 + t2912*t4538) - 0.2707*t4791;
  p_output1(11)=0;
  p_output1(12)=t1051*t1694*t369*t372 - 1.*t1730*t369*t455 + t1694*t310*t369*t463 + t1579*t4862 + 0.1305*(t1491*t369*t455 + t1337*t4862) + t2219*t5312 + t2495*t5482 + t2682*t5628 + t2861*t5661 + t3020*t5729 + t3248*t5831 - 0.0016*(t2995*t5729 + t2912*t5831) - 0.2707*(t2912*t5729 - 1.*t2995*t5831);
  p_output1(13)=t1051*t1694*t372*t383 - 1.*t1730*t383*t455 + t1694*t310*t383*t463 + t1579*t6365 + 0.1305*(t1491*t383*t455 + t1337*t6365) + t2219*t6523 + t2495*t6576 + t2682*t6657 + t2861*t6715 + t3020*t6817 + t3248*t6835 - 0.0016*(t2995*t6817 + t2912*t6835) - 0.2707*(t2912*t6817 - 1.*t2995*t6835);
  p_output1(14)=-1.*t1694*t1730 - 1.*t1051*t372*t455 - 1.*t310*t455*t463 + t1579*t6944 + 0.1305*(t1491*t1694 + t1337*t6944) + t2219*t6993 + t2495*t7005 + t2682*t7041 + t2861*t7065 + t3020*t7111 + t3248*t7184 - 0.0016*(t2995*t7111 + t2912*t7184) - 0.2707*(t2912*t7111 - 1.*t2995*t7184);
  p_output1(15)=t310*t3761 + t1051*t7332 + 0.1305*t1337*t7353 + t1579*t7353 + t1491*t2219*t7353 + t2495*t7373 + t2682*t7415 + t2861*t7470 + t3020*t7510 + t3248*t7534 - 0.0016*(t2995*t7510 + t2912*t7534) - 0.2707*(t2912*t7510 - 1.*t2995*t7534);
  p_output1(16)=t1051*t534 + t310*t7614 + 0.1305*t1337*t7634 + t1579*t7634 + t1491*t2219*t7634 + t2495*t7656 + t2682*t7696 + t2861*t7727 + t3020*t7749 + t3248*t7780 - 0.0016*(t2995*t7749 + t2912*t7780) - 0.2707*(t2912*t7749 - 1.*t2995*t7780);
  p_output1(17)=t1694*t310*t372 - 1.*t1051*t1694*t463 + t7875 + t7910 + t7915 + t7931 + t7952 + t7959 + t7993 + t8008 + t8021 + t8032;
  p_output1(18)=0.135*t1005*t3644 + 0.1305*t1337*t4165 + t1579*t4165 + t1491*t2219*t4165 - 0.135*t3761*t42 + t2495*t8058 + t2682*t8083 + t2861*t8090 + t3020*t8101 + t3248*t8108 - 0.0016*(t2995*t8101 + t2912*t8108) - 0.2707*(t2912*t8101 - 1.*t2995*t8108);
  p_output1(19)=-0.135*t42*t7614 + 0.135*t1005*t8181 + 0.1305*t1337*t8189 + t1579*t8189 + t1491*t2219*t8189 + t2495*t8220 + t2682*t8228 + t2861*t8240 + t3020*t8249 + t3248*t8273 - 0.0016*(t2995*t8249 + t2912*t8273) - 0.2707*(t2912*t8249 - 1.*t2995*t8273);
  p_output1(20)=-0.135*t1694*t372*t42 + 0.135*t1005*t1694*t463 + t7875 + t7910 + t7915 + t7931 + t7952 + t7959 + t7993 + t8008 + t8021 + t8032;
  p_output1(21)=0.1305*(-1.*t1337*t1694*t369 - 1.*t1491*t3821) + t2219*t3973 + t2109*t2682*t3973 - 1.*t2206*t2861*t3973 + t1694*t369*t8339 + t3821*t8345 + t3020*t8474 + t3248*t8496 - 0.0016*(t2995*t8474 + t2912*t8496) - 0.2707*(t2912*t8474 - 1.*t2995*t8496);
  p_output1(22)=t1694*t383*t8339 + t8345*t8538 + 0.1305*(t1853 - 1.*t1491*t8538) + t2219*t8552 + t2109*t2682*t8552 - 1.*t2206*t2861*t8552 + t3020*t8578 + t3248*t8585 - 0.0016*(t2995*t8578 + t2912*t8585) - 0.2707*(t2912*t8578 - 1.*t2995*t8585);
  p_output1(23)=-1.*t455*t8339 + t8345*t8614 + 0.1305*(t1337*t455 - 1.*t1491*t8614) + t2219*t8625 + t2109*t2682*t8625 - 1.*t2206*t2861*t8625 + t3020*t8643 + t3248*t8650 - 0.0016*(t2995*t8643 + t2912*t8650) - 0.2707*(t2912*t8643 - 1.*t2995*t8650);
  p_output1(24)=t2682*t4341 + t4165*t8669 + t4072*t8678 + t2861*t8687 + t3248*t8697 + t3020*t8706 - 0.2707*(-1.*t2995*t8697 + t2912*t8706) - 0.0016*(t2912*t8697 + t2995*t8706);
  p_output1(25)=t8189*t8669 + t8678*t8746 + t2861*t8754 + t2682*t8761 + t3248*t8778 + t3020*t8798 - 0.2707*(-1.*t2995*t8778 + t2912*t8798) - 0.0016*(t2912*t8778 + t2995*t8798);
  p_output1(26)=t7873*t8669 + t8678*t8836 + t2861*t8845 + t2682*t8855 + t3248*t8863 + t3020*t8874 - 0.2707*(-1.*t2995*t8863 + t2912*t8874) - 0.0016*(t2912*t8863 + t2995*t8874);
  p_output1(27)=t3248*t4423 + t4245*t8909 + t4341*t8922 + t3020*t8932 - 0.0016*(t4687 + t2995*t8932) - 0.2707*(t2912*t8932 + t8941);
  p_output1(28)=t8761*t8922 + t8909*t8976 + t3248*t8982 + t3020*t8988 - 0.2707*(t2912*t8988 + t8995) - 0.0016*(t2995*t8988 + t9014);
  p_output1(29)=t8855*t8922 + t8909*t9049 + t3248*t9059 + t3020*t9065 - 0.2707*(t2912*t9065 + t9068) - 0.0016*(t2995*t9065 + t9080);
  p_output1(30)=-0.0016*t4791 - 0.2707*(-1.*t2912*t4538 + t8941) + t4423*t9099 + t4538*t9110;
  p_output1(31)=t8982*t9099 + t9110*t9137 - 0.2707*(t8995 - 1.*t2912*t9137) - 0.0016*(t9014 - 1.*t2995*t9137);
  p_output1(32)=t9059*t9099 + t9110*t9173 - 0.2707*(t9068 - 1.*t2912*t9173) - 0.0016*(t9080 - 1.*t2995*t9173);
  p_output1(33)=0;
  p_output1(34)=0;
  p_output1(35)=0;
  p_output1(36)=0;
  p_output1(37)=0;
  p_output1(38)=0;
  p_output1(39)=0;
  p_output1(40)=0;
  p_output1(41)=0;
  p_output1(42)=0;
  p_output1(43)=0;
  p_output1(44)=0;
  p_output1(45)=0;
  p_output1(46)=0;
  p_output1(47)=0;
  p_output1(48)=0;
  p_output1(49)=0;
  p_output1(50)=0;
  p_output1(51)=0;
  p_output1(52)=0;
  p_output1(53)=0;
  p_output1(54)=0;
  p_output1(55)=0;
  p_output1(56)=0;
  p_output1(57)=0;
  p_output1(58)=0;
  p_output1(59)=0;
}


       
Eigen::Matrix<double,3,20> Jp_knee_to_shin_left(const Eigen::Matrix<double,20,1> &var1)
//void Jp_knee_to_shin_left(Eigen::Matrix<double,3,20> &p_output1, const Eigen::Matrix<double,20,1> &var1)
{
  /* Call Subroutines */
  Eigen::Matrix<double,3,20>  p_output1;
  
  output1(p_output1, var1);

  return p_output1;
}



