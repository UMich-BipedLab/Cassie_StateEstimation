/*
 * Automatically Generated from Mathematica.
 * Thu 23 May 2019 13:09:58 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jp_knee_to_shin_right.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE static inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }


/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,20> &p_output1, const Eigen::Matrix<double,20,1> &var1)
{
  double t757;
  double t1384;
  double t943;
  double t1208;
  double t1413;
  double t46;
  double t187;
  double t225;
  double t641;
  double t868;
  double t1239;
  double t1509;
  double t1543;
  double t1604;
  double t2155;
  double t2182;
  double t2185;
  double t28;
  double t2485;
  double t2493;
  double t2498;
  double t2577;
  double t2639;
  double t2680;
  double t2721;
  double t2799;
  double t2805;
  double t2855;
  double t3213;
  double t3222;
  double t3263;
  double t3312;
  double t3316;
  double t3334;
  double t3373;
  double t3583;
  double t3648;
  double t3677;
  double t3826;
  double t4001;
  double t4057;
  double t4123;
  double t4214;
  double t4330;
  double t4400;
  double t4527;
  double t4545;
  double t4566;
  double t4646;
  double t4673;
  double t4700;
  double t328;
  double t750;
  double t752;
  double t917;
  double t925;
  double t1916;
  double t2009;
  double t2096;
  double t2123;
  double t2300;
  double t2325;
  double t2332;
  double t5173;
  double t5175;
  double t5183;
  double t5205;
  double t5246;
  double t5326;
  double t2719;
  double t2738;
  double t2740;
  double t5356;
  double t5412;
  double t5438;
  double t3151;
  double t3185;
  double t3199;
  double t3359;
  double t3503;
  double t3546;
  double t5473;
  double t5480;
  double t5505;
  double t5918;
  double t5925;
  double t5962;
  double t3746;
  double t3813;
  double t3817;
  double t4332;
  double t4428;
  double t4436;
  double t6015;
  double t6078;
  double t6110;
  double t6148;
  double t6233;
  double t6357;
  double t4573;
  double t4589;
  double t4604;
  double t6407;
  double t6423;
  double t6528;
  double t6583;
  double t6621;
  double t6673;
  double t6936;
  double t6967;
  double t6978;
  double t7007;
  double t7011;
  double t7019;
  double t7054;
  double t7156;
  double t7159;
  double t7194;
  double t7227;
  double t7251;
  double t7266;
  double t7290;
  double t7312;
  double t7336;
  double t7383;
  double t7416;
  double t7451;
  double t7467;
  double t7474;
  double t7768;
  double t7781;
  double t7797;
  double t7812;
  double t7822;
  double t7841;
  double t7942;
  double t7944;
  double t7970;
  double t7996;
  double t8004;
  double t8016;
  double t8048;
  double t8086;
  double t8089;
  double t8133;
  double t8134;
  double t8153;
  double t8179;
  double t8183;
  double t8219;
  double t8322;
  double t8327;
  double t8331;
  double t8361;
  double t8379;
  double t8391;
  double t8434;
  double t8451;
  double t8454;
  double t8469;
  double t8488;
  double t8508;
  double t8547;
  double t8548;
  double t8568;
  double t8573;
  double t8575;
  double t8583;
  double t8596;
  double t8608;
  double t8613;
  double t8731;
  double t8733;
  double t8743;
  double t8784;
  double t8787;
  double t8775;
  double t8777;
  double t8779;
  double t8807;
  double t8808;
  double t8810;
  double t8817;
  double t8820;
  double t8822;
  double t8866;
  double t8880;
  double t8883;
  double t8916;
  double t8923;
  double t8945;
  double t9009;
  double t9011;
  double t9015;
  double t9036;
  double t9039;
  double t9044;
  double t9024;
  double t9029;
  double t9060;
  double t9062;
  double t9070;
  double t9085;
  double t9104;
  double t9110;
  double t9144;
  double t9145;
  double t9151;
  double t9168;
  double t9170;
  double t9180;
  double t9272;
  double t9279;
  double t9284;
  double t9265;
  double t9266;
  double t9267;
  double t9296;
  double t9298;
  double t9300;
  double t9310;
  double t9314;
  double t9319;
  double t9339;
  double t9346;
  double t9350;
  double t9356;
  double t9358;
  double t9366;
  double t9409;
  double t9414;
  double t9429;
  double t9432;
  double t9433;
  double t9436;
  double t9438;
  double t9440;
  double t9446;
  double t9457;
  double t9464;
  double t9473;
  double t9475;
  double t9480;
  double t9499;
  double t9505;
  double t9508;
  double t9556;
  double t9560;
  double t9531;
  double t9548;
  double t9603;
  double t9608;
  double t9614;
  double t9626;
  double t9627;
  double t9634;
  double t9641;
  double t9644;
  double t9654;
  double t9663;
  double t9667;
  double t9670;
  double t9271;
  double t9286;
  double t9291;
  double t9295;
  double t9307;
  double t9323;
  double t9355;
  double t9368;
  double t9369;
  double t9370;
  double t9372;
  double t9375;
  double t9378;
  double t9384;
  double t9388;
  double t9392;
  double t5590;
  double t5603;
  double t5701;
  double t9810;
  double t9812;
  double t9822;
  double t9828;
  double t9830;
  double t9836;
  double t9751;
  double t9752;
  double t9755;
  double t9760;
  double t9764;
  double t9881;
  double t9882;
  double t9884;
  double t9893;
  double t9895;
  double t9903;
  double t9926;
  double t9929;
  double t9932;
  double t9938;
  double t9939;
  double t9950;
  double t9979;
  double t9982;
  double t9983;
  double t9989;
  double t9992;
  double t9993;
  double t10022;
  double t10035;
  double t10036;
  double t10047;
  double t10048;
  double t10059;
  double t10111;
  double t10112;
  double t10117;
  double t10121;
  double t10122;
  double t10127;
  double t10130;
  double t10138;
  double t10092;
  double t10096;
  double t10101;
  double t10104;
  double t10105;
  double t10167;
  double t10171;
  double t10173;
  double t10178;
  double t10180;
  double t10182;
  double t10189;
  double t10191;
  double t10194;
  double t10197;
  double t10200;
  double t10201;
  double t10204;
  double t10209;
  double t10213;
  double t10244;
  double t10245;
  double t10248;
  double t10251;
  double t10253;
  double t10254;
  double t10261;
  double t10265;
  double t10266;
  double t10270;
  double t10274;
  double t10275;
  double t10285;
  double t10287;
  double t10291;
  double t10319;
  double t10322;
  double t6780;
  double t10306;
  double t10307;
  double t10308;
  double t10311;
  double t10313;
  double t10345;
  double t10350;
  double t10354;
  double t10365;
  double t10367;
  double t10372;
  double t10373;
  double t10395;
  double t10396;
  double t10402;
  double t10406;
  double t10408;
  double t10411;
  double t10416;
  double t10325;
  double t6783;
  double t6787;
  double t10433;
  double t10437;
  double t10440;
  double t10441;
  double t10444;
  double t10376;
  double t10460;
  double t10462;
  double t10465;
  double t10384;
  double t10418;
  double t10483;
  double t10488;
  double t10490;
  double t10428;
  t757 = Sin(var1[3]);
  t1384 = Cos(var1[3]);
  t943 = Cos(var1[5]);
  t1208 = Sin(var1[4]);
  t1413 = Sin(var1[5]);
  t46 = Cos(var1[14]);
  t187 = -1.*t46;
  t225 = 1. + t187;
  t641 = Sin(var1[14]);
  t868 = Sin(var1[13]);
  t1239 = -1.*t943*t757*t1208;
  t1509 = t1384*t1413;
  t1543 = t1239 + t1509;
  t1604 = Cos(var1[13]);
  t2155 = -1.*t1384*t943;
  t2182 = -1.*t757*t1208*t1413;
  t2185 = t2155 + t2182;
  t28 = Cos(var1[4]);
  t2485 = t868*t1543;
  t2493 = t1604*t2185;
  t2498 = t2485 + t2493;
  t2577 = Cos(var1[15]);
  t2639 = -1.*t2577;
  t2680 = 1. + t2639;
  t2721 = Sin(var1[15]);
  t2799 = t1604*t1543;
  t2805 = -1.*t868*t2185;
  t2855 = t2799 + t2805;
  t3213 = -1.*t46*t28*t757;
  t3222 = t641*t2498;
  t3263 = t3213 + t3222;
  t3312 = Cos(var1[16]);
  t3316 = -1.*t3312;
  t3334 = 1. + t3316;
  t3373 = Sin(var1[16]);
  t3583 = t2721*t2855;
  t3648 = t2577*t3263;
  t3677 = t3583 + t3648;
  t3826 = t2577*t2855;
  t4001 = -1.*t2721*t3263;
  t4057 = t3826 + t4001;
  t4123 = Cos(var1[17]);
  t4214 = -1.*t4123;
  t4330 = 1. + t4214;
  t4400 = Sin(var1[17]);
  t4527 = -1.*t3373*t3677;
  t4545 = t3312*t4057;
  t4566 = t4527 + t4545;
  t4646 = t3312*t3677;
  t4673 = t3373*t4057;
  t4700 = t4646 + t4673;
  t328 = -0.049*t225;
  t750 = -0.135*t641;
  t752 = 0. + t328 + t750;
  t917 = 0.135*t868;
  t925 = 0. + t917;
  t1916 = -1.*t1604;
  t2009 = 1. + t1916;
  t2096 = -0.135*t2009;
  t2123 = 0. + t2096;
  t2300 = -0.135*t225;
  t2325 = 0.049*t641;
  t2332 = 0. + t2300 + t2325;
  t5173 = t1384*t943*t1208;
  t5175 = t757*t1413;
  t5183 = t5173 + t5175;
  t5205 = -1.*t943*t757;
  t5246 = t1384*t1208*t1413;
  t5326 = t5205 + t5246;
  t2719 = -0.09*t2680;
  t2738 = 0.049*t2721;
  t2740 = 0. + t2719 + t2738;
  t5356 = t868*t5183;
  t5412 = t1604*t5326;
  t5438 = t5356 + t5412;
  t3151 = -0.049*t2680;
  t3185 = -0.09*t2721;
  t3199 = 0. + t3151 + t3185;
  t3359 = -0.049*t3334;
  t3503 = -0.21*t3373;
  t3546 = 0. + t3359 + t3503;
  t5473 = t1604*t5183;
  t5480 = -1.*t868*t5326;
  t5505 = t5473 + t5480;
  t5918 = t46*t1384*t28;
  t5925 = t641*t5438;
  t5962 = t5918 + t5925;
  t3746 = -0.21*t3334;
  t3813 = 0.049*t3373;
  t3817 = 0. + t3746 + t3813;
  t4332 = -0.2707*t4330;
  t4428 = 0.0016*t4400;
  t4436 = 0. + t4332 + t4428;
  t6015 = t2721*t5505;
  t6078 = t2577*t5962;
  t6110 = t6015 + t6078;
  t6148 = t2577*t5505;
  t6233 = -1.*t2721*t5962;
  t6357 = t6148 + t6233;
  t4573 = -0.0016*t4330;
  t4589 = -0.2707*t4400;
  t4604 = 0. + t4573 + t4589;
  t6407 = -1.*t3373*t6110;
  t6423 = t3312*t6357;
  t6528 = t6407 + t6423;
  t6583 = t3312*t6110;
  t6621 = t3373*t6357;
  t6673 = t6583 + t6621;
  t6936 = t1384*t28*t943*t868;
  t6967 = t1604*t1384*t28*t1413;
  t6978 = t6936 + t6967;
  t7007 = t1604*t1384*t28*t943;
  t7011 = -1.*t1384*t28*t868*t1413;
  t7019 = t7007 + t7011;
  t7054 = -1.*t46*t1384*t1208;
  t7156 = t641*t6978;
  t7159 = t7054 + t7156;
  t7194 = t2721*t7019;
  t7227 = t2577*t7159;
  t7251 = t7194 + t7227;
  t7266 = t2577*t7019;
  t7290 = -1.*t2721*t7159;
  t7312 = t7266 + t7290;
  t7336 = -1.*t3373*t7251;
  t7383 = t3312*t7312;
  t7416 = t7336 + t7383;
  t7451 = t3312*t7251;
  t7467 = t3373*t7312;
  t7474 = t7451 + t7467;
  t7768 = t28*t943*t868*t757;
  t7781 = t1604*t28*t757*t1413;
  t7797 = t7768 + t7781;
  t7812 = t1604*t28*t943*t757;
  t7822 = -1.*t28*t868*t757*t1413;
  t7841 = t7812 + t7822;
  t7942 = -1.*t46*t757*t1208;
  t7944 = t641*t7797;
  t7970 = t7942 + t7944;
  t7996 = t2721*t7841;
  t8004 = t2577*t7970;
  t8016 = t7996 + t8004;
  t8048 = t2577*t7841;
  t8086 = -1.*t2721*t7970;
  t8089 = t8048 + t8086;
  t8133 = -1.*t3373*t8016;
  t8134 = t3312*t8089;
  t8153 = t8133 + t8134;
  t8179 = t3312*t8016;
  t8183 = t3373*t8089;
  t8219 = t8179 + t8183;
  t8322 = -1.*t943*t868*t1208;
  t8327 = -1.*t1604*t1208*t1413;
  t8331 = t8322 + t8327;
  t8361 = -1.*t1604*t943*t1208;
  t8379 = t868*t1208*t1413;
  t8391 = t8361 + t8379;
  t8434 = -1.*t46*t28;
  t8451 = t641*t8331;
  t8454 = t8434 + t8451;
  t8469 = t2721*t8391;
  t8488 = t2577*t8454;
  t8508 = t8469 + t8488;
  t8547 = t2577*t8391;
  t8548 = -1.*t2721*t8454;
  t8568 = t8547 + t8548;
  t8573 = -1.*t3373*t8508;
  t8575 = t3312*t8568;
  t8583 = t8573 + t8575;
  t8596 = t3312*t8508;
  t8608 = t3373*t8568;
  t8613 = t8596 + t8608;
  t8731 = t943*t757;
  t8733 = -1.*t1384*t1208*t1413;
  t8743 = t8731 + t8733;
  t8784 = t868*t8743;
  t8787 = t5473 + t8784;
  t8775 = -1.*t868*t5183;
  t8777 = t1604*t8743;
  t8779 = t8775 + t8777;
  t8807 = t2721*t8779;
  t8808 = t2577*t641*t8787;
  t8810 = t8807 + t8808;
  t8817 = t2577*t8779;
  t8820 = -1.*t641*t2721*t8787;
  t8822 = t8817 + t8820;
  t8866 = -1.*t3373*t8810;
  t8880 = t3312*t8822;
  t8883 = t8866 + t8880;
  t8916 = t3312*t8810;
  t8923 = t3373*t8822;
  t8945 = t8916 + t8923;
  t9009 = t943*t757*t1208;
  t9011 = -1.*t1384*t1413;
  t9015 = t9009 + t9011;
  t9036 = t1604*t9015;
  t9039 = t868*t2185;
  t9044 = t9036 + t9039;
  t9024 = -1.*t868*t9015;
  t9029 = t9024 + t2493;
  t9060 = t2721*t9029;
  t9062 = t2577*t641*t9044;
  t9070 = t9060 + t9062;
  t9085 = t2577*t9029;
  t9104 = -1.*t641*t2721*t9044;
  t9110 = t9085 + t9104;
  t9144 = -1.*t3373*t9070;
  t9145 = t3312*t9110;
  t9151 = t9144 + t9145;
  t9168 = t3312*t9070;
  t9170 = t3373*t9110;
  t9180 = t9168 + t9170;
  t9272 = t1604*t28*t943;
  t9279 = -1.*t28*t868*t1413;
  t9284 = t9272 + t9279;
  t9265 = -1.*t28*t943*t868;
  t9266 = -1.*t1604*t28*t1413;
  t9267 = t9265 + t9266;
  t9296 = t2721*t9267;
  t9298 = t2577*t641*t9284;
  t9300 = t9296 + t9298;
  t9310 = t2577*t9267;
  t9314 = -1.*t641*t2721*t9284;
  t9319 = t9310 + t9314;
  t9339 = -1.*t3373*t9300;
  t9346 = t3312*t9319;
  t9350 = t9339 + t9346;
  t9356 = t3312*t9300;
  t9358 = t3373*t9319;
  t9366 = t9356 + t9358;
  t9409 = -1.*t1604*t5326;
  t9414 = t8775 + t9409;
  t9429 = t2721*t9414;
  t9432 = t2577*t641*t5505;
  t9433 = t9429 + t9432;
  t9436 = t2577*t9414;
  t9438 = -1.*t641*t2721*t5505;
  t9440 = t9436 + t9438;
  t9446 = -1.*t3373*t9433;
  t9457 = t3312*t9440;
  t9464 = t9446 + t9457;
  t9473 = t3312*t9433;
  t9475 = t3373*t9440;
  t9480 = t9473 + t9475;
  t9499 = t1384*t943;
  t9505 = t757*t1208*t1413;
  t9508 = t9499 + t9505;
  t9556 = -1.*t868*t9508;
  t9560 = t9036 + t9556;
  t9531 = -1.*t1604*t9508;
  t9548 = t9024 + t9531;
  t9603 = t2721*t9548;
  t9608 = t2577*t641*t9560;
  t9614 = t9603 + t9608;
  t9626 = t2577*t9548;
  t9627 = -1.*t641*t2721*t9560;
  t9634 = t9626 + t9627;
  t9641 = -1.*t3373*t9614;
  t9644 = t3312*t9634;
  t9654 = t9641 + t9644;
  t9663 = t3312*t9614;
  t9667 = t3373*t9634;
  t9670 = t9663 + t9667;
  t9271 = t2740*t9267;
  t9286 = -0.1305*t46*t9284;
  t9291 = t2332*t9284;
  t9295 = t641*t3199*t9284;
  t9307 = t3546*t9300;
  t9323 = t3817*t9319;
  t9355 = t4436*t9350;
  t9368 = t4604*t9366;
  t9369 = t4400*t9350;
  t9370 = t4123*t9366;
  t9372 = t9369 + t9370;
  t9375 = -0.0016*t9372;
  t9378 = t4123*t9350;
  t9384 = -1.*t4400*t9366;
  t9388 = t9378 + t9384;
  t9392 = -0.2707*t9388;
  t5590 = -1.*t1384*t28*t641;
  t5603 = t46*t5438;
  t5701 = t5590 + t5603;
  t9810 = -1.*t3312*t2721*t5701;
  t9812 = -1.*t2577*t3373*t5701;
  t9822 = t9810 + t9812;
  t9828 = t2577*t3312*t5701;
  t9830 = -1.*t2721*t3373*t5701;
  t9836 = t9828 + t9830;
  t9751 = -0.135*t46;
  t9752 = -0.049*t641;
  t9755 = t9751 + t9752;
  t9760 = 0.049*t46;
  t9764 = t9760 + t750;
  t9881 = t868*t9015;
  t9882 = t1604*t9508;
  t9884 = t9881 + t9882;
  t9893 = -1.*t28*t641*t757;
  t9895 = t46*t9884;
  t9903 = t9893 + t9895;
  t9926 = -1.*t3312*t2721*t9903;
  t9929 = -1.*t2577*t3373*t9903;
  t9932 = t9926 + t9929;
  t9938 = t2577*t3312*t9903;
  t9939 = -1.*t2721*t3373*t9903;
  t9950 = t9938 + t9939;
  t9979 = t28*t943*t868;
  t9982 = t1604*t28*t1413;
  t9983 = t9979 + t9982;
  t9989 = t641*t1208;
  t9992 = t46*t9983;
  t9993 = t9989 + t9992;
  t10022 = -1.*t3312*t2721*t9993;
  t10035 = -1.*t2577*t3373*t9993;
  t10036 = t10022 + t10035;
  t10047 = t2577*t3312*t9993;
  t10048 = -1.*t2721*t3373*t9993;
  t10059 = t10047 + t10048;
  t10111 = -1.*t2721*t5505;
  t10112 = -1.*t2577*t5962;
  t10117 = t10111 + t10112;
  t10121 = t3373*t10117;
  t10122 = t10121 + t6423;
  t10127 = t3312*t10117;
  t10130 = -1.*t3373*t6357;
  t10138 = t10127 + t10130;
  t10092 = 0.049*t2577;
  t10096 = t10092 + t3185;
  t10101 = -0.09*t2577;
  t10104 = -0.049*t2721;
  t10105 = t10101 + t10104;
  t10167 = t46*t28*t757;
  t10171 = t641*t9884;
  t10173 = t10167 + t10171;
  t10178 = -1.*t2721*t9560;
  t10180 = -1.*t2577*t10173;
  t10182 = t10178 + t10180;
  t10189 = t2577*t9560;
  t10191 = -1.*t2721*t10173;
  t10194 = t10189 + t10191;
  t10197 = t3373*t10182;
  t10200 = t3312*t10194;
  t10201 = t10197 + t10200;
  t10204 = t3312*t10182;
  t10209 = -1.*t3373*t10194;
  t10213 = t10204 + t10209;
  t10244 = -1.*t46*t1208;
  t10245 = t641*t9983;
  t10248 = t10244 + t10245;
  t10251 = -1.*t2721*t9284;
  t10253 = -1.*t2577*t10248;
  t10254 = t10251 + t10253;
  t10261 = t2577*t9284;
  t10265 = -1.*t2721*t10248;
  t10266 = t10261 + t10265;
  t10270 = t3373*t10254;
  t10274 = t3312*t10266;
  t10275 = t10270 + t10274;
  t10285 = t3312*t10254;
  t10287 = -1.*t3373*t10266;
  t10291 = t10285 + t10287;
  t10319 = -1.*t3312*t6110;
  t10322 = t10319 + t10130;
  t6780 = t4123*t6528;
  t10306 = -0.21*t3312;
  t10307 = -0.049*t3373;
  t10308 = t10306 + t10307;
  t10311 = 0.049*t3312;
  t10313 = t10311 + t3503;
  t10345 = t2721*t9560;
  t10350 = t2577*t10173;
  t10354 = t10345 + t10350;
  t10365 = -1.*t3373*t10354;
  t10367 = t10365 + t10200;
  t10372 = -1.*t3312*t10354;
  t10373 = t10372 + t10209;
  t10395 = t2721*t9284;
  t10396 = t2577*t10248;
  t10402 = t10395 + t10396;
  t10406 = -1.*t3373*t10402;
  t10408 = t10406 + t10274;
  t10411 = -1.*t3312*t10402;
  t10416 = t10411 + t10287;
  t10325 = -1.*t4400*t6528;
  t6783 = -1.*t4400*t6673;
  t6787 = t6780 + t6783;
  t10433 = 0.0016*t4123;
  t10437 = t10433 + t4589;
  t10440 = -0.2707*t4123;
  t10441 = -0.0016*t4400;
  t10444 = t10440 + t10441;
  t10376 = -1.*t4400*t10367;
  t10460 = t3312*t10354;
  t10462 = t3373*t10194;
  t10465 = t10460 + t10462;
  t10384 = t4123*t10367;
  t10418 = -1.*t4400*t10408;
  t10483 = t3312*t10402;
  t10488 = t3373*t10266;
  t10490 = t10483 + t10488;
  t10428 = t4123*t10408;

  p_output1(0)=1.;
  p_output1(1)=0;
  p_output1(2)=0;
  p_output1(3)=0;
  p_output1(4)=1.;
  p_output1(5)=0;
  p_output1(6)=0;
  p_output1(7)=0;
  p_output1(8)=1.;
  p_output1(9)=t2123*t2185 + t2332*t2498 + t2740*t2855 + t3199*t3263 + t3546*t3677 + t3817*t4057 + t4436*t4566 + t4604*t4700 - 0.0016*(t4400*t4566 + t4123*t4700) - 0.2707*(t4123*t4566 - 1.*t4400*t4700) - 1.*t28*t752*t757 - 0.1305*(t2498*t46 + t28*t641*t757) + t1543*t925;
  p_output1(10)=t2123*t5326 + t2332*t5438 + t2740*t5505 - 0.1305*t5701 + t3199*t5962 + t3546*t6110 + t3817*t6357 + t4436*t6528 + t4604*t6673 - 0.0016*(t4400*t6528 + t4123*t6673) - 0.2707*t6787 + t1384*t28*t752 + t5183*t925;
  p_output1(11)=0;
  p_output1(12)=t1384*t1413*t2123*t28 + t2332*t6978 - 0.1305*(t1208*t1384*t641 + t46*t6978) + t2740*t7019 + t3199*t7159 + t3546*t7251 + t3817*t7312 + t4436*t7416 + t4604*t7474 - 0.0016*(t4400*t7416 + t4123*t7474) - 0.2707*(t4123*t7416 - 1.*t4400*t7474) - 1.*t1208*t1384*t752 + t1384*t28*t925*t943;
  p_output1(13)=t1413*t2123*t28*t757 - 1.*t1208*t752*t757 + t2332*t7797 - 0.1305*(t1208*t641*t757 + t46*t7797) + t2740*t7841 + t3199*t7970 + t3546*t8016 + t3817*t8089 + t4436*t8153 + t4604*t8219 - 0.0016*(t4400*t8153 + t4123*t8219) - 0.2707*(t4123*t8153 - 1.*t4400*t8219) + t28*t757*t925*t943;
  p_output1(14)=-1.*t1208*t1413*t2123 - 1.*t28*t752 + t2332*t8331 - 0.1305*(t28*t641 + t46*t8331) + t2740*t8391 + t3199*t8454 + t3546*t8508 + t3817*t8568 + t4436*t8583 + t4604*t8613 - 0.0016*(t4400*t8583 + t4123*t8613) - 0.2707*(t4123*t8583 - 1.*t4400*t8613) - 1.*t1208*t925*t943;
  p_output1(15)=t2123*t5183 + t2740*t8779 + t2332*t8787 - 0.1305*t46*t8787 + t3199*t641*t8787 + t3546*t8810 + t3817*t8822 + t4436*t8883 + t4604*t8945 - 0.0016*(t4400*t8883 + t4123*t8945) - 0.2707*(t4123*t8883 - 1.*t4400*t8945) + t8743*t925;
  p_output1(16)=t2123*t9015 + t2740*t9029 + t2332*t9044 - 0.1305*t46*t9044 + t3199*t641*t9044 + t3546*t9070 + t3817*t9110 + t4436*t9151 + t4604*t9180 - 0.0016*(t4400*t9151 + t4123*t9180) - 0.2707*(t4123*t9151 - 1.*t4400*t9180) + t2185*t925;
  p_output1(17)=-1.*t1413*t28*t925 + t9271 + t9286 + t9291 + t9295 + t9307 + t9323 + t9355 + t9368 + t9375 + t9392 + t2123*t28*t943;
  p_output1(18)=0;
  p_output1(19)=0;
  p_output1(20)=0;
  p_output1(21)=0;
  p_output1(22)=0;
  p_output1(23)=0;
  p_output1(24)=0;
  p_output1(25)=0;
  p_output1(26)=0;
  p_output1(27)=0;
  p_output1(28)=0;
  p_output1(29)=0;
  p_output1(30)=0;
  p_output1(31)=0;
  p_output1(32)=0;
  p_output1(33)=0;
  p_output1(34)=0;
  p_output1(35)=0;
  p_output1(36)=0;
  p_output1(37)=0;
  p_output1(38)=0;
  p_output1(39)=0.135*t1604*t5183 + t2332*t5505 - 0.1305*t46*t5505 + t3199*t5505*t641 - 0.135*t5326*t868 + t2740*t9414 + t3546*t9433 + t3817*t9440 + t4436*t9464 + t4604*t9480 - 0.0016*(t4400*t9464 + t4123*t9480) - 0.2707*(t4123*t9464 - 1.*t4400*t9480);
  p_output1(40)=0.135*t1604*t9015 - 0.135*t868*t9508 + t2740*t9548 + t2332*t9560 - 0.1305*t46*t9560 + t3199*t641*t9560 + t3546*t9614 + t3817*t9634 + t4436*t9654 + t4604*t9670 - 0.0016*(t4400*t9654 + t4123*t9670) - 0.2707*(t4123*t9654 - 1.*t4400*t9670);
  p_output1(41)=-0.135*t1413*t28*t868 + t9271 + t9286 + t9291 + t9295 + t9307 + t9323 + t9355 + t9368 + t9375 + t9392 + 0.135*t1604*t28*t943;
  p_output1(42)=t3199*t5701 + t2577*t3546*t5701 - 1.*t2721*t3817*t5701 - 0.1305*(-1.*t1384*t28*t46 - 1.*t5438*t641) + t1384*t28*t9755 + t5438*t9764 + t4436*t9822 + t4604*t9836 - 0.0016*(t4400*t9822 + t4123*t9836) - 0.2707*(t4123*t9822 - 1.*t4400*t9836);
  p_output1(43)=t28*t757*t9755 + t9764*t9884 - 0.1305*(t3213 - 1.*t641*t9884) + t3199*t9903 + t2577*t3546*t9903 - 1.*t2721*t3817*t9903 + t4436*t9932 + t4604*t9950 - 0.0016*(t4400*t9932 + t4123*t9950) - 0.2707*(t4123*t9932 - 1.*t4400*t9950);
  p_output1(44)=-0.0016*(t10059*t4123 + t10036*t4400) - 0.2707*(t10036*t4123 - 1.*t10059*t4400) + t10036*t4436 + t10059*t4604 - 1.*t1208*t9755 + t9764*t9983 - 0.1305*(t1208*t46 - 1.*t641*t9983) + t3199*t9993 + t2577*t3546*t9993 - 1.*t2721*t3817*t9993;
  p_output1(45)=t10117*t3817 - 0.2707*(t10138*t4123 - 1.*t10122*t4400) - 0.0016*(t10122*t4123 + t10138*t4400) + t10138*t4436 + t10122*t4604 + t10096*t5505 + t10105*t5962 + t3546*t6357;
  p_output1(46)=t10105*t10173 + t10194*t3546 + t10182*t3817 - 0.2707*(t10213*t4123 - 1.*t10201*t4400) - 0.0016*(t10201*t4123 + t10213*t4400) + t10213*t4436 + t10201*t4604 + t10096*t9560;
  p_output1(47)=t10105*t10248 + t10266*t3546 + t10254*t3817 - 0.2707*(t10291*t4123 - 1.*t10275*t4400) - 0.0016*(t10275*t4123 + t10291*t4400) + t10291*t4436 + t10275*t4604 + t10096*t9284;
  p_output1(48)=-0.2707*(t10325 + t10322*t4123) + t10322*t4436 + t10308*t6110 + t10313*t6357 + t4604*t6528 - 0.0016*(t10322*t4400 + t6780);
  p_output1(49)=t10194*t10313 + t10308*t10354 - 0.2707*(t10376 + t10373*t4123) - 0.0016*(t10384 + t10373*t4400) + t10373*t4436 + t10367*t4604;
  p_output1(50)=t10266*t10313 + t10308*t10402 - 0.2707*(t10418 + t10416*t4123) - 0.0016*(t10428 + t10416*t4400) + t10416*t4436 + t10408*t4604;
  p_output1(51)=t10437*t6528 + t10444*t6673 - 0.2707*(t10325 - 1.*t4123*t6673) - 0.0016*t6787;
  p_output1(52)=t10367*t10437 + t10444*t10465 - 0.2707*(t10376 - 1.*t10465*t4123) - 0.0016*(t10384 - 1.*t10465*t4400);
  p_output1(53)=t10408*t10437 + t10444*t10490 - 0.2707*(t10418 - 1.*t10490*t4123) - 0.0016*(t10428 - 1.*t10490*t4400);
  p_output1(54)=0;
  p_output1(55)=0;
  p_output1(56)=0;
  p_output1(57)=0;
  p_output1(58)=0;
  p_output1(59)=0;
}


       
Eigen::Matrix<double,3,20> Jp_knee_to_shin_right(const Eigen::Matrix<double,20,1> &var1)
//void Jp_knee_to_shin_right(Eigen::Matrix<double,3,20> &p_output1, const Eigen::Matrix<double,20,1> &var1)
{
  /* Call Subroutines */
  Eigen::Matrix<double,3,20>  p_output1;
  
  output1(p_output1, var1);

  return p_output1;
}



