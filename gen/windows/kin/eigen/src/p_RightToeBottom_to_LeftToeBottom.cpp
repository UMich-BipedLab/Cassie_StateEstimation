/*
 * Automatically Generated from Mathematica.
 * Thu 23 May 2019 13:11:53 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "p_RightToeBottom_to_LeftToeBottom.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE static inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }


/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(Eigen::Matrix<double,3,1> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  double t268;
  double t208;
  double t209;
  double t223;
  double t269;
  double t178;
  double t320;
  double t335;
  double t441;
  double t237;
  double t287;
  double t295;
  double t470;
  double t139;
  double t584;
  double t634;
  double t697;
  double t296;
  double t485;
  double t505;
  double t699;
  double t72;
  double t780;
  double t790;
  double t794;
  double t560;
  double t701;
  double t711;
  double t809;
  double t6;
  double t864;
  double t913;
  double t954;
  double t727;
  double t823;
  double t830;
  double t999;
  double t1175;
  double t1223;
  double t1255;
  double t1259;
  double t1185;
  double t1190;
  double t1195;
  double t1373;
  double t1379;
  double t1391;
  double t1219;
  double t1285;
  double t1321;
  double t1493;
  double t1532;
  double t1564;
  double t1334;
  double t1423;
  double t1435;
  double t1782;
  double t1786;
  double t1790;
  double t1713;
  double t1736;
  double t1743;
  double t1826;
  double t1833;
  double t1869;
  double t1767;
  double t1794;
  double t1802;
  double t1918;
  double t1926;
  double t1934;
  double t1818;
  double t1878;
  double t1885;
  double t1995;
  double t2020;
  double t2042;
  double t1900;
  double t1936;
  double t1972;
  double t831;
  double t1031;
  double t1039;
  double t1100;
  double t1136;
  double t1145;
  double t1445;
  double t1578;
  double t1585;
  double t1597;
  double t1622;
  double t1624;
  double t1974;
  double t2058;
  double t2063;
  double t2094;
  double t2124;
  double t2130;
  double t2353;
  double t2388;
  double t2407;
  double t2075;
  double t2132;
  double t2137;
  double t1594;
  double t1658;
  double t1689;
  double t2488;
  double t2496;
  double t2502;
  double t1065;
  double t1164;
  double t1172;
  double t2771;
  double t2782;
  double t2865;
  double t2883;
  double t3028;
  double t3058;
  double t3162;
  double t3175;
  double t3322;
  double t3329;
  double t2643;
  double t2676;
  double t2798;
  double t2806;
  double t2808;
  double t2914;
  double t2917;
  double t2926;
  double t2946;
  double t2959;
  double t2983;
  double t3060;
  double t3065;
  double t3095;
  double t3139;
  double t3142;
  double t3145;
  double t3188;
  double t3219;
  double t3246;
  double t3270;
  double t3272;
  double t3279;
  double t3353;
  double t3361;
  double t3384;
  double t3391;
  double t3410;
  double t3432;
  double t2265;
  double t2282;
  double t2314;
  double t2622;
  double t2623;
  double t2625;
  double t2634;
  double t2720;
  double t2742;
  double t2746;
  double t2757;
  double t2817;
  double t2836;
  double t2840;
  double t2843;
  double t2845;
  double t2935;
  double t3024;
  double t3117;
  double t3157;
  double t3253;
  double t3287;
  double t3387;
  double t3447;
  double t3463;
  double t3466;
  double t3470;
  double t3515;
  double t3523;
  double t3525;
  double t3568;
  double t3582;
  double t3588;
  double t3589;
  double t3603;
  double t3606;
  double t3622;
  double t3634;
  double t3638;
  double t3639;
  double t3647;
  double t2571;
  double t2580;
  double t2584;
  double t1711;
  double t2228;
  double t2243;
  double t2254;
  double t2417;
  double t2530;
  double t2552;
  double t2565;
  double t2587;
  double t2598;
  double t2600;
  double t4143;
  double t4268;
  double t4317;
  double t4371;
  double t4414;
  double t4473;
  double t4791;
  double t4979;
  double t4980;
  double t5001;
  double t5013;
  double t5065;
  double t5118;
  double t5177;
  double t5395;
  double t5397;
  double t5436;
  double t5441;
  double t5457;
  double t5531;
  double t5607;
  double t5638;
  double t5643;
  double t5645;
  double t5729;
  double t5736;
  double t5759;
  double t5895;
  double t5900;
  double t5968;
  double t6079;
  double t6105;
  double t6118;
  double t6139;
  double t6298;
  double t6303;
  double t6355;
  double t6497;
  double t4160;
  double t4227;
  double t4579;
  double t4716;
  double t4756;
  double t4790;
  double t4873;
  double t4881;
  double t4435;
  double t4484;
  double t4516;
  double t6581;
  double t4903;
  double t4919;
  double t4965;
  double t5007;
  double t5031;
  double t5037;
  double t6620;
  double t6636;
  double t6638;
  double t6642;
  double t6646;
  double t6647;
  double t5313;
  double t5323;
  double t5342;
  double t5590;
  double t5626;
  double t5629;
  double t6661;
  double t6675;
  double t6678;
  double t6687;
  double t6690;
  double t6694;
  double t5680;
  double t5706;
  double t5712;
  double t5995;
  double t6084;
  double t6096;
  double t6707;
  double t6710;
  double t6726;
  double t6742;
  double t6748;
  double t6778;
  double t6160;
  double t6168;
  double t6186;
  double t6786;
  double t6790;
  double t6792;
  double t6795;
  double t6799;
  double t6800;
  double t6539;
  double t6554;
  double t6555;
  double t6582;
  double t6583;
  double t6588;
  double t6940;
  double t6951;
  double t6952;
  double t6962;
  double t6964;
  double t6965;
  double t6976;
  double t6977;
  double t6986;
  double t6995;
  double t6998;
  double t7022;
  double t7035;
  double t7043;
  double t7059;
  double t7068;
  double t7075;
  double t7091;
  double t7111;
  double t7112;
  double t7116;
  double t7139;
  double t7149;
  double t7151;
  double t3724;
  double t3742;
  double t3747;
  double t3787;
  double t3788;
  double t3793;
  double t3799;
  double t3801;
  double t3807;
  double t3821;
  double t3834;
  double t3847;
  double t3867;
  double t3879;
  double t3884;
  double t3888;
  double t3476;
  double t3653;
  double t3654;
  double t4229;
  double t4570;
  double t4685;
  double t4890;
  double t4976;
  double t5201;
  double t5437;
  double t5663;
  double t5845;
  double t6154;
  double t6387;
  double t6391;
  double t6398;
  double t6402;
  double t6414;
  double t6425;
  double t6428;
  double t6431;
  double t6434;
  double t6445;
  double t6504;
  double t6527;
  double t6529;
  double t6534;
  double t6569;
  double t6571;
  double t6598;
  double t6640;
  double t6650;
  double t6683;
  double t6695;
  double t6740;
  double t6783;
  double t6793;
  double t6810;
  double t6814;
  double t6824;
  double t6838;
  double t6855;
  double t6859;
  double t6873;
  double t6874;
  double t6878;
  double t6884;
  double t6910;
  double t6924;
  double t6930;
  double t6933;
  double t6937;
  double t6957;
  double t6971;
  double t6992;
  double t7029;
  double t7066;
  double t7101;
  double t7118;
  double t7167;
  double t7168;
  double t7169;
  double t7178;
  double t7181;
  double t7188;
  double t7195;
  double t7216;
  double t7220;
  double t7221;
  double t7239;
  double t7240;
  double t7244;
  double t3699;
  double t3708;
  double t3714;
  t268 = Cos(var1[7]);
  t208 = Cos(var1[9]);
  t209 = Sin(var1[7]);
  t223 = Sin(var1[8]);
  t269 = Sin(var1[9]);
  t178 = Cos(var1[10]);
  t320 = t268*t208;
  t335 = -1.*t209*t223*t269;
  t441 = t320 + t335;
  t237 = t208*t209*t223;
  t287 = t268*t269;
  t295 = t237 + t287;
  t470 = Sin(var1[10]);
  t139 = Cos(var1[11]);
  t584 = t178*t441;
  t634 = -1.*t295*t470;
  t697 = t584 + t634;
  t296 = t178*t295;
  t485 = t441*t470;
  t505 = t296 + t485;
  t699 = Sin(var1[11]);
  t72 = Cos(var1[12]);
  t780 = t139*t697;
  t790 = -1.*t505*t699;
  t794 = t780 + t790;
  t560 = t139*t505;
  t701 = t697*t699;
  t711 = t560 + t701;
  t809 = Sin(var1[12]);
  t6 = Cos(var1[13]);
  t864 = t72*t794;
  t913 = -1.*t711*t809;
  t954 = t864 + t913;
  t727 = t72*t711;
  t823 = t794*t809;
  t830 = t727 + t823;
  t999 = Sin(var1[13]);
  t1175 = Cos(var1[8]);
  t1223 = -1.*t1175*t178*t269;
  t1255 = -1.*t1175*t208*t470;
  t1259 = t1223 + t1255;
  t1185 = t1175*t208*t178;
  t1190 = -1.*t1175*t269*t470;
  t1195 = t1185 + t1190;
  t1373 = t139*t1259;
  t1379 = -1.*t1195*t699;
  t1391 = t1373 + t1379;
  t1219 = t139*t1195;
  t1285 = t1259*t699;
  t1321 = t1219 + t1285;
  t1493 = t72*t1391;
  t1532 = -1.*t1321*t809;
  t1564 = t1493 + t1532;
  t1334 = t72*t1321;
  t1423 = t1391*t809;
  t1435 = t1334 + t1423;
  t1782 = -1.*t208*t209;
  t1786 = -1.*t268*t223*t269;
  t1790 = t1782 + t1786;
  t1713 = t268*t208*t223;
  t1736 = -1.*t209*t269;
  t1743 = t1713 + t1736;
  t1826 = t178*t1790;
  t1833 = -1.*t1743*t470;
  t1869 = t1826 + t1833;
  t1767 = t178*t1743;
  t1794 = t1790*t470;
  t1802 = t1767 + t1794;
  t1918 = t139*t1869;
  t1926 = -1.*t1802*t699;
  t1934 = t1918 + t1926;
  t1818 = t139*t1802;
  t1878 = t1869*t699;
  t1885 = t1818 + t1878;
  t1995 = t72*t1934;
  t2020 = -1.*t1885*t809;
  t2042 = t1995 + t2020;
  t1900 = t72*t1885;
  t1936 = t1934*t809;
  t1972 = t1900 + t1936;
  t831 = t6*t830;
  t1031 = t954*t999;
  t1039 = t831 + t1031;
  t1100 = t6*t954;
  t1136 = -1.*t830*t999;
  t1145 = t1100 + t1136;
  t1445 = t6*t1435;
  t1578 = t1564*t999;
  t1585 = t1445 + t1578;
  t1597 = t6*t1564;
  t1622 = -1.*t1435*t999;
  t1624 = t1597 + t1622;
  t1974 = t6*t1972;
  t2058 = t2042*t999;
  t2063 = t1974 + t2058;
  t2094 = t6*t2042;
  t2124 = -1.*t1972*t999;
  t2130 = t2094 + t2124;
  t2353 = 0.642788*t1585;
  t2388 = 0.766044*t1624;
  t2407 = t2353 + t2388;
  t2075 = -0.766044*t2063;
  t2132 = 0.642788*t2130;
  t2137 = t2075 + t2132;
  t1594 = -0.766044*t1585;
  t1658 = 0.642788*t1624;
  t1689 = t1594 + t1658;
  t2488 = 0.642788*t2063;
  t2496 = 0.766044*t2130;
  t2502 = t2488 + t2496;
  t1065 = 0.642788*t1039;
  t1164 = 0.766044*t1145;
  t1172 = t1065 + t1164;
  t2771 = -1.*t208;
  t2782 = 1. + t2771;
  t2865 = -1.*t178;
  t2883 = 1. + t2865;
  t3028 = -1.*t139;
  t3058 = 1. + t3028;
  t3162 = -1.*t72;
  t3175 = 1. + t3162;
  t3322 = -1.*t6;
  t3329 = 1. + t3322;
  t2643 = -1.*t1175;
  t2676 = 1. + t2643;
  t2798 = -0.049*t2782;
  t2806 = -0.09*t269;
  t2808 = 0. + t2798 + t2806;
  t2914 = -0.049*t2883;
  t2917 = -0.21*t470;
  t2926 = 0. + t2914 + t2917;
  t2946 = -0.21*t2883;
  t2959 = 0.049*t470;
  t2983 = 0. + t2946 + t2959;
  t3060 = -0.0016*t3058;
  t3065 = -0.2707*t699;
  t3095 = 0. + t3060 + t3065;
  t3139 = -0.2707*t3058;
  t3142 = 0.0016*t699;
  t3145 = 0. + t3139 + t3142;
  t3188 = 0.0184*t3175;
  t3219 = -0.7055*t809;
  t3246 = 0. + t3188 + t3219;
  t3270 = -0.7055*t3175;
  t3272 = -0.0184*t809;
  t3279 = 0. + t3270 + t3272;
  t3353 = -0.0216*t3329;
  t3361 = -1.1135*t999;
  t3384 = 0. + t3353 + t3361;
  t3391 = -1.1135*t3329;
  t3410 = 0.0216*t999;
  t3432 = 0. + t3391 + t3410;
  t2265 = -0.766044*t1039;
  t2282 = 0.642788*t1145;
  t2314 = t2265 + t2282;
  t2622 = -1.*t268;
  t2623 = 1. + t2622;
  t2625 = -0.135*t2623;
  t2634 = -0.1305*t268*t1175;
  t2720 = -0.135*t2676;
  t2742 = 0.049*t223;
  t2746 = 0. + t2720 + t2742;
  t2757 = t268*t2746;
  t2817 = t268*t223*t2808;
  t2836 = -0.09*t2782;
  t2840 = 0.049*t269;
  t2843 = 0. + t2836 + t2840;
  t2845 = -1.*t209*t2843;
  t2935 = t1743*t2926;
  t3024 = t1790*t2983;
  t3117 = t1802*t3095;
  t3157 = t1869*t3145;
  t3253 = t1885*t3246;
  t3287 = t1934*t3279;
  t3387 = t1972*t3384;
  t3447 = t2042*t3432;
  t3463 = 0.0306*t2063;
  t3466 = -1.1312*t2130;
  t3470 = 0. + t2625 + t2634 + t2757 + t2817 + t2845 + t2935 + t3024 + t3117 + t3157 + t3253 + t3287 + t3387 + t3447 + t3463 + t3466;
  t3515 = -0.049*t2676;
  t3523 = -0.004500000000000004*t223;
  t3525 = t1175*t2808;
  t3568 = t1175*t208*t2926;
  t3582 = -1.*t1175*t269*t2983;
  t3588 = t1195*t3095;
  t3589 = t1259*t3145;
  t3603 = t1321*t3246;
  t3606 = t1391*t3279;
  t3622 = t1435*t3384;
  t3634 = t1564*t3432;
  t3638 = 0.0306*t1585;
  t3639 = -1.1312*t1624;
  t3647 = 0. + t3515 + t3523 + t3525 + t3568 + t3582 + t3588 + t3589 + t3603 + t3606 + t3622 + t3634 + t3638 + t3639;
  t2571 = t2407*t2137;
  t2580 = -1.*t1689*t2502;
  t2584 = t2571 + t2580;
  t1711 = t268*t1175*t1689;
  t2228 = t223*t2137;
  t2243 = t1711 + t2228;
  t2254 = -1.*t1172*t2243;
  t2417 = t268*t1175*t2407;
  t2530 = t223*t2502;
  t2552 = t2417 + t2530;
  t2565 = t2314*t2552;
  t2587 = -1.*t1175*t209*t2584;
  t2598 = 0. + t2254 + t2565 + t2587;
  t2600 = 1/t2598;
  t4143 = Cos(var1[1]);
  t4268 = Cos(var1[2]);
  t4317 = Cos(var1[3]);
  t4371 = -1.*t4317;
  t4414 = 1. + t4371;
  t4473 = Sin(var1[3]);
  t4791 = Sin(var1[2]);
  t4979 = Cos(var1[4]);
  t4980 = -1.*t4979;
  t5001 = 1. + t4980;
  t5013 = Sin(var1[4]);
  t5065 = -1.*t4143*t4268*t4473;
  t5118 = -1.*t4317*t4143*t4791;
  t5177 = t5065 + t5118;
  t5395 = t4317*t4143*t4268;
  t5397 = -1.*t4143*t4473*t4791;
  t5436 = t5395 + t5397;
  t5441 = Cos(var1[5]);
  t5457 = -1.*t5441;
  t5531 = 1. + t5457;
  t5607 = Sin(var1[5]);
  t5638 = t5013*t5177;
  t5643 = t4979*t5436;
  t5645 = t5638 + t5643;
  t5729 = t4979*t5177;
  t5736 = -1.*t5013*t5436;
  t5759 = t5729 + t5736;
  t5895 = Cos(var1[6]);
  t5900 = -1.*t5895;
  t5968 = 1. + t5900;
  t6079 = Sin(var1[6]);
  t6105 = -1.*t5607*t5645;
  t6118 = t5441*t5759;
  t6139 = t6105 + t6118;
  t6298 = t5441*t5645;
  t6303 = t5607*t5759;
  t6355 = t6298 + t6303;
  t6497 = Cos(var1[0]);
  t4160 = -1.*t4143;
  t4227 = 1. + t4160;
  t4579 = Sin(var1[1]);
  t4716 = -1.*t4268;
  t4756 = 1. + t4716;
  t4790 = -0.049*t4756;
  t4873 = -0.09*t4791;
  t4881 = 0. + t4790 + t4873;
  t4435 = -0.049*t4414;
  t4484 = -0.21*t4473;
  t4516 = 0. + t4435 + t4484;
  t6581 = Sin(var1[0]);
  t4903 = -0.21*t4414;
  t4919 = 0.049*t4473;
  t4965 = 0. + t4903 + t4919;
  t5007 = -0.2707*t5001;
  t5031 = 0.0016*t5013;
  t5037 = 0. + t5007 + t5031;
  t6620 = t6497*t4268*t4579;
  t6636 = -1.*t6581*t4791;
  t6638 = t6620 + t6636;
  t6642 = -1.*t4268*t6581;
  t6646 = -1.*t6497*t4579*t4791;
  t6647 = t6642 + t6646;
  t5313 = -0.0016*t5001;
  t5323 = -0.2707*t5013;
  t5342 = 0. + t5313 + t5323;
  t5590 = 0.0184*t5531;
  t5626 = -0.7055*t5607;
  t5629 = 0. + t5590 + t5626;
  t6661 = -1.*t4473*t6638;
  t6675 = t4317*t6647;
  t6678 = t6661 + t6675;
  t6687 = t4317*t6638;
  t6690 = t4473*t6647;
  t6694 = t6687 + t6690;
  t5680 = -0.7055*t5531;
  t5706 = -0.0184*t5607;
  t5712 = 0. + t5680 + t5706;
  t5995 = -1.1135*t5968;
  t6084 = 0.0216*t6079;
  t6096 = 0. + t5995 + t6084;
  t6707 = t5013*t6678;
  t6710 = t4979*t6694;
  t6726 = t6707 + t6710;
  t6742 = t4979*t6678;
  t6748 = -1.*t5013*t6694;
  t6778 = t6742 + t6748;
  t6160 = -0.0216*t5968;
  t6168 = -1.1135*t6079;
  t6186 = 0. + t6160 + t6168;
  t6786 = -1.*t5607*t6726;
  t6790 = t5441*t6778;
  t6792 = t6786 + t6790;
  t6795 = t5441*t6726;
  t6799 = t5607*t6778;
  t6800 = t6795 + t6799;
  t6539 = 0.135*t4227;
  t6554 = 0.049*t4579;
  t6555 = 0. + t6539 + t6554;
  t6582 = -0.09*t4756;
  t6583 = 0.049*t4791;
  t6588 = 0. + t6582 + t6583;
  t6940 = t4268*t6581*t4579;
  t6951 = t6497*t4791;
  t6952 = t6940 + t6951;
  t6962 = t6497*t4268;
  t6964 = -1.*t6581*t4579*t4791;
  t6965 = t6962 + t6964;
  t6976 = -1.*t4473*t6952;
  t6977 = t4317*t6965;
  t6986 = t6976 + t6977;
  t6995 = t4317*t6952;
  t6998 = t4473*t6965;
  t7022 = t6995 + t6998;
  t7035 = t5013*t6986;
  t7043 = t4979*t7022;
  t7059 = t7035 + t7043;
  t7068 = t4979*t6986;
  t7075 = -1.*t5013*t7022;
  t7091 = t7068 + t7075;
  t7111 = -1.*t5607*t7059;
  t7112 = t5441*t7091;
  t7116 = t7111 + t7112;
  t7139 = t5441*t7059;
  t7149 = t5607*t7091;
  t7151 = t7139 + t7149;
  t3724 = 0.135*t209;
  t3742 = -0.1305*t1175*t209;
  t3747 = t209*t2746;
  t3787 = t209*t223*t2808;
  t3788 = t268*t2843;
  t3793 = t295*t2926;
  t3799 = t441*t2983;
  t3801 = t505*t3095;
  t3807 = t697*t3145;
  t3821 = t711*t3246;
  t3834 = t794*t3279;
  t3847 = t830*t3384;
  t3867 = t954*t3432;
  t3879 = 0.0306*t1039;
  t3884 = -1.1312*t1145;
  t3888 = 0. + t3724 + t3742 + t3747 + t3787 + t3788 + t3793 + t3799 + t3801 + t3807 + t3821 + t3834 + t3847 + t3867 + t3879 + t3884;
  t3476 = t1689*t3470;
  t3653 = -1.*t3647*t2137;
  t3654 = t3476 + t3653;
  t4229 = -0.049*t4227;
  t4570 = t4143*t4268*t4516;
  t4685 = 0.004500000000000004*t4579;
  t4890 = t4143*t4881;
  t4976 = -1.*t4143*t4965*t4791;
  t5201 = t5037*t5177;
  t5437 = t5342*t5436;
  t5663 = t5629*t5645;
  t5845 = t5712*t5759;
  t6154 = t6096*t6139;
  t6387 = t6186*t6355;
  t6391 = t6079*t6139;
  t6398 = t5895*t6355;
  t6402 = t6391 + t6398;
  t6414 = 0.0306*t6402;
  t6425 = t5895*t6139;
  t6428 = -1.*t6079*t6355;
  t6431 = t6425 + t6428;
  t6434 = -1.1312*t6431;
  t6445 = 0. + t4229 + t4570 + t4685 + t4890 + t4976 + t5201 + t5437 + t5663 + t5845 + t6154 + t6387 + t6414 + t6434;
  t6504 = -1.*t6497;
  t6527 = 1. + t6504;
  t6529 = 0.135*t6527;
  t6534 = 0.1305*t6497*t4143;
  t6569 = t6497*t6555;
  t6571 = t6497*t4579*t4881;
  t6598 = -1.*t6581*t6588;
  t6640 = t4516*t6638;
  t6650 = t4965*t6647;
  t6683 = t5037*t6678;
  t6695 = t5342*t6694;
  t6740 = t5629*t6726;
  t6783 = t5712*t6778;
  t6793 = t6096*t6792;
  t6810 = t6186*t6800;
  t6814 = t6079*t6792;
  t6824 = t5895*t6800;
  t6838 = t6814 + t6824;
  t6855 = 0.0306*t6838;
  t6859 = t5895*t6792;
  t6873 = -1.*t6079*t6800;
  t6874 = t6859 + t6873;
  t6878 = -1.1312*t6874;
  t6884 = 0. + t6529 + t6534 + t6569 + t6571 + t6598 + t6640 + t6650 + t6683 + t6695 + t6740 + t6783 + t6793 + t6810 + t6855 + t6878;
  t6910 = -0.135*t6581;
  t6924 = 0.1305*t4143*t6581;
  t6930 = t6581*t6555;
  t6933 = t6581*t4579*t4881;
  t6937 = t6497*t6588;
  t6957 = t4516*t6952;
  t6971 = t4965*t6965;
  t6992 = t5037*t6986;
  t7029 = t5342*t7022;
  t7066 = t5629*t7059;
  t7101 = t5712*t7091;
  t7118 = t6096*t7116;
  t7167 = t6186*t7151;
  t7168 = t6079*t7116;
  t7169 = t5895*t7151;
  t7178 = t7168 + t7169;
  t7181 = 0.0306*t7178;
  t7188 = t5895*t7116;
  t7195 = -1.*t6079*t7151;
  t7216 = t7188 + t7195;
  t7220 = -1.1312*t7216;
  t7221 = 0. + t6910 + t6924 + t6930 + t6933 + t6937 + t6957 + t6971 + t6992 + t7029 + t7066 + t7101 + t7118 + t7167 + t7181 + t7220;
  t7239 = t268*t1175*t3647;
  t7240 = t223*t3470;
  t7244 = t7239 + t7240;
  t3699 = t2407*t3470;
  t3708 = -1.*t3647*t2502;
  t3714 = t3699 + t3708;

  p_output1(0)=t2600*(-1.*t1172*t3654 + t2314*t3714 - 1.*t2584*t3888) + (0. - 1.*t1172*t2137 + t2314*t2502)*t2600*t6445 + (0. + t1172*t1689 - 1.*t2314*t2407)*t2600*t6884 + (0. + t2571 + t2580)*t2600*t7221;
  p_output1(1)=t2600*(0. - 1.*t1175*t209*t2137 + t1175*t2314*t268)*t6445 + (0. + t1175*t1689*t209 + t223*t2314)*t2600*t6884 + t2600*(0. - 1.*t2137*t223 - 1.*t1175*t1689*t268)*t7221 + t2600*(-1.*t1175*t209*t3654 + t2243*t3888 - 1.*t2314*t7244);
  p_output1(2)=t2600*(0. + t1175*t209*t2502 - 1.*t1172*t1175*t268)*t6445 + (0. - 1.*t1172*t223 - 1.*t1175*t209*t2407)*t2600*t6884 + (0. + t2417 + t2530)*t2600*t7221 + t2600*(t1175*t209*t3714 - 1.*t2552*t3888 + t1172*t7244);
}


       
Eigen::Matrix<double,3,1> p_RightToeBottom_to_LeftToeBottom(const Eigen::Matrix<double,14,1> &var1)
//void p_RightToeBottom_to_LeftToeBottom(Eigen::Matrix<double,3,1> &p_output1, const Eigen::Matrix<double,14,1> &var1)
{
  /* Call Subroutines */
  Eigen::Matrix<double,3,1>  p_output1;
  
  output1(p_output1, var1);

  return p_output1;
}



